create (Hudson_xUnit:issue {name:'Hudson xUnit'}) create (hudson:class {name:'hudson', favoritecolor: 'green'}) create (Hudson_xUnit)-[:Bug]->(hudson)
create (Thanks_for_help:issue {name:'Thanks for help'}) create (Thanks_for_help)-[:Bug]->(hudson)
create (convert_file:issue {name:'convert file'}) create (convert_file)-[:Improvement]->(hudson)
create (know_about_similar_tasks:issue {name:'know about similar tasks'}) create (know_about_similar_tasks)-[:Improvement]->(hudson)
create (takes_place_with_version:issue {name:'takes place with version'}) create (takes_place_with_version)-[:Improvement]->(hudson)
create (configuration:class {name:'configuration', favoritecolor: 'green'}) create (Hudson_xUnit)-[:Bug]->(configuration)
create (Thanks_for_help)-[:Bug]->(configuration)
create (convert_file)-[:Improvement]->(configuration)
create (know_about_similar_tasks)-[:Improvement]->(configuration)
create (takes_place_with_version)-[:Improvement]->(configuration)
create (scenario:class {name:'scenario', favoritecolor: 'green'}) create (Hudson_xUnit)-[:Bug]->(scenario)
create (Thanks_for_help)-[:Bug]->(scenario)
create (convert_file)-[:Improvement]->(scenario)
create (know_about_similar_tasks)-[:Improvement]->(scenario)
create (takes_place_with_version)-[:Improvement]->(scenario)
create (Hudson_xUnit)-[:Bug]->(scenario)
create (Thanks_for_help)-[:Bug]->(scenario)
create (convert_file)-[:Improvement]->(scenario)
create (know_about_similar_tasks)-[:Improvement]->(scenario)
create (takes_place_with_version)-[:Improvement]->(scenario)
create (GivenStories:class {name:'GivenStories', favoritecolor: 'green'}) create (Hudson_xUnit)-[:Bug]->(GivenStories)
create (Thanks_for_help)-[:Bug]->(GivenStories)
create (convert_file)-[:Improvement]->(GivenStories)
create (know_about_similar_tasks)-[:Improvement]->(GivenStories)
create (takes_place_with_version)-[:Improvement]->(GivenStories)
create (change_users:issue {name:'change users'}) create (ant :class {name:'ant ', favoritecolor: 'green'}) create (change_users)-[:Improvement]->(ant)
create (has_installed_ant_version_in_case:issue {name:'has installed ant version in case'}) create (has_installed_ant_version_in_case)-[:Improvement]->(ant)
create (maven:class {name:'maven', favoritecolor: 'green'}) create (change_users)-[:Improvement]->(maven)
create (has_installed_ant_version_in_case)-[:Improvement]->(maven)
create (Stack_Traces:issue {name:'Stack Traces'}) create (StoryReporterBuilder:class {name:'StoryReporterBuilder', favoritecolor: 'green'}) create (Stack_Traces)-[:Bug]->(StoryReporterBuilder)
create (has_three_lines:issue {name:'has three lines'}) create (has_three_lines)-[:Bug]->(StoryReporterBuilder)
create (be_in_stack:issue {name:'be in stack'}) create (be_in_stack)-[:Improvement]->(StoryReporterBuilder)
create (has_three_different_fragments_of_stack:issue {name:'has three different fragments of stack'}) create (has_three_different_fragments_of_stack)-[:Improvement]->(StoryReporterBuilder)
create (Stack_Traces_printed_output_QA_engineer_different_fragments_fragments_of_stack_QA_engineer_compression_behaviour_boolean_flag_:issue {name:'Stack Traces - printed output - QA engineer - different fragments - fragments of stack - QA engineer - compression behaviour - boolean flag - '}) create (Stack_Traces_printed_output_QA_engineer_different_fragments_fragments_of_stack_QA_engineer_compression_behaviour_boolean_flag_)-[:Improvement]->(StoryReporterBuilder)
create (print:class {name:'print', favoritecolor: 'green'}) create (Stack_Traces)-[:Bug]->(print)
create (has_three_lines)-[:Bug]->(print)
create (be_in_stack)-[:Improvement]->(print)
create (has_three_different_fragments_of_stack)-[:Improvement]->(print)
create (Stack_Traces_printed_output_QA_engineer_different_fragments_fragments_of_stack_QA_engineer_compression_behaviour_boolean_flag_)-[:Improvement]->(print)
create (Stack_Traces)-[:Bug]->(StoryReporterBuilder)
create (has_three_lines)-[:Bug]->(StoryReporterBuilder)
create (be_in_stack)-[:Improvement]->(StoryReporterBuilder)
create (has_three_different_fragments_of_stack)-[:Improvement]->(StoryReporterBuilder)
create (Stack_Traces_printed_output_QA_engineer_different_fragments_fragments_of_stack_QA_engineer_compression_behaviour_boolean_flag_)-[:Improvement]->(StoryReporterBuilder)
create (Stack_Traces)-[:Bug]->(StoryReporterBuilder)
create (has_three_lines)-[:Bug]->(StoryReporterBuilder)
create (be_in_stack)-[:Improvement]->(StoryReporterBuilder)
create (has_three_different_fragments_of_stack)-[:Improvement]->(StoryReporterBuilder)
create (Stack_Traces_printed_output_QA_engineer_different_fragments_fragments_of_stack_QA_engineer_compression_behaviour_boolean_flag_)-[:Improvement]->(StoryReporterBuilder)
create (constituent_scenarios:issue {name:'constituent scenarios'}) create (pending:class {name:'pending', favoritecolor: 'green'}) create (constituent_scenarios)-[:Bug]->(pending)
create (stories_with_steps:issue {name:'stories with steps'}) create (stories_with_steps)-[:Bug]->(pending)
create (view_scenarios:issue {name:'view scenarios'}) create (view_scenarios)-[:Improvement]->(pending)
create (mean_in_kind:issue {name:'mean in kind'}) create (mean_in_kind)-[:Improvement]->(pending)
create (maintain_flow_of_top_development:issue {name:'maintain flow of top development'}) create (maintain_flow_of_top_development)-[:Improvement]->(pending)
create (constituent_scenarios)-[:Bug]->(scenario)
create (stories_with_steps)-[:Bug]->(scenario)
create (view_scenarios)-[:Improvement]->(scenario)
create (mean_in_kind)-[:Improvement]->(scenario)
create (maintain_flow_of_top_development)-[:Improvement]->(scenario)
create (constituent_scenarios)-[:Bug]->(pending)
create (stories_with_steps)-[:Bug]->(pending)
create (view_scenarios)-[:Improvement]->(pending)
create (mean_in_kind)-[:Improvement]->(pending)
create (maintain_flow_of_top_development)-[:Improvement]->(pending)
create (constituent_scenarios)-[:Bug]->(scenario)
create (stories_with_steps)-[:Bug]->(scenario)
create (view_scenarios)-[:Improvement]->(scenario)
create (mean_in_kind)-[:Improvement]->(scenario)
create (maintain_flow_of_top_development)-[:Improvement]->(scenario)
create (expose_properties:issue {name:'expose properties'}) create (SpringStoryReporterBuilder:class {name:'SpringStoryReporterBuilder', favoritecolor: 'green'}) create (expose_properties)-[:Bug]->(SpringStoryReporterBuilder)
create (expose_properties_in_StoryReporterBuilder:issue {name:'expose properties in StoryReporterBuilder'}) create (expose_properties_in_StoryReporterBuilder)-[:Improvement]->(SpringStoryReporterBuilder)
create (expose_all_properties_expose_all_properties_properties_in_StoryReporterBuilder_other_properties_:issue {name:'expose all properties - expose all properties - properties in StoryReporterBuilder - other properties - '}) create (expose_all_properties_expose_all_properties_properties_in_StoryReporterBuilder_other_properties_)-[:Improvement]->(SpringStoryReporterBuilder)
create (core:class {name:'core', favoritecolor: 'green'}) create (expose_properties)-[:Bug]->(core)
create (expose_properties_in_StoryReporterBuilder)-[:Improvement]->(core)
create (expose_all_properties_expose_all_properties_properties_in_StoryReporterBuilder_other_properties_)-[:Improvement]->(core)
create (expose_properties)-[:Bug]->(StoryReporterBuilder)
create (expose_properties_in_StoryReporterBuilder)-[:Improvement]->(StoryReporterBuilder)
create (expose_all_properties_expose_all_properties_properties_in_StoryReporterBuilder_other_properties_)-[:Improvement]->(StoryReporterBuilder)
create (expose_properties)-[:Bug]->(StoryReporterBuilder)
create (expose_properties_in_StoryReporterBuilder)-[:Improvement]->(StoryReporterBuilder)
create (expose_all_properties_expose_all_properties_properties_in_StoryReporterBuilder_other_properties_)-[:Improvement]->(StoryReporterBuilder)
create (expose_properties)-[:Bug]->(StoryReporterBuilder)
create (expose_properties_in_StoryReporterBuilder)-[:Improvement]->(StoryReporterBuilder)
create (expose_all_properties_expose_all_properties_properties_in_StoryReporterBuilder_other_properties_)-[:Improvement]->(StoryReporterBuilder)
create (Initialisation_errors:issue {name:'Initialisation errors'}) create (initialize:class {name:'initialize', favoritecolor: 'green'}) create (Initialisation_errors)-[:Bug]->(initialize)
create (Initialisation_errors_in_RemoteWebDriverProvider:issue {name:'Initialisation errors in RemoteWebDriverProvider'}) create (Initialisation_errors_in_RemoteWebDriverProvider)-[:Bug]->(initialize)
create (verify_behaviour:issue {name:'verify behaviour'}) create (verify_behaviour)-[:Improvement]->(initialize)
create (lead_to_RunningStoriesFailed_exception:issue {name:'lead to RunningStoriesFailed exception'}) create (lead_to_RunningStoriesFailed_exception)-[:Improvement]->(initialize)
create (Initialisation_errors_errors_in_RemoteWebDriverProvider_reported_Errors_reported_Errors_in_initialize_Errors_in_initialize_initialize_method_auth_failure_verify_behaviour_missing_URL_RunningStoriesFailed_exception_:issue {name:'Initialisation errors - errors in RemoteWebDriverProvider - reported Errors - reported Errors in initialize - Errors in initialize - initialize method - auth failure - verify behaviour - missing URL - RunningStoriesFailed exception - '}) create (Initialisation_errors_errors_in_RemoteWebDriverProvider_reported_Errors_reported_Errors_in_initialize_Errors_in_initialize_initialize_method_auth_failure_verify_behaviour_missing_URL_RunningStoriesFailed_exception_)-[:Improvement]->(initialize)
create (click_story_name:issue {name:'click story name'}) create (click_story_name)-[:Bug]->(ant)
create (Story_source_HTMLified_story_HTMLified_story_output_story_output_click_the_story_click_the_story_story_name_:issue {name:'Story source - HTMLified story - HTMLified story output - story output - click the story - click the story - story name - '}) create (Story_source_HTMLified_story_HTMLified_story_output_story_output_click_the_story_click_the_story_story_name_)-[:Bug]->(ant)
create (allow_output:issue {name:'allow output'}) create (allow_output)-[:Bug]->(configuration)
create (write_to_one_format:issue {name:'write to one format'}) create (write_to_one_format)-[:Bug]->(configuration)
create (allow_output_of_JSON_data:issue {name:'allow output of JSON data'}) create (allow_output_of_JSON_data)-[:Improvement]->(configuration)
create (allow_output_allow_output_of_JSON_output_of_JSON_JSON_or_XML_JSON_or_XML_data_XML_data_completed_story_writing_the_cross_writing_the_cross_cross_reference_cross_reference_XML_reference_XML_story_completion_have_a_configuration_have_a_configuration_configuration_option_allows_a_choice_allows_a_choice_choice_of_XML_XML_or_JSON_:issue {name:'allow output - allow output of JSON - output of JSON - JSON or XML - JSON or XML data - XML data - completed story - writing the cross - writing the cross - cross reference - cross reference XML - reference XML - story completion - have a configuration - have a configuration - configuration option - allows a choice - allows a choice - choice of XML - XML or JSON - '}) create (allow_output_allow_output_of_JSON_output_of_JSON_JSON_or_XML_JSON_or_XML_data_XML_data_completed_story_writing_the_cross_writing_the_cross_cross_reference_cross_reference_XML_reference_XML_story_completion_have_a_configuration_have_a_configuration_configuration_option_allows_a_choice_allows_a_choice_choice_of_XML_XML_or_JSON_)-[:Improvement]->(configuration)
create (NPE_NPE:issue {name:'NPE NPE'}) create (NPE_NPE)-[:Bug]->(initialize)
create (Error_in_WebDriverProvider_initialize_method:issue {name:'Error in WebDriverProvider initialize method'}) create (Error_in_WebDriverProvider_initialize_method)-[:Bug]->(initialize)
create (throw_new_RuntimeException:issue {name:'throw new RuntimeException'}) create (throw_new_RuntimeException)-[:Improvement]->(initialize)
create (is_in_StoryRunner:issue {name:'is in StoryRunner'}) create (is_in_StoryRunner)-[:Improvement]->(initialize)
create (Error_in_WebDriverProvider_WebDriverProvider_initialize_WebDriverProvider_initialize_method_initialize_method_new_WebDriverProvider_public_void_initialize_void_initialize_concerning_member_concerning_member_variable_member_variable_:issue {name:'Error in WebDriverProvider - WebDriverProvider initialize - WebDriverProvider initialize method - initialize method - new WebDriverProvider - public void initialize - void initialize - concerning member - concerning member variable - member variable - '}) create (Error_in_WebDriverProvider_WebDriverProvider_initialize_WebDriverProvider_initialize_method_initialize_method_new_WebDriverProvider_public_void_initialize_void_initialize_concerning_member_concerning_member_variable_member_variable_)-[:Improvement]->(initialize)
create (story_timeout:issue {name:'story timeout'}) create (story_timeout)-[:Bug]->(configuration)
create (Allow_configuration:issue {name:'Allow configuration'}) create (Allow_configuration)-[:Bug]->(configuration)
create (is_via_EmbedderControls:issue {name:'is via EmbedderControls'}) create (is_via_EmbedderControls)-[:Improvement]->(configuration)
create (Allow_configuration_of_storyTimeoutInSecs:issue {name:'Allow configuration of storyTimeoutInSecs'}) create (Allow_configuration_of_storyTimeoutInSecs)-[:Improvement]->(configuration)
create (Allow_configuration_Allow_configuration_of_storyTimeoutInSecs_configuration_of_storyTimeoutInSecs_story_timeout_:issue {name:'Allow configuration - Allow configuration of storyTimeoutInSecs - configuration of storyTimeoutInSecs - story timeout - '}) create (Allow_configuration_Allow_configuration_of_storyTimeoutInSecs_configuration_of_storyTimeoutInSecs_story_timeout_)-[:Improvement]->(configuration)
create (CrossReference_Add:issue {name:'CrossReference Add'}) create (duration:class {name:'duration', favoritecolor: 'green'}) create (CrossReference_Add)-[:Bug]->(duration)
create (Add_story:issue {name:'Add story'}) create (Add_story)-[:Bug]->(duration)
create (timing_info_to_Add_timing_fields:issue {name:'timing info to Add timing fields'}) create (timing_info_to_Add_timing_fields)-[:Improvement]->(duration)
create (Add_story_timing_info_timing_fields_:issue {name:'Add story - timing info - timing fields - '}) create (Add_story_timing_info_timing_fields_)-[:Improvement]->(duration)
create (rd_example:issue {name:'rd example'}) create (after:class {name:'after', favoritecolor: 'green'}) create (rd_example)-[:Bug]->(after)
create (has_example_table:issue {name:'has example table'}) create (has_example_table)-[:Bug]->(after)
create (failes_with_particular_example_set:issue {name:'failes with particular example set'}) create (failes_with_particular_example_set)-[:Improvement]->(after)
create (has_example_table_with_examples_Lets:issue {name:'has example table with examples Lets'}) create (has_example_table_with_examples_Lets)-[:Improvement]->(after)
create (example_failure_has_an_example_has_an_example_example_table_Assume_a_scenario_Assume_a_scenario_has_a_example_has_a_example_example_table_say_the_scenario_say_the_scenario_rd_example_last_example_above_case_last_example_particular_example_particular_example_set_example_set_:issue {name:'example failure - has an example - has an example - example table - Assume a scenario - Assume a scenario - has a example - has a example - example table - say the scenario - say the scenario - rd example - last example - above case - last example - particular example - particular example set - example set - '}) create (example_failure_has_an_example_has_an_example_example_table_Assume_a_scenario_Assume_a_scenario_has_a_example_has_a_example_example_table_say_the_scenario_say_the_scenario_rd_example_last_example_above_case_last_example_particular_example_particular_example_set_example_set_)-[:Improvement]->(after)
create (rd_example)-[:Bug]->(scenario)
create (has_example_table)-[:Bug]->(scenario)
create (failes_with_particular_example_set)-[:Improvement]->(scenario)
create (has_example_table_with_examples_Lets)-[:Improvement]->(scenario)
create (example_failure_has_an_example_has_an_example_example_table_Assume_a_scenario_Assume_a_scenario_has_a_example_has_a_example_example_table_say_the_scenario_say_the_scenario_rd_example_last_example_above_case_last_example_particular_example_particular_example_set_example_set_)-[:Improvement]->(scenario)
create (rd_example)-[:Bug]->(scenario)
create (has_example_table)-[:Bug]->(scenario)
create (failes_with_particular_example_set)-[:Improvement]->(scenario)
create (has_example_table_with_examples_Lets)-[:Improvement]->(scenario)
create (example_failure_has_an_example_has_an_example_example_table_Assume_a_scenario_Assume_a_scenario_has_a_example_has_a_example_example_table_say_the_scenario_say_the_scenario_rd_example_last_example_above_case_last_example_particular_example_particular_example_set_example_set_)-[:Improvement]->(scenario)
create (step_method:issue {name:'step method'}) create (org_jbehave_core:package {name:'org_jbehave_core', favoritecolor: 'orange'}) create (step_method)-[:Bug]->(org_jbehave_core)
create (run_steps:issue {name:'run steps'}) create (run_steps)-[:Improvement]->(org_jbehave_core)
create (results_from_NPE:issue {name:'results from NPE'}) create (results_from_NPE)-[:Improvement]->(org_jbehave_core)
create (run_steps_over_scenario:issue {name:'run steps over scenario'}) create (run_steps_over_scenario)-[:Improvement]->(org_jbehave_core)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_:issue {name:'Pending step - Pending step method - step method - step method generation - method generation - pending method - pending method generation - method generation - same scenario - generates methods - commit cf - knows the story - knows the story - run times - expected behaviour - Failing scenario - good credentials - login page - intended page - intended page - intended page - login page - good credentials - intended page - good credentials - login page - intended page - intended page - intended page - login page - good credentials - intended page - run story - using formats - view properties - '}) create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(org_jbehave_core)
create (org_jbehave_core_embedder:package {name:'org_jbehave_core_embedder', favoritecolor: 'orange'}) create (step_method)-[:Bug]->(org_jbehave_core_embedder)
create (run_steps)-[:Improvement]->(org_jbehave_core_embedder)
create (results_from_NPE)-[:Improvement]->(org_jbehave_core_embedder)
create (run_steps_over_scenario)-[:Improvement]->(org_jbehave_core_embedder)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(org_jbehave_core_embedder)
create (org_jbehave_core_steps:package {name:'org_jbehave_core_steps', favoritecolor: 'orange'}) create (step_method)-[:Bug]->(org_jbehave_core_steps)
create (run_steps)-[:Improvement]->(org_jbehave_core_steps)
create (results_from_NPE)-[:Improvement]->(org_jbehave_core_steps)
create (run_steps_over_scenario)-[:Improvement]->(org_jbehave_core_steps)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(org_jbehave_core_steps)
create (step_method)-[:Bug]->(core)
create (run_steps)-[:Improvement]->(core)
create (results_from_NPE)-[:Improvement]->(core)
create (run_steps_over_scenario)-[:Improvement]->(core)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(core)
create (embedder:class {name:'embedder', favoritecolor: 'green'}) create (step_method)-[:Bug]->(embedder)
create (run_steps)-[:Improvement]->(embedder)
create (results_from_NPE)-[:Improvement]->(embedder)
create (run_steps_over_scenario)-[:Improvement]->(embedder)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(embedder)
create (failed:class {name:'failed', favoritecolor: 'green'}) create (step_method)-[:Bug]->(failed)
create (run_steps)-[:Improvement]->(failed)
create (results_from_NPE)-[:Improvement]->(failed)
create (run_steps_over_scenario)-[:Improvement]->(failed)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(failed)
create (step_method)-[:Bug]->(after)
create (run_steps)-[:Improvement]->(after)
create (results_from_NPE)-[:Improvement]->(after)
create (run_steps_over_scenario)-[:Improvement]->(after)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(after)
create (step_method)-[:Bug]->(pending)
create (run_steps)-[:Improvement]->(pending)
create (results_from_NPE)-[:Improvement]->(pending)
create (run_steps_over_scenario)-[:Improvement]->(pending)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(pending)
create (step_method)-[:Bug]->(scenario)
create (run_steps)-[:Improvement]->(scenario)
create (results_from_NPE)-[:Improvement]->(scenario)
create (run_steps_over_scenario)-[:Improvement]->(scenario)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(scenario)
create (stepStartsWithWord:class {name:'stepStartsWithWord', favoritecolor: 'green'}) create (step_method)-[:Bug]->(stepStartsWithWord)
create (run_steps)-[:Improvement]->(stepStartsWithWord)
create (results_from_NPE)-[:Improvement]->(stepStartsWithWord)
create (run_steps_over_scenario)-[:Improvement]->(stepStartsWithWord)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(stepStartsWithWord)
create (step_method)-[:Bug]->(pending)
create (run_steps)-[:Improvement]->(pending)
create (results_from_NPE)-[:Improvement]->(pending)
create (run_steps_over_scenario)-[:Improvement]->(pending)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(pending)
create (step_method)-[:Bug]->(scenario)
create (run_steps)-[:Improvement]->(scenario)
create (results_from_NPE)-[:Improvement]->(scenario)
create (run_steps_over_scenario)-[:Improvement]->(scenario)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(scenario)
create (step_method)-[:Bug]->(stepStartsWithWord)
create (run_steps)-[:Improvement]->(stepStartsWithWord)
create (results_from_NPE)-[:Improvement]->(stepStartsWithWord)
create (run_steps_over_scenario)-[:Improvement]->(stepStartsWithWord)
create (Pending_step_Pending_step_method_step_method_step_method_generation_method_generation_pending_method_pending_method_generation_method_generation_same_scenario_generates_methods_commit_cf_knows_the_story_knows_the_story_run_times_expected_behaviour_Failing_scenario_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_good_credentials_login_page_intended_page_intended_page_intended_page_login_page_good_credentials_intended_page_run_story_using_formats_view_properties_)-[:Bug]->(stepStartsWithWord)
create (Scenario_Scenario:issue {name:'Scenario Scenario'}) create (keywords:class {name:'keywords', favoritecolor: 'green'}) create (Scenario_Scenario)-[:Bug]->(keywords)
create (JBehave_in_german_translations:issue {name:'JBehave in german translations'}) create (JBehave_in_german_translations)-[:Bug]->(keywords)
create (using_jbehave:issue {name:'using jbehave'}) create (using_jbehave)-[:Improvement]->(keywords)
create (is_in_case:issue {name:'is in case'}) create (is_in_case)-[:Improvement]->(keywords)
create (break_compatibility_with_releases:issue {name:'break compatibility with releases'}) create (break_compatibility_with_releases)-[:Improvement]->(keywords)
create (Scenario_Scenario)-[:Bug]->(keywords)
create (JBehave_in_german_translations)-[:Bug]->(keywords)
create (using_jbehave)-[:Improvement]->(keywords)
create (is_in_case)-[:Improvement]->(keywords)
create (break_compatibility_with_releases)-[:Improvement]->(keywords)
create (Scenario_Scenario)-[:Bug]->(GivenStories)
create (JBehave_in_german_translations)-[:Bug]->(GivenStories)
create (using_jbehave)-[:Improvement]->(GivenStories)
create (is_in_case)-[:Improvement]->(GivenStories)
create (break_compatibility_with_releases)-[:Improvement]->(GivenStories)
create (test_class:issue {name:'test class'}) create (test_class)-[:Bug]->(configuration)
create (using_Maven_plugin:issue {name:'using Maven plugin'}) create (using_Maven_plugin)-[:Bug]->(configuration)
create (is_IN_class_directory:issue {name:'is IN class directory'}) create (is_IN_class_directory)-[:Improvement]->(configuration)
create (embeddables_from_test_test_directory_include_the_test_include_the_test_test_class_test_class_directory_class_directory_running_class_test_class_test_class_directory_class_directory_same_code_including_the_test_including_the_test_test_class_test_class_directory_class_directory_unit_tests_:issue {name:'embeddables from test - test directory - include the test - include the test - test class - test class directory - class directory - running class - test class - test class directory - class directory - same code - including the test - including the test - test class - test class directory - class directory - unit tests - '}) create (embeddables_from_test_test_directory_include_the_test_include_the_test_test_class_test_class_directory_class_directory_running_class_test_class_test_class_directory_class_directory_same_code_including_the_test_including_the_test_test_class_test_class_directory_class_directory_unit_tests_)-[:Improvement]->(configuration)
create (meta:class {name:'meta', favoritecolor: 'green'}) create (test_class)-[:Bug]->(meta)
create (using_Maven_plugin)-[:Bug]->(meta)
create (is_IN_class_directory)-[:Improvement]->(meta)
create (embeddables_from_test_test_directory_include_the_test_include_the_test_test_class_test_class_directory_class_directory_running_class_test_class_test_class_directory_class_directory_same_code_including_the_test_including_the_test_test_class_test_class_directory_class_directory_unit_tests_)-[:Improvement]->(meta)
create (metaFilter:class {name:'metaFilter', favoritecolor: 'green'}) create (test_class)-[:Bug]->(metaFilter)
create (using_Maven_plugin)-[:Bug]->(metaFilter)
create (is_IN_class_directory)-[:Improvement]->(metaFilter)
create (embeddables_from_test_test_directory_include_the_test_include_the_test_test_class_test_class_directory_class_directory_running_class_test_class_test_class_directory_class_directory_same_code_including_the_test_including_the_test_test_class_test_class_directory_class_directory_unit_tests_)-[:Improvement]->(metaFilter)
create (test_class)-[:Bug]->(meta)
create (using_Maven_plugin)-[:Bug]->(meta)
create (is_IN_class_directory)-[:Improvement]->(meta)
create (embeddables_from_test_test_directory_include_the_test_include_the_test_test_class_test_class_directory_class_directory_running_class_test_class_test_class_directory_class_directory_same_code_including_the_test_including_the_test_test_class_test_class_directory_class_directory_unit_tests_)-[:Improvement]->(meta)
create (test_class)-[:Bug]->(metaFilter)
create (using_Maven_plugin)-[:Bug]->(metaFilter)
create (is_IN_class_directory)-[:Improvement]->(metaFilter)
create (embeddables_from_test_test_directory_include_the_test_include_the_test_test_class_test_class_directory_class_directory_running_class_test_class_test_class_directory_class_directory_same_code_including_the_test_including_the_test_test_class_test_class_directory_class_directory_unit_tests_)-[:Improvement]->(metaFilter)
create (LoadFromClasspath:class {name:'LoadFromClasspath', favoritecolor: 'green'}) create (test_class)-[:Bug]->(LoadFromClasspath)
create (using_Maven_plugin)-[:Bug]->(LoadFromClasspath)
create (is_IN_class_directory)-[:Improvement]->(LoadFromClasspath)
create (embeddables_from_test_test_directory_include_the_test_include_the_test_test_class_test_class_directory_class_directory_running_class_test_class_test_class_directory_class_directory_same_code_including_the_test_including_the_test_test_class_test_class_directory_class_directory_unit_tests_)-[:Improvement]->(LoadFromClasspath)
create (behave_in_same_manner:issue {name:'behave in same manner'}) create (behave_in_same_manner)-[:Bug]->(pending)
create (behave_in_same_manner)-[:Bug]->(pending)
create (Composite:class {name:'Composite', favoritecolor: 'green'}) create (behave_in_same_manner)-[:Bug]->(Composite)
create (set_of_steps:issue {name:'set of steps'}) create (given:class {name:'given', favoritecolor: 'green'}) create (set_of_steps)-[:Bug]->(given)
create (Improve_state_management:issue {name:'Improve state management'}) create (Improve_state_management)-[:Improvement]->(given)
create (be_in_place:issue {name:'be in place'}) create (be_in_place)-[:Improvement]->(given)
create (Improve_state_management_of_StoryRunner:issue {name:'Improve state management of StoryRunner'}) create (Improve_state_management_of_StoryRunner)-[:Improvement]->(given)
create (set_of_steps)-[:Bug]->(after)
create (Improve_state_management)-[:Improvement]->(after)
create (be_in_place)-[:Improvement]->(after)
create (Improve_state_management_of_StoryRunner)-[:Improvement]->(after)
create (set_of_steps)-[:Bug]->(scenario)
create (Improve_state_management)-[:Improvement]->(scenario)
create (be_in_place)-[:Improvement]->(scenario)
create (Improve_state_management_of_StoryRunner)-[:Improvement]->(scenario)
create (set_of_steps)-[:Bug]->(scenario)
create (Improve_state_management)-[:Improvement]->(scenario)
create (be_in_place)-[:Improvement]->(scenario)
create (Improve_state_management_of_StoryRunner)-[:Improvement]->(scenario)
create (Failing_Scenarios:issue {name:'Failing Scenarios'}) create (rest :class {name:'rest ', favoritecolor: 'green'}) create (Failing_Scenarios)-[:Bug]->(rest)
create (report_at_bottom:issue {name:'report at bottom'}) create (report_at_bottom)-[:Bug]->(rest)
create (report_success:issue {name:'report success'}) create (report_success)-[:Improvement]->(rest)
create (see_Upon_further_inspection:issue {name:'see Upon further inspection'}) create (see_Upon_further_inspection)-[:Improvement]->(rest)
create (do_nothing_After_Scenario:issue {name:'do nothing After Scenario'}) create (do_nothing_After_Scenario)-[:Improvement]->(rest)
create (Failing_Scenarios)-[:Bug]->(failed)
create (report_at_bottom)-[:Bug]->(failed)
create (report_success)-[:Improvement]->(failed)
create (see_Upon_further_inspection)-[:Improvement]->(failed)
create (do_nothing_After_Scenario)-[:Improvement]->(failed)
create (Failing_Scenarios)-[:Bug]->(after)
create (report_at_bottom)-[:Bug]->(after)
create (report_success)-[:Improvement]->(after)
create (see_Upon_further_inspection)-[:Improvement]->(after)
create (do_nothing_After_Scenario)-[:Improvement]->(after)
create (Failing_Scenarios)-[:Bug]->(scenario)
create (report_at_bottom)-[:Bug]->(scenario)
create (report_success)-[:Improvement]->(scenario)
create (see_Upon_further_inspection)-[:Improvement]->(scenario)
create (do_nothing_After_Scenario)-[:Improvement]->(scenario)
create (Failing_Scenarios)-[:Bug]->(scenario)
create (report_at_bottom)-[:Bug]->(scenario)
create (report_success)-[:Improvement]->(scenario)
create (see_Upon_further_inspection)-[:Improvement]->(scenario)
create (do_nothing_After_Scenario)-[:Improvement]->(scenario)
create (browser_window:issue {name:'browser window'}) create (browser_window)-[:Bug]->(ant)
create (close_browser_frame:issue {name:'close browser frame'}) create (close_browser_frame)-[:Bug]->(ant)
create (be_For_PerStoryWebDriverSteps:issue {name:'be For PerStoryWebDriverSteps'}) create (be_For_PerStoryWebDriverSteps)-[:Improvement]->(ant)
create (close_browser_frame_on_failure:issue {name:'close browser frame on failure'}) create (close_browser_frame_on_failure)-[:Improvement]->(ant)
create (leave_a_browser_leave_a_browser_browser_window_PerStoryWebDriverSteps_and_others_option_command_option_command_line_command_line_close_the_browser_close_the_browser_browser_frame_frame_on_failure_run_single_stories_single_stories_failing_screen_having_the_actual_browser_actual_browser_:issue {name:'leave a browser - leave a browser - browser window - PerStoryWebDriverSteps and others - option command - option command line - command line - close the browser - close the browser - browser frame - frame on failure - run single stories - single stories - failing screen - having the actual browser - actual browser - '}) create (leave_a_browser_leave_a_browser_browser_window_PerStoryWebDriverSteps_and_others_option_command_option_command_line_command_line_close_the_browser_close_the_browser_browser_frame_frame_on_failure_run_single_stories_single_stories_failing_screen_having_the_actual_browser_actual_browser_)-[:Improvement]->(ant)
create (close:class {name:'close', favoritecolor: 'green'}) create (browser_window)-[:Bug]->(close)
create (close_browser_frame)-[:Bug]->(close)
create (be_For_PerStoryWebDriverSteps)-[:Improvement]->(close)
create (close_browser_frame_on_failure)-[:Improvement]->(close)
create (leave_a_browser_leave_a_browser_browser_window_PerStoryWebDriverSteps_and_others_option_command_option_command_line_command_line_close_the_browser_close_the_browser_browser_frame_frame_on_failure_run_single_stories_single_stories_failing_screen_having_the_actual_browser_actual_browser_)-[:Improvement]->(close)
create (new_case:issue {name:'new case'}) create (new_case)-[:Bug]->(after)
create (Consider_WebDriver_situations:issue {name:'Consider WebDriver situations'}) create (Consider_WebDriver_situations)-[:Bug]->(after)
create (execute_in_reverse_order:issue {name:'execute in reverse order'}) create (execute_in_reverse_order)-[:Improvement]->(after)
create (drop_reference_to_WebDriver:issue {name:'drop reference to WebDriver'}) create (drop_reference_to_WebDriver)-[:Improvement]->(after)
create (execute_in_reverse_order_reverse_order_new_PerStoriesContextView_PerStoriesWebDriverSteps_to_PerScenarioWebDriverSteps_have_a_problem_have_a_problem_drop_the_reference_drop_the_reference_making_steps_making_the_PerStoriesWebDriverSteps_making_the_PerStoriesWebDriverSteps_PerStoriesWebDriverSteps_to_PerScenarioWebDriverSteps_PerScenarioWebDriverSteps_change_:issue {name:'execute in reverse order - reverse order - new PerStoriesContextView - PerStoriesWebDriverSteps to PerScenarioWebDriverSteps - have a problem - have a problem - drop the reference - drop the reference - making steps - making the PerStoriesWebDriverSteps - making the PerStoriesWebDriverSteps - PerStoriesWebDriverSteps to PerScenarioWebDriverSteps - PerScenarioWebDriverSteps change - '}) create (execute_in_reverse_order_reverse_order_new_PerStoriesContextView_PerStoriesWebDriverSteps_to_PerScenarioWebDriverSteps_have_a_problem_have_a_problem_drop_the_reference_drop_the_reference_making_steps_making_the_PerStoriesWebDriverSteps_making_the_PerStoriesWebDriverSteps_PerStoriesWebDriverSteps_to_PerScenarioWebDriverSteps_PerScenarioWebDriverSteps_change_)-[:Improvement]->(after)
create (Context:class {name:'Context', favoritecolor: 'green'}) create (new_case)-[:Bug]->(Context)
create (Consider_WebDriver_situations)-[:Bug]->(Context)
create (execute_in_reverse_order)-[:Improvement]->(Context)
create (drop_reference_to_WebDriver)-[:Improvement]->(Context)
create (execute_in_reverse_order_reverse_order_new_PerStoriesContextView_PerStoriesWebDriverSteps_to_PerScenarioWebDriverSteps_have_a_problem_have_a_problem_drop_the_reference_drop_the_reference_making_steps_making_the_PerStoriesWebDriverSteps_making_the_PerStoriesWebDriverSteps_PerStoriesWebDriverSteps_to_PerScenarioWebDriverSteps_PerScenarioWebDriverSteps_change_)-[:Improvement]->(Context)
create (two_letters:issue {name:'two letters'}) create (two_letters)-[:Bug]->(core)
create (be_In_Turkish:issue {name:'be In Turkish'}) create (be_In_Turkish)-[:Improvement]->(core)
create (two_letters)-[:Bug]->(StoryReporterBuilder)
create (be_In_Turkish)-[:Improvement]->(StoryReporterBuilder)
create (two_letters)-[:Bug]->(StoryReporterBuilder)
create (be_In_Turkish)-[:Improvement]->(StoryReporterBuilder)
create (two_letters)-[:Bug]->(StoryReporterBuilder)
create (be_In_Turkish)-[:Improvement]->(StoryReporterBuilder)
create (LocalizedKeywords:class {name:'LocalizedKeywords', favoritecolor: 'green'}) create (two_letters)-[:Bug]->(LocalizedKeywords)
create (be_In_Turkish)-[:Improvement]->(LocalizedKeywords)
create (UnderscoredCamelCaseResolver:class {name:'UnderscoredCamelCaseResolver', favoritecolor: 'green'}) create (two_letters)-[:Bug]->(UnderscoredCamelCaseResolver)
create (be_In_Turkish)-[:Improvement]->(UnderscoredCamelCaseResolver)
create (Delayed_methods:issue {name:'Delayed methods'}) create (Delayed_methods)-[:Bug]->(org_jbehave_core)
create (run_story:issue {name:'run story'}) create (run_story)-[:Bug]->(org_jbehave_core)
create (run_story_Delayed_methods_delayed_methods_according_the_givenStory_flag_givenStory_flag_:issue {name:'run story - Delayed methods - delayed methods - according the givenStory flag - givenStory flag - '}) create (run_story_Delayed_methods_delayed_methods_according_the_givenStory_flag_givenStory_flag_)-[:Improvement]->(org_jbehave_core)
create (org_jbehave_core_reporters:package {name:'org_jbehave_core_reporters', favoritecolor: 'orange'}) create (Delayed_methods)-[:Bug]->(org_jbehave_core_reporters)
create (run_story)-[:Bug]->(org_jbehave_core_reporters)
create (run_story_Delayed_methods_delayed_methods_according_the_givenStory_flag_givenStory_flag_)-[:Improvement]->(org_jbehave_core_reporters)
create (Delayed_methods)-[:Bug]->(core)
create (run_story)-[:Bug]->(core)
create (run_story_Delayed_methods_delayed_methods_according_the_givenStory_flag_givenStory_flag_)-[:Improvement]->(core)
create (Delayed_methods)-[:Bug]->(given)
create (run_story)-[:Bug]->(given)
create (run_story_Delayed_methods_delayed_methods_according_the_givenStory_flag_givenStory_flag_)-[:Improvement]->(given)
create (Delayed_methods)-[:Bug]->(Context)
create (run_story)-[:Bug]->(Context)
create (run_story_Delayed_methods_delayed_methods_according_the_givenStory_flag_givenStory_flag_)-[:Improvement]->(Context)
create (GivenStory:class {name:'GivenStory', favoritecolor: 'green'}) create (Delayed_methods)-[:Bug]->(GivenStory)
create (run_story)-[:Bug]->(GivenStory)
create (run_story_Delayed_methods_delayed_methods_according_the_givenStory_flag_givenStory_flag_)-[:Improvement]->(GivenStory)
create (Namespace_support:issue {name:'Namespace support'}) create (Namespace_support)-[:Bug]->(core)
create (clone_of_master_branch:issue {name:'clone of master branch'}) create (clone_of_master_branch)-[:Bug]->(core)
create (Namespace_support)-[:Bug]->(configuration)
create (clone_of_master_branch)-[:Bug]->(configuration)
create (Namespace_support)-[:Bug]->(embedder)
create (clone_of_master_branch)-[:Bug]->(embedder)
create (configuration_of_Maven_Mojo:issue {name:'configuration of Maven Mojo'}) create (configuration_of_Maven_Mojo)-[:Bug]->(configuration)
create (use_String:issue {name:'use String'}) create (use_String)-[:Bug]->(configuration)
create (read_from_configuration:issue {name:'read from configuration'}) create (read_from_configuration)-[:Improvement]->(configuration)
create (use_String_in_place:issue {name:'use String in place'}) create (use_String_in_place)-[:Improvement]->(configuration)
create (filters_configuration_use_String_use_String_in_place_String_in_place_:issue {name:'filters configuration - use String - use String in place - String in place - '}) create (filters_configuration_use_String_use_String_in_place_String_in_place_)-[:Improvement]->(configuration)
create (configuration_of_Maven_Mojo)-[:Bug]->(meta)
create (use_String)-[:Bug]->(meta)
create (read_from_configuration)-[:Improvement]->(meta)
create (use_String_in_place)-[:Improvement]->(meta)
create (filters_configuration_use_String_use_String_in_place_String_in_place_)-[:Improvement]->(meta)
create (configuration_of_Maven_Mojo)-[:Bug]->(meta)
create (use_String)-[:Bug]->(meta)
create (read_from_configuration)-[:Improvement]->(meta)
create (use_String_in_place)-[:Improvement]->(meta)
create (filters_configuration_use_String_use_String_in_place_String_in_place_)-[:Improvement]->(meta)
create (CSV_files:issue {name:'CSV files'}) create (ExamplesTable:class {name:'ExamplesTable', favoritecolor: 'green'}) create (CSV_files)-[:Bug]->(ExamplesTable)
create (use_different_formats:issue {name:'use different formats'}) create (use_different_formats)-[:Bug]->(ExamplesTable)
create (use_different_formats_for_ExamplesTable:issue {name:'use different formats for ExamplesTable'}) create (use_different_formats_for_ExamplesTable)-[:Improvement]->(ExamplesTable)
create (use_different_formats_different_formats_way_examples_providing_different_factories_different_factories_:issue {name:'use different formats - different formats - way examples - providing different factories - different factories - '}) create (use_different_formats_different_formats_way_examples_providing_different_factories_different_factories_)-[:Improvement]->(ExamplesTable)
create (common_use_case:issue {name:'common use case'}) create (common_use_case)-[:Bug]->(ant)
create (report_stepdocs:issue {name:'report stepdocs'}) create (report_stepdocs)-[:Bug]->(ant)
create (report_stepdocs_as_embeddables:issue {name:'report stepdocs as embeddables'}) create (report_stepdocs_as_embeddables)-[:Improvement]->(ant)
create (report_stepdocs_report_stepdocs_as_embeddables_stepdocs_as_embeddables_report_stepdocs_common_use_common_use_case_use_case_report_the_stepdocs_report_the_stepdocs_candidate_steps_given_Embeddable_instances_Embeddable_instances_JUnitStory_or_JUnitStories_:issue {name:'report stepdocs - report stepdocs as embeddables - stepdocs as embeddables - report stepdocs - common use - common use case - use case - report the stepdocs - report the stepdocs - candidate steps - given Embeddable instances - Embeddable instances - JUnitStory or JUnitStories - '}) create (report_stepdocs_report_stepdocs_as_embeddables_stepdocs_as_embeddables_report_stepdocs_common_use_common_use_case_use_case_report_the_stepdocs_report_the_stepdocs_candidate_steps_given_Embeddable_instances_Embeddable_instances_JUnitStory_or_JUnitStories_)-[:Improvement]->(ant)
create (common_use_case)-[:Bug]->(given)
create (report_stepdocs)-[:Bug]->(given)
create (report_stepdocs_as_embeddables)-[:Improvement]->(given)
create (report_stepdocs_report_stepdocs_as_embeddables_stepdocs_as_embeddables_report_stepdocs_common_use_common_use_case_use_case_report_the_stepdocs_report_the_stepdocs_candidate_steps_given_Embeddable_instances_Embeddable_instances_JUnitStory_or_JUnitStories_)-[:Improvement]->(given)
create (JUnitStories:class {name:'JUnitStories', favoritecolor: 'green'}) create (common_use_case)-[:Bug]->(JUnitStories)
create (report_stepdocs)-[:Bug]->(JUnitStories)
create (report_stepdocs_as_embeddables)-[:Improvement]->(JUnitStories)
create (report_stepdocs_report_stepdocs_as_embeddables_stepdocs_as_embeddables_report_stepdocs_common_use_common_use_case_use_case_report_the_stepdocs_report_the_stepdocs_candidate_steps_given_Embeddable_instances_Embeddable_instances_JUnitStory_or_JUnitStories_)-[:Improvement]->(JUnitStories)
create (JUnitStory:class {name:'JUnitStory', favoritecolor: 'green'}) create (common_use_case)-[:Bug]->(JUnitStory)
create (report_stepdocs)-[:Bug]->(JUnitStory)
create (report_stepdocs_as_embeddables)-[:Improvement]->(JUnitStory)
create (report_stepdocs_report_stepdocs_as_embeddables_stepdocs_as_embeddables_report_stepdocs_common_use_common_use_case_use_case_report_the_stepdocs_report_the_stepdocs_candidate_steps_given_Embeddable_instances_Embeddable_instances_JUnitStory_or_JUnitStories_)-[:Improvement]->(JUnitStory)
create (sourceDirectory_property:issue {name:'sourceDirectory property'}) create (sourceDirectory_property)-[:Bug]->(maven)
create (sourceDirectory_property_of_maven_plugin:issue {name:'sourceDirectory property of maven plugin'}) create (sourceDirectory_property_of_maven_plugin)-[:Bug]->(maven)
create (Modifying_sourceDirectory_properties:issue {name:'Modifying sourceDirectory properties'}) create (Modifying_sourceDirectory_properties)-[:Improvement]->(maven)
create (occurs_under_Maven:issue {name:'occurs under Maven'}) create (occurs_under_Maven)-[:Improvement]->(maven)
create (support_Maven_as_project_type:issue {name:'support Maven as project type'}) create (support_Maven_as_project_type)-[:Improvement]->(maven)
create (sourceDirectory_property_testSourceDirectory_properties_goal_jbehaverun_project_type_:issue {name:'sourceDirectory property - testSourceDirectory properties - goal jbehaverun - project type - '}) create (sourceDirectory_property_testSourceDirectory_properties_goal_jbehaverun_project_type_)-[:Bug]->(maven)
create (story_HTML:issue {name:'story HTML'}) create (story_HTML)-[:Bug]->(core)
create (Screenshots_for_failing_scenarios:issue {name:'Screenshots for failing scenarios'}) create (Screenshots_for_failing_scenarios)-[:Bug]->(core)
create (Apply_attached_patch:issue {name:'Apply attached patch'}) create (Apply_attached_patch)-[:Improvement]->(core)
create (Apply_attached_patch_to_Etsy:issue {name:'Apply attached patch to Etsy'}) create (Apply_attached_patch_to_Etsy)-[:Improvement]->(core)
create (failing_scenarios_story_HTML_story_HTML_output_HTML_output_HTML_output_hyperlink_output_hyperlink_issue_in_core_core_around_exceptions_Apply_the_attached_patch_attached_patch_Run_regular_build_regular_build_mvn_clean_install_clean_install_reports_page_failing_story_Click_the_screenshot_icon_screenshot_icon_check_the_screenshots_check_the_screenshots_failed_story_:issue {name:'failing scenarios - story HTML - story HTML output - HTML output - HTML output hyperlink - output hyperlink - issue in core - core around exceptions - Apply the attached patch - attached patch - Run regular build - regular build - mvn clean install - clean install - reports page - failing story - Click the screenshot icon - screenshot icon - check the screenshots - check the screenshots - failed story - '}) create (failing_scenarios_story_HTML_story_HTML_output_HTML_output_HTML_output_hyperlink_output_hyperlink_issue_in_core_core_around_exceptions_Apply_the_attached_patch_attached_patch_Run_regular_build_regular_build_mvn_clean_install_clean_install_reports_page_failing_story_Click_the_screenshot_icon_screenshot_icon_check_the_screenshots_check_the_screenshots_failed_story_)-[:Improvement]->(core)
create (story_HTML)-[:Bug]->(failed)
create (Screenshots_for_failing_scenarios)-[:Bug]->(failed)
create (Apply_attached_patch)-[:Improvement]->(failed)
create (Apply_attached_patch_to_Etsy)-[:Improvement]->(failed)
create (failing_scenarios_story_HTML_story_HTML_output_HTML_output_HTML_output_hyperlink_output_hyperlink_issue_in_core_core_around_exceptions_Apply_the_attached_patch_attached_patch_Run_regular_build_regular_build_mvn_clean_install_clean_install_reports_page_failing_story_Click_the_screenshot_icon_screenshot_icon_check_the_screenshots_check_the_screenshots_failed_story_)-[:Improvement]->(failed)
create (story_HTML)-[:Bug]->(scenario)
create (Screenshots_for_failing_scenarios)-[:Bug]->(scenario)
create (Apply_attached_patch)-[:Improvement]->(scenario)
create (Apply_attached_patch_to_Etsy)-[:Improvement]->(scenario)
create (failing_scenarios_story_HTML_story_HTML_output_HTML_output_HTML_output_hyperlink_output_hyperlink_issue_in_core_core_around_exceptions_Apply_the_attached_patch_attached_patch_Run_regular_build_regular_build_mvn_clean_install_clean_install_reports_page_failing_story_Click_the_screenshot_icon_screenshot_icon_check_the_screenshots_check_the_screenshots_failed_story_)-[:Improvement]->(scenario)
create (story_HTML)-[:Bug]->(scenario)
create (Screenshots_for_failing_scenarios)-[:Bug]->(scenario)
create (Apply_attached_patch)-[:Improvement]->(scenario)
create (Apply_attached_patch_to_Etsy)-[:Improvement]->(scenario)
create (failing_scenarios_story_HTML_story_HTML_output_HTML_output_HTML_output_hyperlink_output_hyperlink_issue_in_core_core_around_exceptions_Apply_the_attached_patch_attached_patch_Run_regular_build_regular_build_mvn_clean_install_clean_install_reports_page_failing_story_Click_the_screenshot_icon_screenshot_icon_check_the_screenshots_check_the_screenshots_failed_story_)-[:Improvement]->(scenario)
create (Dependency_Injection:issue {name:'Dependency Injection'}) create (Dependency_Injection)-[:Bug]->(Context)
create (Support_for_WeldContext_framework:issue {name:'Support for WeldContext framework'}) create (Support_for_WeldContext_framework)-[:Bug]->(Context)
create (using_Weld_reference_implementation:issue {name:'using Weld reference implementation'}) create (using_Weld_reference_implementation)-[:Improvement]->(Context)
create (Provide_support_reference_implementation_:issue {name:'Provide support - reference implementation - '}) create (Provide_support_reference_implementation_)-[:Improvement]->(Context)
create (extension_of_Embedder:issue {name:'extension of Embedder'}) create (candidateSteps:class {name:'candidateSteps', favoritecolor: 'green'}) create (extension_of_Embedder)-[:Bug]->(candidateSteps)
create (allow_override:issue {name:'allow override'}) create (allow_override)-[:Bug]->(candidateSteps)
create (allow_override_of_Embedder_methods:issue {name:'allow override of Embedder methods'}) create (allow_override_of_Embedder_methods)-[:Improvement]->(candidateSteps)
create (allow_the_override_allow_the_override_configuration_and_candidateSteps_forces_the_use_forces_the_use_modifier_methods_:issue {name:'allow the override - allow the override - configuration and candidateSteps - forces the use - forces the use - modifier methods - '}) create (allow_the_override_allow_the_override_configuration_and_candidateSteps_forces_the_use_forces_the_use_modifier_methods_)-[:Improvement]->(candidateSteps)
create (extension_of_Embedder)-[:Bug]->(configuration)
create (allow_override)-[:Bug]->(configuration)
create (allow_override_of_Embedder_methods)-[:Improvement]->(configuration)
create (allow_the_override_allow_the_override_configuration_and_candidateSteps_forces_the_use_forces_the_use_modifier_methods_)-[:Improvement]->(configuration)
create (useConfiguration:class {name:'useConfiguration', favoritecolor: 'green'}) create (extension_of_Embedder)-[:Bug]->(useConfiguration)
create (allow_override)-[:Bug]->(useConfiguration)
create (allow_override_of_Embedder_methods)-[:Improvement]->(useConfiguration)
create (allow_the_override_allow_the_override_configuration_and_candidateSteps_forces_the_use_forces_the_use_modifier_methods_)-[:Improvement]->(useConfiguration)
create (Navigator_view:issue {name:'Navigator view'}) create (Navigator_view)-[:Bug]->(scenario)
create (comment_fix_override:issue {name:'comment fix override'}) create (comment_fix_override)-[:Bug]->(scenario)
create (is_For_strange_reason:issue {name:'is For strange reason'}) create (is_For_strange_reason)-[:Improvement]->(scenario)
create (comment_fix_override_of_run:issue {name:'comment fix override of run'}) create (comment_fix_override_of_run)-[:Improvement]->(scenario)
create (Navigator_view_scenario_step_strange_reason_fix_override_override_of_run_running_the_suite_running_the_suite_:issue {name:'Navigator view - scenario step - strange reason - fix override - override of run - running the suite - running the suite - '}) create (Navigator_view_scenario_step_strange_reason_fix_override_override_of_run_running_the_suite_running_the_suite_)-[:Improvement]->(scenario)
create (Navigator_view)-[:Bug]->(scenario)
create (comment_fix_override)-[:Bug]->(scenario)
create (is_For_strange_reason)-[:Improvement]->(scenario)
create (comment_fix_override_of_run)-[:Improvement]->(scenario)
create (Navigator_view_scenario_step_strange_reason_fix_override_override_of_run_running_the_suite_running_the_suite_)-[:Improvement]->(scenario)
create (goal_name:issue {name:'goal name'}) create (goal_name)-[:Bug]->(embedder)
create (run_with_annotated_embedder:issue {name:'run with annotated embedder'}) create (run_with_annotated_embedder)-[:Bug]->(embedder)
create (keep_previous_goal_name:issue {name:'keep previous goal name'}) create (keep_previous_goal_name)-[:Improvement]->(embedder)
create (keep_previous_goal_name_For_backward_compat:issue {name:'keep previous goal name For backward compat'}) create (keep_previous_goal_name_For_backward_compat)-[:Improvement]->(embedder)
create (Rename_run_embedder_goal_goal_to_run_goal_name_other_goal_other_goal_names_goal_names_backward_compat_keep_the_previous_goal_previous_goal_previous_goal_name_goal_name_:issue {name:'Rename run - embedder goal - goal to run - goal name - other goal - other goal names - goal names - backward compat - keep the previous goal - previous goal - previous goal name - goal name - '}) create (Rename_run_embedder_goal_goal_to_run_goal_name_other_goal_other_goal_names_goal_names_backward_compat_keep_the_previous_goal_previous_goal_previous_goal_name_goal_name_)-[:Improvement]->(embedder)
create (organise_stories:issue {name:'organise stories'}) create (organise_stories)-[:Bug]->(given)
create (given_stories_organise_the_stories_organise_the_stories_changing_the_paths_changing_the_paths_:issue {name:'given stories - organise the stories - organise the stories - changing the paths - changing the paths - '}) create (given_stories_organise_the_stories_organise_the_stories_changing_the_paths_changing_the_paths_)-[:Bug]->(given)
create (organise_stories)-[:Bug]->(pending)
create (given_stories_organise_the_stories_organise_the_stories_changing_the_paths_changing_the_paths_)-[:Bug]->(pending)
create (organise_stories)-[:Bug]->(pending)
create (given_stories_organise_the_stories_organise_the_stories_changing_the_paths_changing_the_paths_)-[:Bug]->(pending)
create (organise_stories)-[:Bug]->(GivenStories)
create (given_stories_organise_the_stories_organise_the_stories_changing_the_paths_changing_the_paths_)-[:Bug]->(GivenStories)
create (Table_properties:issue {name:'Table properties'}) create (Table_properties)-[:Bug]->(keywords)
create (value_in_table_properties:issue {name:'value in table properties'}) create (value_in_table_properties)-[:Bug]->(keywords)
create (override_keywords:issue {name:'override keywords'}) create (override_keywords)-[:Improvement]->(keywords)
create (do_with_trim_option:issue {name:'do with trim option'}) create (do_with_trim_option)-[:Improvement]->(keywords)
create (specify_headervalue_separators_for_story:issue {name:'specify headervalue separators for story'}) create (specify_headervalue_separators_for_story)-[:Improvement]->(keywords)
create (Table_properties_override_keywords_specify_table_specify_table_header_table_header_header_and_value_header_and_value_separators_value_separators_table_properties_specify_the_headervalue_separators_headervalue_separators_use_these_values_use_these_values_specify_a_different_separator_different_separator_single_scenario_trim_option_following_email_following_email_thread_email_thread_triggered_this_feature_triggered_this_feature_feature_request_:issue {name:'Table properties - override keywords - specify table - specify table header - table header - header and value - header and value separators - value separators - table properties - specify the headervalue separators - headervalue separators - use these values - use these values - specify a different separator - different separator - single scenario - trim option - following email - following email thread - email thread - triggered this feature - triggered this feature - feature request - '}) create (Table_properties_override_keywords_specify_table_specify_table_header_table_header_header_and_value_header_and_value_separators_value_separators_table_properties_specify_the_headervalue_separators_headervalue_separators_use_these_values_use_these_values_specify_a_different_separator_different_separator_single_scenario_trim_option_following_email_following_email_thread_email_thread_triggered_this_feature_triggered_this_feature_feature_request_)-[:Bug]->(keywords)
create (Table_properties)-[:Bug]->(scenario)
create (value_in_table_properties)-[:Bug]->(scenario)
create (override_keywords)-[:Improvement]->(scenario)
create (do_with_trim_option)-[:Improvement]->(scenario)
create (specify_headervalue_separators_for_story)-[:Improvement]->(scenario)
create (Table_properties_override_keywords_specify_table_specify_table_header_table_header_header_and_value_header_and_value_separators_value_separators_table_properties_specify_the_headervalue_separators_headervalue_separators_use_these_values_use_these_values_specify_a_different_separator_different_separator_single_scenario_trim_option_following_email_following_email_thread_email_thread_triggered_this_feature_triggered_this_feature_feature_request_)-[:Bug]->(scenario)
create (Table_properties)-[:Bug]->(scenario)
create (value_in_table_properties)-[:Bug]->(scenario)
create (override_keywords)-[:Improvement]->(scenario)
create (do_with_trim_option)-[:Improvement]->(scenario)
create (specify_headervalue_separators_for_story)-[:Improvement]->(scenario)
create (Table_properties_override_keywords_specify_table_specify_table_header_table_header_header_and_value_header_and_value_separators_value_separators_table_properties_specify_the_headervalue_separators_headervalue_separators_use_these_values_use_these_values_specify_a_different_separator_different_separator_single_scenario_trim_option_following_email_following_email_thread_email_thread_triggered_this_feature_triggered_this_feature_feature_request_)-[:Bug]->(scenario)
create (Table_properties)-[:Bug]->(keywords)
create (value_in_table_properties)-[:Bug]->(keywords)
create (override_keywords)-[:Improvement]->(keywords)
create (do_with_trim_option)-[:Improvement]->(keywords)
create (specify_headervalue_separators_for_story)-[:Improvement]->(keywords)
create (Table_properties_override_keywords_specify_table_specify_table_header_table_header_header_and_value_header_and_value_separators_value_separators_table_properties_specify_the_headervalue_separators_headervalue_separators_use_these_values_use_these_values_specify_a_different_separator_different_separator_single_scenario_trim_option_following_email_following_email_thread_email_thread_triggered_this_feature_triggered_this_feature_feature_request_)-[:Bug]->(keywords)
create (Parametrised_scenarios:issue {name:'Parametrised scenarios'}) create (Parametrised_scenarios)-[:Bug]->(ant)
create (use_same_mechanism:issue {name:'use same mechanism'}) create (use_same_mechanism)-[:Bug]->(ant)
create (work_as_kind:issue {name:'work as kind'}) create (work_as_kind)-[:Improvement]->(ant)
create (using_special_construct_for_parametrised_scenarios:issue {name:'using special construct for parametrised scenarios'}) create (using_special_construct_for_parametrised_scenarios)-[:Improvement]->(ant)
create (Parametrised_scenarios)-[:Bug]->(scenario)
create (use_same_mechanism)-[:Bug]->(scenario)
create (work_as_kind)-[:Improvement]->(scenario)
create (using_special_construct_for_parametrised_scenarios)-[:Improvement]->(scenario)
create (Parametrised_scenarios)-[:Bug]->(scenario)
create (use_same_mechanism)-[:Bug]->(scenario)
create (work_as_kind)-[:Improvement]->(scenario)
create (using_special_construct_for_parametrised_scenarios)-[:Improvement]->(scenario)
create (Firefox_window:issue {name:'Firefox window'}) create (Firefox_window)-[:Bug]->(core)
create (occurs_Steps:issue {name:'occurs Steps'}) create (occurs_Steps)-[:Bug]->(core)
create (closing_by_default:issue {name:'closing by default'}) create (closing_by_default)-[:Improvement]->(core)
create (Story_pass:issue {name:'Story pass'}) create (spring:class {name:'spring', favoritecolor: 'green'}) create (Story_pass)-[:Bug]->(spring)
create (test_in_eclipse:issue {name:'test in eclipse'}) create (test_in_eclipse)-[:Bug]->(spring)
create (integrate_Jbehave:issue {name:'integrate Jbehave'}) create (integrate_Jbehave)-[:Improvement]->(spring)
create (try_with_maven_fail:issue {name:'try with maven fail'}) create (try_with_maven_fail)-[:Improvement]->(spring)
create (have_lot_of_troubles:issue {name:'have lot of troubles'}) create (have_lot_of_troubles)-[:Improvement]->(spring)
create (have_a_lot_have_a_lot_lot_of_troubles_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_:issue {name:'have a lot - have a lot - lot of troubles - attach a sample - attach a sample - test in eclipse - classloader problem - document from class - class path - FileNotFoundException class - FileNotFoundException class path - class path - class path resource - path resource - pass ALL dependencies - pass ALL dependencies - is a solution - is a solution - '}) create (have_a_lot_have_a_lot_lot_of_troubles_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(spring)
create (Story_pass)-[:Bug]->(ant)
create (test_in_eclipse)-[:Bug]->(ant)
create (integrate_Jbehave)-[:Improvement]->(ant)
create (try_with_maven_fail)-[:Improvement]->(ant)
create (have_lot_of_troubles)-[:Improvement]->(ant)
create (have_a_lot_have_a_lot_lot_of_troubles_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(ant)
create (Story_pass)-[:Bug]->(maven)
create (test_in_eclipse)-[:Bug]->(maven)
create (integrate_Jbehave)-[:Improvement]->(maven)
create (try_with_maven_fail)-[:Improvement]->(maven)
create (have_lot_of_troubles)-[:Improvement]->(maven)
create (have_a_lot_have_a_lot_lot_of_troubles_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(maven)
create (Story_pass)-[:Bug]->(Context)
create (test_in_eclipse)-[:Bug]->(Context)
create (integrate_Jbehave)-[:Improvement]->(Context)
create (try_with_maven_fail)-[:Improvement]->(Context)
create (have_lot_of_troubles)-[:Improvement]->(Context)
create (have_a_lot_have_a_lot_lot_of_troubles_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(Context)
create (few_seconds:issue {name:'few seconds'}) create (few_seconds)-[:Bug]->(meta)
create (need_way:issue {name:'need way'}) create (need_way)-[:Bug]->(meta)
create (opening_browsers_in_Saucelabs:issue {name:'opening browsers in Saucelabs'}) create (opening_browsers_in_Saucelabs)-[:Improvement]->(meta)
create (need_a_way_need_a_way_opening_browsers_few_seconds_:issue {name:'need a way - need a way - opening browsers - few seconds - '}) create (need_a_way_need_a_way_opening_browsers_few_seconds_)-[:Improvement]->(meta)
create (few_seconds)-[:Bug]->(meta)
create (need_way)-[:Bug]->(meta)
create (opening_browsers_in_Saucelabs)-[:Improvement]->(meta)
create (need_a_way_need_a_way_opening_browsers_few_seconds_)-[:Improvement]->(meta)
create (Meta_properties:issue {name:'Meta properties'}) create (Meta_properties)-[:Bug]->(ant)
create (parameters_with_variant:issue {name:'parameters with variant'}) create (parameters_with_variant)-[:Bug]->(ant)
create (Meta_properties)-[:Bug]->(given)
create (parameters_with_variant)-[:Bug]->(given)
create (Meta_properties)-[:Bug]->(meta)
create (parameters_with_variant)-[:Bug]->(meta)
create (Meta_properties)-[:Bug]->(meta)
create (parameters_with_variant)-[:Bug]->(meta)
create (Meta_properties)-[:Bug]->(scenario)
create (parameters_with_variant)-[:Bug]->(scenario)
create (Meta_properties)-[:Bug]->(scenario)
create (parameters_with_variant)-[:Bug]->(scenario)
create (run_stories:issue {name:'run stories'}) create (run_stories)-[:Bug]->(maven)
create (run_stories_with_embedder_runner:issue {name:'run stories with embedder runner'}) create (run_stories_with_embedder_runner)-[:Bug]->(maven)
create (exist_In_documentation:issue {name:'exist In documentation'}) create (exist_In_documentation)-[:Improvement]->(maven)
create (run_stories)-[:Bug]->(embedder)
create (run_stories_with_embedder_runner)-[:Bug]->(embedder)
create (exist_In_documentation)-[:Improvement]->(embedder)
create (load_resources:issue {name:'load resources'}) create (load_resources)-[:Bug]->(LoadFromClasspath)
create (load_resources_from_classpath:issue {name:'load resources from classpath'}) create (load_resources_from_classpath)-[:Bug]->(LoadFromClasspath)
create (load_resources_load_resources_from_classpath_resources_from_classpath_classpath_by_default_URL_resources_have_LoadFromClasspath_:issue {name:'load resources - load resources from classpath - resources from classpath - classpath by default - URL resources - have LoadFromClasspath - '}) create (load_resources_load_resources_from_classpath_resources_from_classpath_classpath_by_default_URL_resources_have_LoadFromClasspath_)-[:Improvement]->(LoadFromClasspath)
create (load_resources)-[:Bug]->(ExamplesTable)
create (load_resources_from_classpath)-[:Bug]->(ExamplesTable)
create (load_resources_load_resources_from_classpath_resources_from_classpath_classpath_by_default_URL_resources_have_LoadFromClasspath_)-[:Improvement]->(ExamplesTable)
create (cause_NPE:issue {name:'cause NPE'}) create (cause_NPE)-[:Improvement]->(after)
create (null_entries:issue {name:'null entries'}) create (null_entries)-[:Bug]->(meta)
create (specifying_meta_filters:issue {name:'specifying meta filters'}) create (specifying_meta_filters)-[:Bug]->(meta)
create (specifying_meta_filters_via_Maven_plugin:issue {name:'specifying meta filters via Maven plugin'}) create (specifying_meta_filters_via_Maven_plugin)-[:Improvement]->(meta)
create (Null_meta_filters_meta_filters_specifying_the_meta_filters_meta_filters_null_entries_:issue {name:'Null meta filters - meta filters - specifying the meta filters - meta filters - null entries - '}) create (Null_meta_filters_meta_filters_specifying_the_meta_filters_meta_filters_null_entries_)-[:Improvement]->(meta)
create (null_entries)-[:Bug]->(meta)
create (specifying_meta_filters)-[:Bug]->(meta)
create (specifying_meta_filters_via_Maven_plugin)-[:Improvement]->(meta)
create (Null_meta_filters_meta_filters_specifying_the_meta_filters_meta_filters_null_entries_)-[:Improvement]->(meta)
create (Failing_steps:issue {name:'Failing steps'}) create (Failing_steps)-[:Bug]->(core)
create (Object_Identity_of_StepResult:issue {name:'Object Identity of StepResult'}) create (Object_Identity_of_StepResult)-[:Bug]->(core)
create (affects_core:issue {name:'affects core'}) create (affects_core)-[:Improvement]->(core)
create (link_in_rendering:issue {name:'link in rendering'}) create (link_in_rendering)-[:Improvement]->(core)
create (use_failure_context_in_name:issue {name:'use failure context in name'}) create (use_failure_context_in_name)-[:Improvement]->(core)
create (Failing_steps_assigned_a_unique_failure_unique_failure_name_screenshots_Say_an_element_Say_an_element_throws_whatever_exception_throws_whatever_exception_fails_a_step_fails_a_step_set_a_failure_set_a_failure_context_lets_use_the_failure_use_the_failure_shot_jpeg_Failed_instance_:issue {name:'Failing steps - assigned a unique failure - unique failure - name screenshots - Say an element - Say an element - throws whatever exception - throws whatever exception - fails a step - fails a step - set a failure - set a failure - context lets - use the failure - use the failure - shot jpeg - Failed instance - '}) create (Failing_steps_assigned_a_unique_failure_unique_failure_name_screenshots_Say_an_element_Say_an_element_throws_whatever_exception_throws_whatever_exception_fails_a_step_fails_a_step_set_a_failure_set_a_failure_context_lets_use_the_failure_use_the_failure_shot_jpeg_Failed_instance_)-[:Bug]->(core)
create (Failing_steps)-[:Bug]->(failed)
create (Object_Identity_of_StepResult)-[:Bug]->(failed)
create (affects_core)-[:Improvement]->(failed)
create (link_in_rendering)-[:Improvement]->(failed)
create (use_failure_context_in_name)-[:Improvement]->(failed)
create (Failing_steps_assigned_a_unique_failure_unique_failure_name_screenshots_Say_an_element_Say_an_element_throws_whatever_exception_throws_whatever_exception_fails_a_step_fails_a_step_set_a_failure_set_a_failure_context_lets_use_the_failure_use_the_failure_shot_jpeg_Failed_instance_)-[:Bug]->(failed)
create (Maven_JBehave:issue {name:'Maven JBehave'}) create (Maven_JBehave)-[:Bug]->(hudson)
create (case_for_plugin_configurations:issue {name:'case for plugin configurations'}) create (case_for_plugin_configurations)-[:Bug]->(hudson)
create (testing_web_site:issue {name:'testing web site'}) create (testing_web_site)-[:Improvement]->(hudson)
create (testing_web_site_with_Jbehave_web:issue {name:'testing web site with Jbehave web'}) create (testing_web_site_with_Jbehave_web)-[:Improvement]->(hudson)
create (Maven_JBehave)-[:Bug]->(maven)
create (case_for_plugin_configurations)-[:Bug]->(maven)
create (testing_web_site)-[:Improvement]->(maven)
create (testing_web_site_with_Jbehave_web)-[:Improvement]->(maven)
create (Maven_JBehave)-[:Bug]->(configuration)
create (case_for_plugin_configurations)-[:Bug]->(configuration)
create (testing_web_site)-[:Improvement]->(configuration)
create (testing_web_site_with_Jbehave_web)-[:Improvement]->(configuration)
create (Maven_JBehave)-[:Bug]->(given)
create (case_for_plugin_configurations)-[:Bug]->(given)
create (testing_web_site)-[:Improvement]->(given)
create (testing_web_site_with_Jbehave_web)-[:Improvement]->(given)
create (Maven_JBehave)-[:Bug]->(JUnitStories)
create (case_for_plugin_configurations)-[:Bug]->(JUnitStories)
create (testing_web_site)-[:Improvement]->(JUnitStories)
create (testing_web_site_with_Jbehave_web)-[:Improvement]->(JUnitStories)
create (useful_way:issue {name:'useful way'}) create (useful_way)-[:Bug]->(maven)
create (boostrap_creation:issue {name:'boostrap creation'}) create (boostrap_creation)-[:Bug]->(maven)
create (boostrap_creation_of_projects:issue {name:'boostrap creation of projects'}) create (boostrap_creation_of_projects)-[:Improvement]->(maven)
create (execution_capability:issue {name:'execution capability'}) create (execution_capability)-[:Bug]->(scenario)
create (controls_number:issue {name:'controls number'}) create (controls_number)-[:Bug]->(scenario)
create (run_in_single_thread:issue {name:'run in single thread'}) create (run_in_single_thread)-[:Improvement]->(scenario)
create (controls_number_of_threads:issue {name:'controls number of threads'}) create (controls_number_of_threads)-[:Improvement]->(scenario)
create (execution_capability)-[:Bug]->(scenario)
create (controls_number)-[:Bug]->(scenario)
create (run_in_single_thread)-[:Improvement]->(scenario)
create (controls_number_of_threads)-[:Improvement]->(scenario)
create (Story_pass)-[:Bug]->(spring)
create (test_in_eclipse)-[:Bug]->(spring)
create (integrate_Jbehave)-[:Improvement]->(spring)
create (try_with_maven_fail)-[:Improvement]->(spring)
create (have_lot_of_trouble:issue {name:'have lot of trouble'}) create (have_lot_of_trouble)-[:Improvement]->(spring)
create (have_a_lot_have_a_lot_lot_of_trouble_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_:issue {name:'have a lot - have a lot - lot of trouble - attach a sample - attach a sample - test in eclipse - classloader problem - document from class - class path - FileNotFoundException class - FileNotFoundException class path - class path - class path resource - path resource - pass ALL dependencies - pass ALL dependencies - is a solution - is a solution - '}) create (have_a_lot_have_a_lot_lot_of_trouble_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(spring)
create (Story_pass)-[:Bug]->(ant)
create (test_in_eclipse)-[:Bug]->(ant)
create (integrate_Jbehave)-[:Improvement]->(ant)
create (try_with_maven_fail)-[:Improvement]->(ant)
create (have_lot_of_trouble)-[:Improvement]->(ant)
create (have_a_lot_have_a_lot_lot_of_trouble_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(ant)
create (Story_pass)-[:Bug]->(maven)
create (test_in_eclipse)-[:Bug]->(maven)
create (integrate_Jbehave)-[:Improvement]->(maven)
create (try_with_maven_fail)-[:Improvement]->(maven)
create (have_lot_of_trouble)-[:Improvement]->(maven)
create (have_a_lot_have_a_lot_lot_of_trouble_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(maven)
create (Story_pass)-[:Bug]->(Context)
create (test_in_eclipse)-[:Bug]->(Context)
create (integrate_Jbehave)-[:Improvement]->(Context)
create (try_with_maven_fail)-[:Improvement]->(Context)
create (have_lot_of_trouble)-[:Improvement]->(Context)
create (have_a_lot_have_a_lot_lot_of_trouble_attach_a_sample_attach_a_sample_test_in_eclipse_classloader_problem_document_from_class_class_path_FileNotFoundException_class_FileNotFoundException_class_path_class_path_class_path_resource_path_resource_pass_ALL_dependencies_pass_ALL_dependencies_is_a_solution_is_a_solution_)-[:Bug]->(Context)
create (file_homederekworkspacesmsManagerGittarget:issue {name:'file homederekworkspacesmsManagerGittarget'}) create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(org_jbehave_core)
create (set_output_directory:issue {name:'set output directory'}) create (set_output_directory)-[:Improvement]->(org_jbehave_core)
create (working_in_maven_environment:issue {name:'working in maven environment'}) create (working_in_maven_environment)-[:Improvement]->(org_jbehave_core)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_:issue {name:'set the output - set the output - output directory - directory for reports - public static class - static class - create print - create print stream - print stream - stream for file - such file - file or directory - withRelativeDirectory method - '}) create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(org_jbehave_core)
create (org_jbehave_core_configuration:package {name:'org_jbehave_core_configuration', favoritecolor: 'orange'}) create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(org_jbehave_core_configuration)
create (set_output_directory)-[:Improvement]->(org_jbehave_core_configuration)
create (working_in_maven_environment)-[:Improvement]->(org_jbehave_core_configuration)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(org_jbehave_core_configuration)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(org_jbehave_core_embedder)
create (set_output_directory)-[:Improvement]->(org_jbehave_core_embedder)
create (working_in_maven_environment)-[:Improvement]->(org_jbehave_core_embedder)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(org_jbehave_core_embedder)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(org_jbehave_core_reporters)
create (set_output_directory)-[:Improvement]->(org_jbehave_core_reporters)
create (working_in_maven_environment)-[:Improvement]->(org_jbehave_core_reporters)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(org_jbehave_core_reporters)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(core)
create (set_output_directory)-[:Improvement]->(core)
create (working_in_maven_environment)-[:Improvement]->(core)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(core)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(maven)
create (set_output_directory)-[:Improvement]->(maven)
create (working_in_maven_environment)-[:Improvement]->(maven)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(maven)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(configuration)
create (set_output_directory)-[:Improvement]->(configuration)
create (working_in_maven_environment)-[:Improvement]->(configuration)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(configuration)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(embedder)
create (set_output_directory)-[:Improvement]->(embedder)
create (working_in_maven_environment)-[:Improvement]->(embedder)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(embedder)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(StoryReporterBuilder)
create (set_output_directory)-[:Improvement]->(StoryReporterBuilder)
create (working_in_maven_environment)-[:Improvement]->(StoryReporterBuilder)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(StoryReporterBuilder)
create (storyReporter:class {name:'storyReporter', favoritecolor: 'green'}) create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(storyReporter)
create (set_output_directory)-[:Improvement]->(storyReporter)
create (working_in_maven_environment)-[:Improvement]->(storyReporter)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(storyReporter)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(print)
create (set_output_directory)-[:Improvement]->(print)
create (working_in_maven_environment)-[:Improvement]->(print)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(print)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(StoryReporterBuilder)
create (set_output_directory)-[:Improvement]->(StoryReporterBuilder)
create (working_in_maven_environment)-[:Improvement]->(StoryReporterBuilder)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(StoryReporterBuilder)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(StoryReporterBuilder)
create (set_output_directory)-[:Improvement]->(StoryReporterBuilder)
create (working_in_maven_environment)-[:Improvement]->(StoryReporterBuilder)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(StoryReporterBuilder)
create (file_homederekworkspacesmsManagerGittarget)-[:Bug]->(storyReporter)
create (set_output_directory)-[:Improvement]->(storyReporter)
create (working_in_maven_environment)-[:Improvement]->(storyReporter)
create (set_the_output_set_the_output_output_directory_directory_for_reports_public_static_class_static_class_create_print_create_print_stream_print_stream_stream_for_file_such_file_file_or_directory_withRelativeDirectory_method_)-[:Bug]->(storyReporter)
create (XML_Scenario:issue {name:'XML Scenario'}) create (XML_Scenario)-[:Bug]->(given)
create (include_story_xml_tag:issue {name:'include story xml tag'}) create (include_story_xml_tag)-[:Bug]->(given)
create (include_a_closing_include_a_closing_closing_story_closing_story_xml_story_xml_story_xml_tag_xml_tag_running_the_trader_running_the_trader_trader_example_generates_an_invalid_XML_invalid_XML_invalid_XML_file_XML_file_including_a_final_closing_final_closing_generated_invalid_XML_invalid_XML_invalid_XML_file_XML_file_:issue {name:'include a closing - include a closing - closing story - closing story xml - story xml - story xml tag - xml tag - running the trader - running the trader - trader example - generates an invalid XML - invalid XML - invalid XML file - XML file - including a final closing - final closing - generated invalid XML - invalid XML - invalid XML file - XML file - '}) create (include_a_closing_include_a_closing_closing_story_closing_story_xml_story_xml_story_xml_tag_xml_tag_running_the_trader_running_the_trader_trader_example_generates_an_invalid_XML_invalid_XML_invalid_XML_file_XML_file_including_a_final_closing_final_closing_generated_invalid_XML_invalid_XML_invalid_XML_file_XML_file_)-[:Improvement]->(given)
create (nested_example:issue {name:'nested example'}) create (nested_example)-[:Bug]->(ant)
create (Scenario_with_example_table:issue {name:'Scenario with example table'}) create (Scenario_with_example_table)-[:Bug]->(ant)
create (have_UI_functionality:issue {name:'have UI functionality'}) create (have_UI_functionality)-[:Improvement]->(ant)
create (repeats_on_many_pages:issue {name:'repeats on many pages'}) create (repeats_on_many_pages)-[:Improvement]->(ant)
create (see_related_food_items_in_dropdown_Examples:issue {name:'see related_food_items in dropdown Examples'}) create (see_related_food_items_in_dropdown_Examples)-[:Improvement]->(ant)
create (recursive_example_recursive_example_table_example_table_repeats_on_many_pages_many_pages_configurable_variation_code_this_today_code_this_today_menu_field_see_related_food_items_exact_same_test_same_test_different_page_menu_field_see_related_food_items_run_a_particular_scenario_particular_scenario_parametrized_value_Proposed_solution_Proposed_solution_foreach_solution_foreach_solution_foreach_meta_foreach_meta_tag_at_scenario_scenario_level_processing_implications_menu_field_see_related_food_items_:issue {name:'recursive example - recursive example table - example table - repeats on many pages - many pages - configurable variation - code this today - code this today - menu field - see related_food_items - exact same test - same test - different page - menu field - see related_food_items - run a particular scenario - particular scenario - parametrized value - Proposed solution - Proposed solution foreach - solution foreach - solution foreach meta - foreach meta - tag at scenario - scenario level - processing implications - menu field - see related_food_items - '}) create (recursive_example_recursive_example_table_example_table_repeats_on_many_pages_many_pages_configurable_variation_code_this_today_code_this_today_menu_field_see_related_food_items_exact_same_test_same_test_different_page_menu_field_see_related_food_items_run_a_particular_scenario_particular_scenario_parametrized_value_Proposed_solution_Proposed_solution_foreach_solution_foreach_solution_foreach_meta_foreach_meta_tag_at_scenario_scenario_level_processing_implications_menu_field_see_related_food_items_)-[:Bug]->(ant)
create (nested_example)-[:Bug]->(meta)
create (Scenario_with_example_table)-[:Bug]->(meta)
create (have_UI_functionality)-[:Improvement]->(meta)
create (repeats_on_many_pages)-[:Improvement]->(meta)
create (see_related_food_items_in_dropdown_Examples)-[:Improvement]->(meta)
create (recursive_example_recursive_example_table_example_table_repeats_on_many_pages_many_pages_configurable_variation_code_this_today_code_this_today_menu_field_see_related_food_items_exact_same_test_same_test_different_page_menu_field_see_related_food_items_run_a_particular_scenario_particular_scenario_parametrized_value_Proposed_solution_Proposed_solution_foreach_solution_foreach_solution_foreach_meta_foreach_meta_tag_at_scenario_scenario_level_processing_implications_menu_field_see_related_food_items_)-[:Bug]->(meta)
create (nested_example)-[:Bug]->(meta)
create (Scenario_with_example_table)-[:Bug]->(meta)
create (have_UI_functionality)-[:Improvement]->(meta)
create (repeats_on_many_pages)-[:Improvement]->(meta)
create (see_related_food_items_in_dropdown_Examples)-[:Improvement]->(meta)
create (recursive_example_recursive_example_table_example_table_repeats_on_many_pages_many_pages_configurable_variation_code_this_today_code_this_today_menu_field_see_related_food_items_exact_same_test_same_test_different_page_menu_field_see_related_food_items_run_a_particular_scenario_particular_scenario_parametrized_value_Proposed_solution_Proposed_solution_foreach_solution_foreach_solution_foreach_meta_foreach_meta_tag_at_scenario_scenario_level_processing_implications_menu_field_see_related_food_items_)-[:Bug]->(meta)
create (nested_example)-[:Bug]->(scenario)
create (Scenario_with_example_table)-[:Bug]->(scenario)
create (have_UI_functionality)-[:Improvement]->(scenario)
create (repeats_on_many_pages)-[:Improvement]->(scenario)
create (see_related_food_items_in_dropdown_Examples)-[:Improvement]->(scenario)
create (recursive_example_recursive_example_table_example_table_repeats_on_many_pages_many_pages_configurable_variation_code_this_today_code_this_today_menu_field_see_related_food_items_exact_same_test_same_test_different_page_menu_field_see_related_food_items_run_a_particular_scenario_particular_scenario_parametrized_value_Proposed_solution_Proposed_solution_foreach_solution_foreach_solution_foreach_meta_foreach_meta_tag_at_scenario_scenario_level_processing_implications_menu_field_see_related_food_items_)-[:Bug]->(scenario)
create (nested_example)-[:Bug]->(scenario)
create (Scenario_with_example_table)-[:Bug]->(scenario)
create (have_UI_functionality)-[:Improvement]->(scenario)
create (repeats_on_many_pages)-[:Improvement]->(scenario)
create (see_related_food_items_in_dropdown_Examples)-[:Improvement]->(scenario)
create (recursive_example_recursive_example_table_example_table_repeats_on_many_pages_many_pages_configurable_variation_code_this_today_code_this_today_menu_field_see_related_food_items_exact_same_test_same_test_different_page_menu_field_see_related_food_items_run_a_particular_scenario_particular_scenario_parametrized_value_Proposed_solution_Proposed_solution_foreach_solution_foreach_solution_foreach_meta_foreach_meta_tag_at_scenario_scenario_level_processing_implications_menu_field_see_related_food_items_)-[:Bug]->(scenario)
create (enqueue_hoc_stories:issue {name:'enqueue hoc stories'}) create (enqueue_hoc_stories)-[:Bug]->(embedder)
create (allowing_exposure_of_multi:issue {name:'allowing exposure of multi'}) create (allowing_exposure_of_multi)-[:Bug]->(embedder)
create (enqueue_ad_hoc_stories_Add_method_enqueue_stories_allowing_the_exposure_allowing_the_exposure_multi__embedder_methods_:issue {name:'enqueue ad - hoc stories - Add method - enqueue stories - allowing the exposure - allowing the exposure - multi- - embedder methods - '}) create (enqueue_ad_hoc_stories_Add_method_enqueue_stories_allowing_the_exposure_allowing_the_exposure_multi__embedder_methods_)-[:Improvement]->(embedder)
create (setup_code:issue {name:'setup code'}) create (setup_code)-[:Bug]->(core)
create (causing_RuntimeException:issue {name:'causing RuntimeException'}) create (causing_RuntimeException)-[:Bug]->(core)
create (works_in_case:issue {name:'works in case'}) create (works_in_case)-[:Improvement]->(core)
create (addSteps:class {name:'addSteps', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(addSteps)
create (causing_RuntimeException)-[:Bug]->(addSteps)
create (works_in_case)-[:Improvement]->(addSteps)
create (setup_code)-[:Bug]->(addSteps)
create (causing_RuntimeException)-[:Bug]->(addSteps)
create (works_in_case)-[:Improvement]->(addSteps)
create (setup_code)-[:Bug]->(configuration)
create (causing_RuntimeException)-[:Bug]->(configuration)
create (works_in_case)-[:Improvement]->(configuration)
create (configuredEmbedder:class {name:'configuredEmbedder', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(configuredEmbedder)
create (causing_RuntimeException)-[:Bug]->(configuredEmbedder)
create (works_in_case)-[:Improvement]->(configuredEmbedder)
create (setup_code)-[:Bug]->(useConfiguration)
create (causing_RuntimeException)-[:Bug]->(useConfiguration)
create (works_in_case)-[:Improvement]->(useConfiguration)
create (setup_code)-[:Bug]->(embedder)
create (causing_RuntimeException)-[:Bug]->(embedder)
create (works_in_case)-[:Improvement]->(embedder)
create (setup_code)-[:Bug]->(StoryReporterBuilder)
create (causing_RuntimeException)-[:Bug]->(StoryReporterBuilder)
create (works_in_case)-[:Improvement]->(StoryReporterBuilder)
create (doDryRun:class {name:'doDryRun', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(doDryRun)
create (causing_RuntimeException)-[:Bug]->(doDryRun)
create (works_in_case)-[:Improvement]->(doDryRun)
create (storyPathResolver:class {name:'storyPathResolver', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(storyPathResolver)
create (causing_RuntimeException)-[:Bug]->(storyPathResolver)
create (works_in_case)-[:Improvement]->(storyPathResolver)
create (useStepMonitor:class {name:'useStepMonitor', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(useStepMonitor)
create (causing_RuntimeException)-[:Bug]->(useStepMonitor)
create (works_in_case)-[:Improvement]->(useStepMonitor)
create (useStoryControls:class {name:'useStoryControls', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(useStoryControls)
create (causing_RuntimeException)-[:Bug]->(useStoryControls)
create (works_in_case)-[:Improvement]->(useStoryControls)
create (useStoryLoader:class {name:'useStoryLoader', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(useStoryLoader)
create (causing_RuntimeException)-[:Bug]->(useStoryLoader)
create (works_in_case)-[:Improvement]->(useStoryLoader)
create (useStoryPathResolver:class {name:'useStoryPathResolver', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(useStoryPathResolver)
create (causing_RuntimeException)-[:Bug]->(useStoryPathResolver)
create (works_in_case)-[:Improvement]->(useStoryPathResolver)
create (useStoryReporterBuilder:class {name:'useStoryReporterBuilder', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(useStoryReporterBuilder)
create (causing_RuntimeException)-[:Bug]->(useStoryReporterBuilder)
create (works_in_case)-[:Improvement]->(useStoryReporterBuilder)
create (setup_code)-[:Bug]->(StoryReporterBuilder)
create (causing_RuntimeException)-[:Bug]->(StoryReporterBuilder)
create (works_in_case)-[:Improvement]->(StoryReporterBuilder)
create (setup_code)-[:Bug]->(StoryReporterBuilder)
create (causing_RuntimeException)-[:Bug]->(StoryReporterBuilder)
create (works_in_case)-[:Improvement]->(StoryReporterBuilder)
create (setup_code)-[:Bug]->(doDryRun)
create (causing_RuntimeException)-[:Bug]->(doDryRun)
create (works_in_case)-[:Improvement]->(doDryRun)
create (setup_code)-[:Bug]->(storyPathResolver)
create (causing_RuntimeException)-[:Bug]->(storyPathResolver)
create (works_in_case)-[:Improvement]->(storyPathResolver)
create (setup_code)-[:Bug]->(useStepMonitor)
create (causing_RuntimeException)-[:Bug]->(useStepMonitor)
create (works_in_case)-[:Improvement]->(useStepMonitor)
create (setup_code)-[:Bug]->(useStoryControls)
create (causing_RuntimeException)-[:Bug]->(useStoryControls)
create (works_in_case)-[:Improvement]->(useStoryControls)
create (setup_code)-[:Bug]->(useStoryLoader)
create (causing_RuntimeException)-[:Bug]->(useStoryLoader)
create (works_in_case)-[:Improvement]->(useStoryLoader)
create (setup_code)-[:Bug]->(useStoryPathResolver)
create (causing_RuntimeException)-[:Bug]->(useStoryPathResolver)
create (works_in_case)-[:Improvement]->(useStoryPathResolver)
create (setup_code)-[:Bug]->(useStoryReporterBuilder)
create (causing_RuntimeException)-[:Bug]->(useStoryReporterBuilder)
create (works_in_case)-[:Improvement]->(useStoryReporterBuilder)
create (CodeLocations:class {name:'CodeLocations', favoritecolor: 'green'}) create (setup_code)-[:Bug]->(CodeLocations)
create (causing_RuntimeException)-[:Bug]->(CodeLocations)
create (works_in_case)-[:Improvement]->(CodeLocations)
create (setup_code)-[:Bug]->(LoadFromClasspath)
create (causing_RuntimeException)-[:Bug]->(LoadFromClasspath)
create (works_in_case)-[:Improvement]->(LoadFromClasspath)
create (setup_code)-[:Bug]->(UnderscoredCamelCaseResolver)
create (causing_RuntimeException)-[:Bug]->(UnderscoredCamelCaseResolver)
create (works_in_case)-[:Improvement]->(UnderscoredCamelCaseResolver)
create (pending_scenarios:issue {name:'pending scenarios'}) create (pending_scenarios)-[:Bug]->(pending)
create (see_pending_scenarios_in_output:issue {name:'see pending scenarios in output'}) create (see_pending_scenarios_in_output)-[:Bug]->(pending)
create (pending_scenarios_break_build_break_the_build_break_the_build_pending_scenarios_have_several_scenarios_several_scenarios_run_the_build_run_the_build_pending_scenarios_:issue {name:'pending scenarios - break build - break the build - break the build - pending scenarios - have several scenarios - several scenarios - run the build - run the build - pending scenarios - '}) create (pending_scenarios_break_build_break_the_build_break_the_build_pending_scenarios_have_several_scenarios_several_scenarios_run_the_build_run_the_build_pending_scenarios_)-[:Improvement]->(pending)
create (pending_scenarios)-[:Bug]->(scenario)
create (see_pending_scenarios_in_output)-[:Bug]->(scenario)
create (pending_scenarios_break_build_break_the_build_break_the_build_pending_scenarios_have_several_scenarios_several_scenarios_run_the_build_run_the_build_pending_scenarios_)-[:Improvement]->(scenario)
create (pending_scenarios)-[:Bug]->(pending)
create (see_pending_scenarios_in_output)-[:Bug]->(pending)
create (pending_scenarios_break_build_break_the_build_break_the_build_pending_scenarios_have_several_scenarios_several_scenarios_run_the_build_run_the_build_pending_scenarios_)-[:Improvement]->(pending)
create (pending_scenarios)-[:Bug]->(scenario)
create (see_pending_scenarios_in_output)-[:Bug]->(scenario)
create (pending_scenarios_break_build_break_the_build_break_the_build_pending_scenarios_have_several_scenarios_several_scenarios_run_the_build_run_the_build_pending_scenarios_)-[:Improvement]->(scenario)
create (support_for_web_scenarios:issue {name:'support for web scenarios'}) create (support_for_web_scenarios)-[:Bug]->(ant)
create (integrate_web_testing_frameworks:issue {name:'integrate web - testing frameworks'}) create (integrate_web_testing_frameworks)-[:Bug]->(ant)
create (set_up_based_behaviours:issue {name:'set up based behaviours'}) create (set_up_based_behaviours)-[:Improvement]->(ant)
create (integrate_web_testing_frameworks_as_Selenium:issue {name:'integrate web - testing frameworks as Selenium'}) create (integrate_web_testing_frameworks_as_Selenium)-[:Improvement]->(ant)
create (Better_support_support_for_web_web_scenarios_web_developerQA_integrate_web__testing__testing_frameworks_testing_frameworks_given_scenario_based_behaviours_:issue {name:'Better support - support for web - web scenarios - web developerQA - integrate web - -testing - -testing frameworks - testing frameworks - given scenario - based behaviours - '}) create (Better_support_support_for_web_web_scenarios_web_developerQA_integrate_web__testing__testing_frameworks_testing_frameworks_given_scenario_based_behaviours_)-[:Improvement]->(ant)
create (support_for_web_scenarios)-[:Bug]->(given)
create (integrate_web_testing_frameworks)-[:Bug]->(given)
create (set_up_based_behaviours)-[:Improvement]->(given)
create (integrate_web_testing_frameworks_as_Selenium)-[:Improvement]->(given)
create (Better_support_support_for_web_web_scenarios_web_developerQA_integrate_web__testing__testing_frameworks_testing_frameworks_given_scenario_based_behaviours_)-[:Improvement]->(given)
create (support_for_web_scenarios)-[:Bug]->(scenario)
create (integrate_web_testing_frameworks)-[:Bug]->(scenario)
create (set_up_based_behaviours)-[:Improvement]->(scenario)
create (integrate_web_testing_frameworks_as_Selenium)-[:Improvement]->(scenario)
create (Better_support_support_for_web_web_scenarios_web_developerQA_integrate_web__testing__testing_frameworks_testing_frameworks_given_scenario_based_behaviours_)-[:Improvement]->(scenario)
create (support_for_web_scenarios)-[:Bug]->(scenario)
create (integrate_web_testing_frameworks)-[:Bug]->(scenario)
create (set_up_based_behaviours)-[:Improvement]->(scenario)
create (integrate_web_testing_frameworks_as_Selenium)-[:Improvement]->(scenario)
create (Better_support_support_for_web_web_scenarios_web_developerQA_integrate_web__testing__testing_frameworks_testing_frameworks_given_scenario_based_behaviours_)-[:Improvement]->(scenario)
create (based_scenario:issue {name:'based scenario'}) create (based_scenario)-[:Bug]->(scenario)
create (reporting_based_scenario:issue {name:'reporting based scenario'}) create (reporting_based_scenario)-[:Bug]->(scenario)
create (reporting_based_scenario_via_CSS:issue {name:'reporting based scenario via CSS'}) create (reporting_based_scenario_via_CSS)-[:Improvement]->(scenario)
create (based_scenario_based_scenario_generate_reporter_generate_reporter_events_reporter_events_render_reports_render_reports_in_HTML_reports_in_HTML_other_formats_collective_view_view_for_story_story_results_allow_styling_rendered_reports_:issue {name:'based scenario - based scenario - generate reporter - generate reporter events - reporter events - render reports - render reports in HTML - reports in HTML - other formats - collective view - view for story - story results - allow styling - rendered reports - '}) create (based_scenario_based_scenario_generate_reporter_generate_reporter_events_reporter_events_render_reports_render_reports_in_HTML_reports_in_HTML_other_formats_collective_view_view_for_story_story_results_allow_styling_rendered_reports_)-[:Improvement]->(scenario)
create (based_scenario)-[:Bug]->(scenario)
create (reporting_based_scenario)-[:Bug]->(scenario)
create (reporting_based_scenario_via_CSS)-[:Improvement]->(scenario)
create (based_scenario_based_scenario_generate_reporter_generate_reporter_events_reporter_events_render_reports_render_reports_in_HTML_reports_in_HTML_other_formats_collective_view_view_for_story_story_results_allow_styling_rendered_reports_)-[:Improvement]->(scenario)
create (Candidate_step:issue {name:'Candidate step'}) create (Candidate_step)-[:Bug]->(scenario)
create (CSV_of_strings:issue {name:'CSV of strings'}) create (CSV_of_strings)-[:Bug]->(scenario)
create (support_parameter_conversion:issue {name:'support parameter conversion'}) create (support_parameter_conversion)-[:Improvement]->(scenario)
create (does_with_strings:issue {name:'does with strings'}) create (does_with_strings)-[:Improvement]->(scenario)
create (convert_objects_from_string_representations:issue {name:'convert objects from string representations'}) create (convert_objects_from_string_representations)-[:Improvement]->(scenario)
create (Candidate_step_support_generic_parameter_generic_parameter_generic_parameter_conversion_parameter_conversion_have_step_have_step_parameters_step_parameters_strings_or_numbers_candidate_step_strings_and_numbers_injectable_parameter_injectable_parameter_converters_parameter_converters_allow_users_convert_objects_string_representations_make_sense_scenario_domain_:issue {name:'Candidate step - support generic parameter - generic parameter - generic parameter conversion - parameter conversion - have step - have step parameters - step parameters - strings or numbers - candidate step - strings and numbers - injectable parameter - injectable parameter converters - parameter converters - allow users - convert objects - string representations - make sense - scenario domain - '}) create (Candidate_step_support_generic_parameter_generic_parameter_generic_parameter_conversion_parameter_conversion_have_step_have_step_parameters_step_parameters_strings_or_numbers_candidate_step_strings_and_numbers_injectable_parameter_injectable_parameter_converters_parameter_converters_allow_users_convert_objects_string_representations_make_sense_scenario_domain_)-[:Bug]->(scenario)
create (Candidate_step)-[:Bug]->(scenario)
create (CSV_of_strings)-[:Bug]->(scenario)
create (support_parameter_conversion)-[:Improvement]->(scenario)
create (does_with_strings)-[:Improvement]->(scenario)
create (convert_objects_from_string_representations)-[:Improvement]->(scenario)
create (Candidate_step_support_generic_parameter_generic_parameter_generic_parameter_conversion_parameter_conversion_have_step_have_step_parameters_step_parameters_strings_or_numbers_candidate_step_strings_and_numbers_injectable_parameter_injectable_parameter_converters_parameter_converters_allow_users_convert_objects_string_representations_make_sense_scenario_domain_)-[:Bug]->(scenario)
create (is_in_INF_directory:issue {name:'is in INF directory'}) create (is_in_INF_directory)-[:Improvement]->(maven)
create (Running_sceanario_from_eclipse:issue {name:'Running sceanario from eclipse'}) create (Running_sceanario_from_eclipse)-[:Improvement]->(maven)
create (Support_loading:issue {name:'Support loading'}) create (Support_loading)-[:Bug]->(ant)
create (Support_loading_of_stories:issue {name:'Support loading of stories'}) create (Support_loading_of_stories)-[:Bug]->(ant)
create (write_story:issue {name:'write story'}) create (write_story)-[:Improvement]->(ant)
create (write_story_in_ODT_format:issue {name:'write story in ODT format'}) create (write_story_in_ODT_format)-[:Improvement]->(ant)
create (Support_loading_loading_of_stories_write_my_story_:issue {name:'Support loading - loading of stories - write my story - '}) create (Support_loading_loading_of_stories_write_my_story_)-[:Improvement]->(ant)
create (Support_comments:issue {name:'Support comments'}) create (Support_comments)-[:Bug]->(scenario)
create (continuation_of_previous_line:issue {name:'continuation of previous line'}) create (continuation_of_previous_line)-[:Bug]->(scenario)
create (have_ability:issue {name:'have ability'}) create (have_ability)-[:Improvement]->(scenario)
create (add_comments_in_test_scenarios:issue {name:'add comments in test scenarios'}) create (add_comments_in_test_scenarios)-[:Improvement]->(scenario)
create (Support_comments_text_scenarios_have_the_ability_have_the_ability_add_comments_test_scenarios_add_any_comments_add_any_comments_previous_line_have_comment_have_comment_support_comment_support_nice_feature_:issue {name:'Support comments - text scenarios - have the ability - have the ability - add comments - test scenarios - add any comments - add any comments - previous line - have comment - have comment support - comment support - nice feature - '}) create (Support_comments_text_scenarios_have_the_ability_have_the_ability_add_comments_test_scenarios_add_any_comments_add_any_comments_previous_line_have_comment_have_comment_support_comment_support_nice_feature_)-[:Improvement]->(scenario)
create (Support_comments)-[:Bug]->(scenario)
create (continuation_of_previous_line)-[:Bug]->(scenario)
create (have_ability)-[:Improvement]->(scenario)
create (add_comments_in_test_scenarios)-[:Improvement]->(scenario)
create (Support_comments_text_scenarios_have_the_ability_have_the_ability_add_comments_test_scenarios_add_any_comments_add_any_comments_previous_line_have_comment_have_comment_support_comment_support_nice_feature_)-[:Improvement]->(scenario)
create (utility_methods:issue {name:'utility methods'}) create (utility_methods)-[:Bug]->(rest)
create (using_MatcherAssert:issue {name:'using MatcherAssert'}) create (using_MatcherAssert)-[:Bug]->(rest)
create (depend_on_Hamcrest:issue {name:'depend on Hamcrest'}) create (depend_on_Hamcrest)-[:Improvement]->(rest)
create (Ensure_utility_Ensure_utility_methods_utility_methods_testing_framework_testing_framework_:issue {name:'Ensure utility - Ensure utility methods - utility methods - testing framework - testing framework - '}) create (Ensure_utility_Ensure_utility_methods_utility_methods_testing_framework_testing_framework_)-[:Improvement]->(rest)
create (Scenario_keyword:issue {name:'Scenario keyword'}) create (Scenario_keyword)-[:Bug]->(scenario)
create (part_of_keyword:issue {name:'part of keyword'}) create (part_of_keyword)-[:Bug]->(scenario)
create (include_separation_char:issue {name:'include separation char'}) create (include_separation_char)-[:Improvement]->(scenario)
create (Scenario_keyword_include_any_separation_include_any_separation_separation_char_pattern_parser_separation_char_pattern_parser_:issue {name:'Scenario keyword - include any separation - include any separation - separation char - pattern parser - separation char - pattern parser - '}) create (Scenario_keyword_include_any_separation_include_any_separation_separation_char_pattern_parser_separation_char_pattern_parser_)-[:Improvement]->(scenario)
create (Scenario_keyword)-[:Bug]->(scenario)
create (part_of_keyword)-[:Bug]->(scenario)
create (include_separation_char)-[:Improvement]->(scenario)
create (Scenario_keyword_include_any_separation_include_any_separation_separation_char_pattern_parser_separation_char_pattern_parser_)-[:Improvement]->(scenario)
create (test_framework:issue {name:'test framework'}) create (test_framework)-[:Bug]->(scenario)
create (support_for_JUnit:issue {name:'support for JUnit'}) create (support_for_JUnit)-[:Bug]->(scenario)
create (Support_multiple_test_frameworks:issue {name:'Support multiple test frameworks'}) create (Support_multiple_test_frameworks)-[:Improvement]->(scenario)
create (starts_with_test:issue {name:'starts with test'}) create (starts_with_test)-[:Improvement]->(scenario)
create (run_scenarios_via_annotation:issue {name:'run scenarios via annotation'}) create (run_scenarios_via_annotation)-[:Improvement]->(scenario)
create (test_framework)-[:Bug]->(scenario)
create (support_for_JUnit)-[:Bug]->(scenario)
create (Support_multiple_test_frameworks)-[:Improvement]->(scenario)
create (starts_with_test)-[:Improvement]->(scenario)
create (run_scenarios_via_annotation)-[:Improvement]->(scenario)
create (space_after_line:issue {name:'space after line'}) create (space_after_line)-[:Bug]->(after)
create (require_space:issue {name:'require space'}) create (require_space)-[:Bug]->(after)
create (work_without_space:issue {name:'work without space'}) create (work_without_space)-[:Improvement]->(after)
create (require_space_before_new_line:issue {name:'require space before new line'}) create (require_space_before_new_line)-[:Improvement]->(after)
create (commons_upload:issue {name:'commons upload'}) create (commons_upload)-[:Bug]->(pending)
create (Uploading_archive:issue {name:'Uploading archive'}) create (Uploading_archive)-[:Bug]->(pending)
create (depending_on_browser:issue {name:'depending on browser'}) create (depending_on_browser)-[:Improvement]->(pending)
create (Uploading_archive_with_IE:issue {name:'Uploading archive with IE'}) create (Uploading_archive_with_IE)-[:Improvement]->(pending)
create (uploaded_filename_Uploading_an_archive_Uploading_an_archive_uploaded_file_uploaded_file_name_file_name_contains_the_full_path_full_path_different_behaviour_uploaded_file_uploaded_file_name_file_name_path_prefix_:issue {name:'uploaded filename - Uploading an archive - Uploading an archive - uploaded file - uploaded file name - file name - contains the full path - full path - different behaviour - uploaded file - uploaded file name - file name - path prefix - '}) create (uploaded_filename_Uploading_an_archive_Uploading_an_archive_uploaded_file_uploaded_file_name_file_name_contains_the_full_path_full_path_different_behaviour_uploaded_file_uploaded_file_name_file_name_path_prefix_)-[:Improvement]->(pending)
create (commons_upload)-[:Bug]->(pending)
create (Uploading_archive)-[:Bug]->(pending)
create (depending_on_browser)-[:Improvement]->(pending)
create (Uploading_archive_with_IE)-[:Improvement]->(pending)
create (uploaded_filename_Uploading_an_archive_Uploading_an_archive_uploaded_file_uploaded_file_name_file_name_contains_the_full_path_full_path_different_behaviour_uploaded_file_uploaded_file_name_file_name_path_prefix_)-[:Improvement]->(pending)
create (have_multiple_scenarios:issue {name:'have multiple scenarios'}) create (have_multiple_scenarios)-[:Bug]->(scenario)
create (have_multiple_scenarios_in_story:issue {name:'have multiple scenarios in story'}) create (have_multiple_scenarios_in_story)-[:Bug]->(scenario)
create (have_multiple_scenarios_multiple_scenarios_detect_multiple_scenarios_multiple_scenarios_story_file_:issue {name:'have multiple scenarios - multiple scenarios - detect multiple scenarios - multiple scenarios - story file - '}) create (have_multiple_scenarios_multiple_scenarios_detect_multiple_scenarios_multiple_scenarios_story_file_)-[:Improvement]->(scenario)
create (have_multiple_scenarios)-[:Bug]->(scenario)
create (have_multiple_scenarios_in_story)-[:Bug]->(scenario)
create (have_multiple_scenarios_multiple_scenarios_detect_multiple_scenarios_multiple_scenarios_story_file_)-[:Improvement]->(scenario)
create (Auto_generate:issue {name:'Auto generate'}) create (Auto_generate)-[:Bug]->(given)
create (Auto_generate_stubs_for_pending_steps:issue {name:'Auto generate stubs for pending steps'}) create (Auto_generate_stubs_for_pending_steps)-[:Bug]->(given)
create (books_flight:issue {name:'books flight'}) create (books_flight)-[:Improvement]->(given)
create (Auto_generate)-[:Bug]->(pending)
create (Auto_generate_stubs_for_pending_steps)-[:Bug]->(pending)
create (books_flight)-[:Improvement]->(pending)
create (Auto_generate)-[:Bug]->(pending)
create (Auto_generate_stubs_for_pending_steps)-[:Bug]->(pending)
create (books_flight)-[:Improvement]->(pending)
create (show:class {name:'show', favoritecolor: 'green'}) create (Auto_generate)-[:Bug]->(show)
create (Auto_generate_stubs_for_pending_steps)-[:Bug]->(show)
create (books_flight)-[:Improvement]->(show)
create (have_keywords:issue {name:'have keywords'}) create (have_keywords)-[:Bug]->(core)
create (be_IN_Keywords:issue {name:'be IN Keywords'}) create (be_IN_Keywords)-[:Bug]->(core)
create (have_keywords_for_different_languages:issue {name:'have keywords for different languages'}) create (have_keywords_for_different_languages)-[:Improvement]->(core)
create (dev_list_have_keywords_different_languages_reads_keywords_resource_bundles_do_the_trick_do_the_trick_common_locales_core_jar_terms_of_size_:issue {name:'dev list - have keywords - different languages - reads keywords - resource bundles - do the trick - do the trick - common locales - core jar - terms of size - '}) create (dev_list_have_keywords_different_languages_reads_keywords_resource_bundles_do_the_trick_do_the_trick_common_locales_core_jar_terms_of_size_)-[:Improvement]->(core)
create (have_keywords)-[:Bug]->(keywords)
create (be_IN_Keywords)-[:Bug]->(keywords)
create (have_keywords_for_different_languages)-[:Improvement]->(keywords)
create (dev_list_have_keywords_different_languages_reads_keywords_resource_bundles_do_the_trick_do_the_trick_common_locales_core_jar_terms_of_size_)-[:Improvement]->(keywords)
create (have_keywords)-[:Bug]->(keywords)
create (be_IN_Keywords)-[:Bug]->(keywords)
create (have_keywords_for_different_languages)-[:Improvement]->(keywords)
create (dev_list_have_keywords_different_languages_reads_keywords_resource_bundles_do_the_trick_do_the_trick_common_locales_core_jar_terms_of_size_)-[:Improvement]->(keywords)
create (broken_scenarios:issue {name:'broken scenarios'}) create (broken_scenarios)-[:Bug]->(scenario)
create (have_many_scenarios:issue {name:'have many scenarios'}) create (have_many_scenarios)-[:Bug]->(scenario)
create (see_output_from_broken_scenarios:issue {name:'see output from broken scenarios'}) create (see_output_from_broken_scenarios)-[:Improvement]->(scenario)
create (broken_scenarios_have_many_scenarios_many_scenarios_working_scenarios_run_the_build_run_the_build_see_the_output_see_the_output_broken_scenarios_:issue {name:'broken scenarios - have many scenarios - many scenarios - working scenarios - run the build - run the build - see the output - see the output - broken scenarios - '}) create (broken_scenarios_have_many_scenarios_many_scenarios_working_scenarios_run_the_build_run_the_build_see_the_output_see_the_output_broken_scenarios_)-[:Improvement]->(scenario)
create (broken_scenarios)-[:Bug]->(scenario)
create (have_many_scenarios)-[:Bug]->(scenario)
create (see_output_from_broken_scenarios)-[:Improvement]->(scenario)
create (broken_scenarios_have_many_scenarios_many_scenarios_working_scenarios_run_the_build_run_the_build_see_the_output_see_the_output_broken_scenarios_)-[:Improvement]->(scenario)
create (Selenium_StepsConfiguration:issue {name:'Selenium StepsConfiguration'}) create (Selenium_StepsConfiguration)-[:Bug]->(given)
create (uses_SeleniumStepsMonitor:issue {name:'uses SeleniumStepsMonitor'}) create (uses_SeleniumStepsMonitor)-[:Bug]->(given)
create (Selenium_StepsConfiguration)-[:Bug]->(scenario)
create (uses_SeleniumStepsMonitor)-[:Bug]->(scenario)
create (Selenium_StepsConfiguration)-[:Bug]->(scenario)
create (uses_SeleniumStepsMonitor)-[:Bug]->(scenario)
create (Selenium_StepsConfiguration)-[:Bug]->(Context)
create (uses_SeleniumStepsMonitor)-[:Bug]->(Context)
create (getCurrentScenario:class {name:'getCurrentScenario', favoritecolor: 'green'}) create (Selenium_StepsConfiguration)-[:Bug]->(getCurrentScenario)
create (uses_SeleniumStepsMonitor)-[:Bug]->(getCurrentScenario)
create (default_converters:issue {name:'default converters'}) create (default_converters)-[:Bug]->(configuration)
create (configuration_of_number_format:issue {name:'configuration of number format'}) create (configuration_of_number_format)-[:Bug]->(configuration)
create (Make_default_Make_default_converter_default_converter_default_converter_classes_converter_classes_allow_configuration_allow_configuration_of_number_configuration_of_number_number_format_Make_the_default_Make_the_default_default_converters_Make_the_number_Make_the_number_number_format_:issue {name:'Make default - Make default converter - default converter - default converter classes - converter classes - allow configuration - allow configuration of number - configuration of number - number format - Make the default - Make the default - default converters - Make the number - Make the number - number format - '}) create (Make_default_Make_default_converter_default_converter_default_converter_classes_converter_classes_allow_configuration_allow_configuration_of_number_configuration_of_number_number_format_Make_the_default_Make_the_default_default_converters_Make_the_number_Make_the_number_number_format_)-[:Improvement]->(configuration)
create (scenario_file:issue {name:'scenario file'}) create (scenario_file)-[:Bug]->(ant)
create (writing_scenarios:issue {name:'writing scenarios'}) create (writing_scenarios)-[:Bug]->(ant)
create (get_at_moment:issue {name:'get at moment'}) create (get_at_moment)-[:Improvement]->(ant)
create (writing_scenarios_use_another_scenario_use_another_scenario_big_long_scenarios_long_scenarios_code_side_Given_the_glider_Given_the_glider_scenario_file_Throw_an_exception_Throw_an_exception_:issue {name:'writing scenarios - use another scenario - use another scenario - big long scenarios - long scenarios - code side - Given the glider - Given the glider - scenario file - Throw an exception - Throw an exception - '}) create (writing_scenarios_use_another_scenario_use_another_scenario_big_long_scenarios_long_scenarios_code_side_Given_the_glider_Given_the_glider_scenario_file_Throw_an_exception_Throw_an_exception_)-[:Improvement]->(ant)
create (scenario_file)-[:Bug]->(scenario)
create (writing_scenarios)-[:Bug]->(scenario)
create (get_at_moment)-[:Improvement]->(scenario)
create (writing_scenarios_use_another_scenario_use_another_scenario_big_long_scenarios_long_scenarios_code_side_Given_the_glider_Given_the_glider_scenario_file_Throw_an_exception_Throw_an_exception_)-[:Improvement]->(scenario)
create (scenario_file)-[:Bug]->(scenario)
create (writing_scenarios)-[:Bug]->(scenario)
create (get_at_moment)-[:Improvement]->(scenario)
create (writing_scenarios_use_another_scenario_use_another_scenario_big_long_scenarios_long_scenarios_code_side_Given_the_glider_Given_the_glider_scenario_file_Throw_an_exception_Throw_an_exception_)-[:Improvement]->(scenario)
create (resource_bundle:issue {name:'resource bundle'}) create (resource_bundle)-[:Bug]->(keywords)
create (use_classloader:issue {name:'use classloader'}) create (use_classloader)-[:Bug]->(keywords)
create (needs_In_keywords:issue {name:'needs In keywords'}) create (needs_In_keywords)-[:Improvement]->(keywords)
create (keywords_resource_keywords_resource_bundle_resource_bundle_use_the_caller_use_the_caller_:issue {name:'keywords resource - keywords resource bundle - resource bundle - use the caller - use the caller - '}) create (keywords_resource_keywords_resource_bundle_resource_bundle_use_the_caller_use_the_caller_)-[:Improvement]->(keywords)
create (resource_bundle)-[:Bug]->(keywords)
create (use_classloader)-[:Bug]->(keywords)
create (needs_In_keywords)-[:Improvement]->(keywords)
create (keywords_resource_keywords_resource_bundle_resource_bundle_use_the_caller_use_the_caller_)-[:Improvement]->(keywords)
create (Improve_based_scenario:issue {name:'Improve based scenario'}) create (Improve_based_scenario)-[:Bug]->(scenario)
create (suffer_from_regex_stack_overflow:issue {name:'suffer from regex stack overflow'}) create (suffer_from_regex_stack_overflow)-[:Improvement]->(scenario)
create (Provide_alternative_implementation_of_scenario_parser:issue {name:'Provide alternative implementation of scenario parser'}) create (Provide_alternative_implementation_of_scenario_parser)-[:Improvement]->(scenario)
create (Improve_regex_based_scenario_Provide_an_alternative_implementation_alternative_implementation_implementation_of_scenario_scenario_parser_stack_overflow_stack_overflow_issue_overflow_issue_:issue {name:'Improve regex - based scenario - Provide an alternative implementation - alternative implementation - implementation of scenario - scenario parser - stack overflow - stack overflow issue - overflow issue - '}) create (Improve_regex_based_scenario_Provide_an_alternative_implementation_alternative_implementation_implementation_of_scenario_scenario_parser_stack_overflow_stack_overflow_issue_overflow_issue_)-[:Improvement]->(scenario)
create (Improve_based_scenario)-[:Bug]->(scenario)
create (suffer_from_regex_stack_overflow)-[:Improvement]->(scenario)
create (Provide_alternative_implementation_of_scenario_parser)-[:Improvement]->(scenario)
create (Improve_regex_based_scenario_Provide_an_alternative_implementation_alternative_implementation_implementation_of_scenario_scenario_parser_stack_overflow_stack_overflow_issue_overflow_issue_)-[:Improvement]->(scenario)
create (Custom_converters:issue {name:'Custom converters'}) create (Custom_converters)-[:Bug]->(ant)
create (Custom_converters_As_developer:issue {name:'Custom converters As developer'}) create (Custom_converters_As_developer)-[:Bug]->(ant)
create (provide_converters:issue {name:'provide converters'}) create (provide_converters)-[:Improvement]->(ant)
create (convert_from_String:issue {name:'convert from String'}) create (convert_from_String)-[:Improvement]->(ant)
create (Custom_converters_provide_converters_:issue {name:'Custom converters - provide converters - '}) create (Custom_converters_provide_converters_)-[:Improvement]->(ant)
create (Custom_converters)-[:Bug]->(scenario)
create (Custom_converters_As_developer)-[:Bug]->(scenario)
create (provide_converters)-[:Improvement]->(scenario)
create (convert_from_String)-[:Improvement]->(scenario)
create (Custom_converters_provide_converters_)-[:Improvement]->(scenario)
create (Custom_converters)-[:Bug]->(scenario)
create (Custom_converters_As_developer)-[:Bug]->(scenario)
create (provide_converters)-[:Improvement]->(scenario)
create (convert_from_String)-[:Improvement]->(scenario)
create (Custom_converters_provide_converters_)-[:Improvement]->(scenario)
create (Testcase_testScenarioHeyHeyMyMy:issue {name:'Testcase testScenarioHeyHeyMyMy'}) create (Testcase_testScenarioHeyHeyMyMy)-[:Bug]->(core)
create (Scenario_in_default_package:issue {name:'Scenario in default package'}) create (Scenario_in_default_package)-[:Bug]->(core)
create (cause_NullPointerException:issue {name:'cause NullPointerException'}) create (cause_NullPointerException)-[:Improvement]->(core)
create (playing_with_JBehave:issue {name:'playing with JBehave'}) create (playing_with_JBehave)-[:Improvement]->(core)
create (default_package_cause_NullPointerException_encountered_the_folloing_encountered_the_folloing_folloing_NullPointerException_Caused_an_ERROR_Caused_an_ERROR_enclosed_a_patch_enclosed_a_patch_:issue {name:'default package - cause NullPointerException - encountered the folloing - encountered the folloing - folloing NullPointerException - Caused an ERROR - Caused an ERROR - enclosed a patch - enclosed a patch - '}) create (default_package_cause_NullPointerException_encountered_the_folloing_encountered_the_folloing_folloing_NullPointerException_Caused_an_ERROR_Caused_an_ERROR_enclosed_a_patch_enclosed_a_patch_)-[:Improvement]->(core)
create (Testcase_testScenarioHeyHeyMyMy)-[:Bug]->(scenario)
create (Scenario_in_default_package)-[:Bug]->(scenario)
create (cause_NullPointerException)-[:Improvement]->(scenario)
create (playing_with_JBehave)-[:Improvement]->(scenario)
create (default_package_cause_NullPointerException_encountered_the_folloing_encountered_the_folloing_folloing_NullPointerException_Caused_an_ERROR_Caused_an_ERROR_enclosed_a_patch_enclosed_a_patch_)-[:Improvement]->(scenario)
create (Testcase_testScenarioHeyHeyMyMy)-[:Bug]->(scenario)
create (Scenario_in_default_package)-[:Bug]->(scenario)
create (cause_NullPointerException)-[:Improvement]->(scenario)
create (playing_with_JBehave)-[:Improvement]->(scenario)
create (default_package_cause_NullPointerException_encountered_the_folloing_encountered_the_folloing_folloing_NullPointerException_Caused_an_ERROR_Caused_an_ERROR_enclosed_a_patch_enclosed_a_patch_)-[:Improvement]->(scenario)
create (Testcase_testScenarioHeyHeyMyMy)-[:Bug]->(close)
create (Scenario_in_default_package)-[:Bug]->(close)
create (cause_NullPointerException)-[:Improvement]->(close)
create (playing_with_JBehave)-[:Improvement]->(close)
create (default_package_cause_NullPointerException_encountered_the_folloing_encountered_the_folloing_folloing_NullPointerException_Caused_an_ERROR_Caused_an_ERROR_enclosed_a_patch_enclosed_a_patch_)-[:Improvement]->(close)
create (Testcase_testScenarioHeyHeyMyMy)-[:Bug]->(UnderscoredCamelCaseResolver)
create (Scenario_in_default_package)-[:Bug]->(UnderscoredCamelCaseResolver)
create (cause_NullPointerException)-[:Improvement]->(UnderscoredCamelCaseResolver)
create (playing_with_JBehave)-[:Improvement]->(UnderscoredCamelCaseResolver)
create (default_package_cause_NullPointerException_encountered_the_folloing_encountered_the_folloing_folloing_NullPointerException_Caused_an_ERROR_Caused_an_ERROR_enclosed_a_patch_enclosed_a_patch_)-[:Improvement]->(UnderscoredCamelCaseResolver)
create (large_gap:issue {name:'large gap'}) create (large_gap)-[:Bug]->(ant)
create (mention_of_need:issue {name:'mention of need'}) create (mention_of_need)-[:Bug]->(ant)
create (Improve_documentation:issue {name:'Improve documentation'}) create (Improve_documentation)-[:Improvement]->(ant)
create (leave_out_bunch:issue {name:'leave out bunch'}) create (leave_out_bunch)-[:Improvement]->(ant)
create (have_good_solutions_in_product:issue {name:'have good solutions in product'}) create (have_good_solutions_in_product)-[:Improvement]->(ant)
create (Improve_documentation_large_gap_detailed_technical_documentation_technical_documentation_created_a_lot_created_a_lot_lot_of_frustration_following_issues_have_good_solutions_good_solutions_important_stuff_get_the_example_get_the_example_installation_information_was_no_mention_was_no_mention_allow_these_methods_allow_these_methods_class_names_names_on_front_running_scenarios_Pending_steps_involved_andor_voodoo_andor_voodoo_clear_description_Pending_steps_pending_steps_fail_the_tests_fail_the_tests_various_environments_:issue {name:'Improve documentation - large gap - detailed technical documentation - technical documentation - created a lot - created a lot - lot of frustration - following issues - have good solutions - good solutions - important stuff - get the example - get the example - installation information - was no mention - was no mention - allow these methods - allow these methods - class names - names on front - running scenarios - Pending steps - involved andor voodoo - andor voodoo - clear description - Pending steps - pending steps - fail the tests - fail the tests - various environments - '}) create (Improve_documentation_large_gap_detailed_technical_documentation_technical_documentation_created_a_lot_created_a_lot_lot_of_frustration_following_issues_have_good_solutions_good_solutions_important_stuff_get_the_example_get_the_example_installation_information_was_no_mention_was_no_mention_allow_these_methods_allow_these_methods_class_names_names_on_front_running_scenarios_Pending_steps_involved_andor_voodoo_andor_voodoo_clear_description_Pending_steps_pending_steps_fail_the_tests_fail_the_tests_various_environments_)-[:Bug]->(ant)
create (large_gap)-[:Bug]->(pending)
create (mention_of_need)-[:Bug]->(pending)
create (Improve_documentation)-[:Improvement]->(pending)
create (leave_out_bunch)-[:Improvement]->(pending)
create (have_good_solutions_in_product)-[:Improvement]->(pending)
create (Improve_documentation_large_gap_detailed_technical_documentation_technical_documentation_created_a_lot_created_a_lot_lot_of_frustration_following_issues_have_good_solutions_good_solutions_important_stuff_get_the_example_get_the_example_installation_information_was_no_mention_was_no_mention_allow_these_methods_allow_these_methods_class_names_names_on_front_running_scenarios_Pending_steps_involved_andor_voodoo_andor_voodoo_clear_description_Pending_steps_pending_steps_fail_the_tests_fail_the_tests_various_environments_)-[:Bug]->(pending)
create (large_gap)-[:Bug]->(scenario)
create (mention_of_need)-[:Bug]->(scenario)
create (Improve_documentation)-[:Improvement]->(scenario)
create (leave_out_bunch)-[:Improvement]->(scenario)
create (have_good_solutions_in_product)-[:Improvement]->(scenario)
create (Improve_documentation_large_gap_detailed_technical_documentation_technical_documentation_created_a_lot_created_a_lot_lot_of_frustration_following_issues_have_good_solutions_good_solutions_important_stuff_get_the_example_get_the_example_installation_information_was_no_mention_was_no_mention_allow_these_methods_allow_these_methods_class_names_names_on_front_running_scenarios_Pending_steps_involved_andor_voodoo_andor_voodoo_clear_description_Pending_steps_pending_steps_fail_the_tests_fail_the_tests_various_environments_)-[:Bug]->(scenario)
create (large_gap)-[:Bug]->(pending)
create (mention_of_need)-[:Bug]->(pending)
create (Improve_documentation)-[:Improvement]->(pending)
create (leave_out_bunch)-[:Improvement]->(pending)
create (have_good_solutions_in_product)-[:Improvement]->(pending)
create (Improve_documentation_large_gap_detailed_technical_documentation_technical_documentation_created_a_lot_created_a_lot_lot_of_frustration_following_issues_have_good_solutions_good_solutions_important_stuff_get_the_example_get_the_example_installation_information_was_no_mention_was_no_mention_allow_these_methods_allow_these_methods_class_names_names_on_front_running_scenarios_Pending_steps_involved_andor_voodoo_andor_voodoo_clear_description_Pending_steps_pending_steps_fail_the_tests_fail_the_tests_various_environments_)-[:Bug]->(pending)
create (large_gap)-[:Bug]->(scenario)
create (mention_of_need)-[:Bug]->(scenario)
create (Improve_documentation)-[:Improvement]->(scenario)
create (leave_out_bunch)-[:Improvement]->(scenario)
create (have_good_solutions_in_product)-[:Improvement]->(scenario)
create (Improve_documentation_large_gap_detailed_technical_documentation_technical_documentation_created_a_lot_created_a_lot_lot_of_frustration_following_issues_have_good_solutions_good_solutions_important_stuff_get_the_example_get_the_example_installation_information_was_no_mention_was_no_mention_allow_these_methods_allow_these_methods_class_names_names_on_front_running_scenarios_Pending_steps_involved_andor_voodoo_andor_voodoo_clear_description_Pending_steps_pending_steps_fail_the_tests_fail_the_tests_various_environments_)-[:Bug]->(scenario)
create (has_narrative:issue {name:'has narrative'}) create (narrative:class {name:'narrative', favoritecolor: 'green'}) create (has_narrative)-[:Bug]->(narrative)
create (Given_a_story_Given_a_story_story_file_several_scenarios_Given_the_story_Given_the_story_has_a_narrative_has_a_narrative_output_the_scenarios_output_the_scenarios_see_the_narrative_see_the_narrative_:issue {name:'Given a story - Given a story - story file - several scenarios - Given the story - Given the story - has a narrative - has a narrative - output the scenarios - output the scenarios - see the narrative - see the narrative - '}) create (Given_a_story_Given_a_story_story_file_several_scenarios_Given_the_story_Given_the_story_has_a_narrative_has_a_narrative_output_the_scenarios_output_the_scenarios_see_the_narrative_see_the_narrative_)-[:Bug]->(narrative)
create (has_narrative)-[:Bug]->(narrative)
create (Given_a_story_Given_a_story_story_file_several_scenarios_Given_the_story_Given_the_story_has_a_narrative_has_a_narrative_output_the_scenarios_output_the_scenarios_see_the_narrative_see_the_narrative_)-[:Bug]->(narrative)
create (has_narrative)-[:Bug]->(scenario)
create (Given_a_story_Given_a_story_story_file_several_scenarios_Given_the_story_Given_the_story_has_a_narrative_has_a_narrative_output_the_scenarios_output_the_scenarios_see_the_narrative_see_the_narrative_)-[:Bug]->(scenario)
create (has_narrative)-[:Bug]->(scenario)
create (Given_a_story_Given_a_story_story_file_several_scenarios_Given_the_story_Given_the_story_has_a_narrative_has_a_narrative_output_the_scenarios_output_the_scenarios_see_the_narrative_see_the_narrative_)-[:Bug]->(scenario)
create (output_patterns:issue {name:'output patterns'}) create (output_patterns)-[:Bug]->(failed)
create (allow_overriding:issue {name:'allow overriding'}) create (allow_overriding)-[:Bug]->(failed)
create (allow_overriding_of_output_patterns:issue {name:'allow overriding of output patterns'}) create (allow_overriding_of_output_patterns)-[:Improvement]->(failed)
create (Allow_output_Allow_output_patterns_output_patterns_allow_overriding_event_output_event_output_patterns_output_patterns_allow_full_IN_full_IN_IN_of_reporter_reporter_messages_:issue {name:'Allow output - Allow output patterns - output patterns - allow overriding - event output - event output patterns - output patterns - allow full IN - full IN - IN of reporter - reporter messages - '}) create (Allow_output_Allow_output_patterns_output_patterns_allow_overriding_event_output_event_output_patterns_output_patterns_allow_full_IN_full_IN_IN_of_reporter_reporter_messages_)-[:Improvement]->(failed)
create (output_patterns)-[:Bug]->(pending)
create (allow_overriding)-[:Bug]->(pending)
create (allow_overriding_of_output_patterns)-[:Improvement]->(pending)
create (Allow_output_Allow_output_patterns_output_patterns_allow_overriding_event_output_event_output_patterns_output_patterns_allow_full_IN_full_IN_IN_of_reporter_reporter_messages_)-[:Improvement]->(pending)
create (output_patterns)-[:Bug]->(pending)
create (allow_overriding)-[:Bug]->(pending)
create (allow_overriding_of_output_patterns)-[:Improvement]->(pending)
create (Allow_output_Allow_output_patterns_output_patterns_allow_overriding_event_output_event_output_patterns_output_patterns_allow_full_IN_full_IN_IN_of_reporter_reporter_messages_)-[:Improvement]->(pending)
create (Pending_steps:issue {name:'Pending steps'}) create (Pending_steps)-[:Bug]->(pending)
create (break_build:issue {name:'break build'}) create (break_build)-[:Bug]->(pending)
create (break_build_on_pending_steps:issue {name:'break build on pending steps'}) create (break_build_on_pending_steps)-[:Improvement]->(pending)
create (Pending_steps_break_the_build_break_the_build_Given_a_scenario_Given_a_scenario_pending_steps_break_the_build_break_the_build_pending_steps_run_the_scenario_run_the_scenario_:issue {name:'Pending steps - break the build - break the build - Given a scenario - Given a scenario - pending steps - break the build - break the build - pending steps - run the scenario - run the scenario - '}) create (Pending_steps_break_the_build_break_the_build_Given_a_scenario_Given_a_scenario_pending_steps_break_the_build_break_the_build_pending_steps_run_the_scenario_run_the_scenario_)-[:Improvement]->(pending)
create (Pending_steps)-[:Bug]->(scenario)
create (break_build)-[:Bug]->(scenario)
create (break_build_on_pending_steps)-[:Improvement]->(scenario)
create (Pending_steps_break_the_build_break_the_build_Given_a_scenario_Given_a_scenario_pending_steps_break_the_build_break_the_build_pending_steps_run_the_scenario_run_the_scenario_)-[:Improvement]->(scenario)
create (Pending_steps)-[:Bug]->(pending)
create (break_build)-[:Bug]->(pending)
create (break_build_on_pending_steps)-[:Improvement]->(pending)
create (Pending_steps_break_the_build_break_the_build_Given_a_scenario_Given_a_scenario_pending_steps_break_the_build_break_the_build_pending_steps_run_the_scenario_run_the_scenario_)-[:Improvement]->(pending)
create (Pending_steps)-[:Bug]->(scenario)
create (break_build)-[:Bug]->(scenario)
create (break_build_on_pending_steps)-[:Improvement]->(scenario)
create (Pending_steps_break_the_build_break_the_build_Given_a_scenario_Given_a_scenario_pending_steps_break_the_build_break_the_build_pending_steps_run_the_scenario_run_the_scenario_)-[:Improvement]->(scenario)
create (Convert_ant_build:issue {name:'Convert ant build'}) create (Convert_ant_build)-[:Bug]->(spring)
create (migrating_to_ivy:issue {name:'migrating to ivy'}) create (migrating_to_ivy)-[:Improvement]->(spring)
create (have_lib_directory_with_various_subdirectories:issue {name:'have lib directory with various subdirectories'}) create (have_lib_directory_with_various_subdirectories)-[:Improvement]->(spring)
create (Convert_ant_build_ant_build_use_ivy_use_ivy_for_dependencies_ivy_for_dependencies_have_a_lib_have_a_lib_lib_directory_various_subdirectories_containing_a_number_containing_a_number_dependent_jars_add_more_adapters_more_adapters_more_adapters_spring_adapters_spring_has_a_similar_dependency_similar_dependency_similar_dependency_resolution_dependency_resolution_similar_dependency_resolution_model_dependency_resolution_model_resolution_model_simplify_the_build_simplify_the_build_party_jars_:issue {name:'Convert ant build - ant build - use ivy - use ivy for dependencies - ivy for dependencies - have a lib - have a lib - lib directory - various subdirectories - containing a number - containing a number - dependent jars - add more adapters - more adapters - more adapters spring - adapters spring - has a similar dependency - similar dependency - similar dependency resolution - dependency resolution - similar dependency resolution model - dependency resolution model - resolution model - simplify the build - simplify the build - party jars - '}) create (Convert_ant_build_ant_build_use_ivy_use_ivy_for_dependencies_ivy_for_dependencies_have_a_lib_have_a_lib_lib_directory_various_subdirectories_containing_a_number_containing_a_number_dependent_jars_add_more_adapters_more_adapters_more_adapters_spring_adapters_spring_has_a_similar_dependency_similar_dependency_similar_dependency_resolution_dependency_resolution_similar_dependency_resolution_model_dependency_resolution_model_resolution_model_simplify_the_build_simplify_the_build_party_jars_)-[:Improvement]->(spring)
create (Convert_ant_build)-[:Bug]->(ant)
create (migrating_to_ivy)-[:Improvement]->(ant)
create (have_lib_directory_with_various_subdirectories)-[:Improvement]->(ant)
create (Convert_ant_build_ant_build_use_ivy_use_ivy_for_dependencies_ivy_for_dependencies_have_a_lib_have_a_lib_lib_directory_various_subdirectories_containing_a_number_containing_a_number_dependent_jars_add_more_adapters_more_adapters_more_adapters_spring_adapters_spring_has_a_similar_dependency_similar_dependency_similar_dependency_resolution_dependency_resolution_similar_dependency_resolution_model_dependency_resolution_model_resolution_model_simplify_the_build_simplify_the_build_party_jars_)-[:Improvement]->(ant)
create (Convert_ant_build)-[:Bug]->(maven)
create (migrating_to_ivy)-[:Improvement]->(maven)
create (have_lib_directory_with_various_subdirectories)-[:Improvement]->(maven)
create (Convert_ant_build_ant_build_use_ivy_use_ivy_for_dependencies_ivy_for_dependencies_have_a_lib_have_a_lib_lib_directory_various_subdirectories_containing_a_number_containing_a_number_dependent_jars_add_more_adapters_more_adapters_more_adapters_spring_adapters_spring_has_a_similar_dependency_similar_dependency_similar_dependency_resolution_dependency_resolution_similar_dependency_resolution_model_dependency_resolution_model_resolution_model_simplify_the_build_simplify_the_build_party_jars_)-[:Improvement]->(maven)
create (Story_titles:issue {name:'Story titles'}) create (Story_titles)-[:Bug]->(scenario)
create (has_title:issue {name:'has title'}) create (has_title)-[:Bug]->(scenario)
create (see_title_in_output:issue {name:'see title in output'}) create (see_title_in_output)-[:Improvement]->(scenario)
create (Story_titles_Given_a_story_Given_a_story_several_scenarios_Given_the_story_Given_the_story_has_a_title_has_a_title_run_the_story_run_the_story_see_the_title_see_the_title_:issue {name:'Story titles - Given a story - Given a story - several scenarios - Given the story - Given the story - has a title - has a title - run the story - run the story - see the title - see the title - '}) create (Story_titles_Given_a_story_Given_a_story_several_scenarios_Given_the_story_Given_the_story_has_a_title_has_a_title_run_the_story_run_the_story_see_the_title_see_the_title_)-[:Improvement]->(scenario)
create (Story_titles)-[:Bug]->(scenario)
create (has_title)-[:Bug]->(scenario)
create (see_title_in_output)-[:Improvement]->(scenario)
create (Story_titles_Given_a_story_Given_a_story_several_scenarios_Given_the_story_Given_the_story_has_a_title_has_a_title_run_the_story_run_the_story_see_the_title_see_the_title_)-[:Improvement]->(scenario)
create (Table_examples:issue {name:'Table examples'}) create (paranamer:class {name:'paranamer', favoritecolor: 'green'}) create (Table_examples)-[:Bug]->(paranamer)
create (_tsmith_:issue {name:'| tsmith |'}) create (_tsmith_)-[:Bug]->(paranamer)
create (include_Antony:issue {name:'include Antony'}) create (include_Antony)-[:Improvement]->(paranamer)
create (like_something_along_lines:issue {name:'like something along lines'}) create (like_something_along_lines)-[:Improvement]->(paranamer)
create (Table_examples)-[:Bug]->(paranamer)
create (_tsmith_)-[:Bug]->(paranamer)
create (include_Antony)-[:Improvement]->(paranamer)
create (like_something_along_lines)-[:Improvement]->(paranamer)
create (same_CandidateSteps:issue {name:'same CandidateSteps'}) create (same_CandidateSteps)-[:Bug]->(ant)
create (using_single_Java_entry_point:issue {name:'using single Java entry point'}) create (using_single_Java_entry_point)-[:Bug]->(ant)
create (Allow_in_order:issue {name:'Allow In order'}) create (Allow_in_order)-[:Improvement]->(ant)
create (define_Java_class_for_textual_story:issue {name:'define Java class for textual story'}) create (define_Java_class_for_textual_story)-[:Improvement]->(ant)
create (multiple_textual_stories_textual_stories_entry_point_point_in_order_avoid_the_need_avoid_the_need_textual_story_story_runner_multiple_textual_stories_textual_stories_entry_point_provided_all_stories_provided_all_stories_:issue {name:'multiple textual stories - textual stories - entry point - point In order - avoid the need - avoid the need - textual story - story runner - multiple textual stories - textual stories - entry point - provided all stories - provided all stories - '}) create (multiple_textual_stories_textual_stories_entry_point_point_in_order_avoid_the_need_avoid_the_need_textual_story_story_runner_multiple_textual_stories_textual_stories_entry_point_provided_all_stories_provided_all_stories_)-[:Improvement]->(ant)
create (scenario_class:issue {name:'scenario class'}) create (scenario_class)-[:Bug]->(scenario)
create (lookup_of_class_names:issue {name:'lookup of class names'}) create (lookup_of_class_names)-[:Bug]->(scenario)
create (require_need:issue {name:'require need'}) create (require_need)-[:Improvement]->(scenario)
create (fails_on_Windows:issue {name:'fails on Windows'}) create (fails_on_Windows)-[:Improvement]->(scenario)
create (Scenario_class_Scenario_class_lookup_class_lookup_lookup_of_scenario_scenario_class_scenario_class_names_class_names_includes_pattern_retrieved_use_package_separators_separators_in_place_require_the_need_require_the_need_normalise_paths_:issue {name:'Scenario class - Scenario class lookup - class lookup - lookup of scenario - scenario class - scenario class names - class names - includes pattern - retrieved use - package separators - separators in place - require the need - require the need - normalise paths - '}) create (Scenario_class_Scenario_class_lookup_class_lookup_lookup_of_scenario_scenario_class_scenario_class_names_class_names_includes_pattern_retrieved_use_package_separators_separators_in_place_require_the_need_require_the_need_normalise_paths_)-[:Improvement]->(scenario)
create (scenario_class)-[:Bug]->(scenario)
create (lookup_of_class_names)-[:Bug]->(scenario)
create (require_need)-[:Improvement]->(scenario)
create (fails_on_Windows)-[:Improvement]->(scenario)
create (Scenario_class_Scenario_class_lookup_class_lookup_lookup_of_scenario_scenario_class_scenario_class_names_class_names_includes_pattern_retrieved_use_package_separators_separators_in_place_require_the_need_require_the_need_normalise_paths_)-[:Improvement]->(scenario)
create (utility_class:issue {name:'utility class'}) create (utility_class)-[:Bug]->(scenario)
create (look_resources:issue {name:'look resources'}) create (look_resources)-[:Bug]->(scenario)
create (keeping_with_DRY_principle:issue {name:'keeping with DRY principle'}) create (keeping_with_DRY_principle)-[:Improvement]->(scenario)
create (look_resources_in_scenario_steps:issue {name:'look resources in scenario steps'}) create (look_resources_in_scenario_steps)-[:Improvement]->(scenario)
create (common_requirement_look_resources_look_resources_in_scenario_resources_in_scenario_scenario_steps_utility_class_level_code_:issue {name:'common requirement - look resources - look resources in scenario - resources in scenario - scenario steps - utility class - level code - '}) create (common_requirement_look_resources_look_resources_in_scenario_resources_in_scenario_scenario_steps_utility_class_level_code_)-[:Improvement]->(scenario)
create (utility_class)-[:Bug]->(scenario)
create (look_resources)-[:Bug]->(scenario)
create (keeping_with_DRY_principle)-[:Improvement]->(scenario)
create (look_resources_in_scenario_steps)-[:Improvement]->(scenario)
create (common_requirement_look_resources_look_resources_in_scenario_resources_in_scenario_scenario_steps_utility_class_level_code_)-[:Improvement]->(scenario)
create (running_scenarios:issue {name:'running scenarios'}) create (running_scenarios)-[:Bug]->(scenario)
create (running_the_scenarios_running_the_scenarios_:issue {name:'running the scenarios - running the scenarios - '}) create (running_the_scenarios_running_the_scenarios_)-[:Bug]->(scenario)
create (running_scenarios)-[:Bug]->(scenario)
create (running_the_scenarios_running_the_scenarios_)-[:Bug]->(scenario)
create (Steps_class:issue {name:'Steps class'}) create (Steps_class)-[:Bug]->(maven)
create (users_of_project:issue {name:'users of project'}) create (users_of_project)-[:Bug]->(maven)
create (use_external_library:issue {name:'use external library'}) create (use_external_library)-[:Improvement]->(maven)
create (depend_on_library:issue {name:'depend on library'}) create (depend_on_library)-[:Improvement]->(maven)
create (use_external_library_In_Steps_implementation:issue {name:'use external library In Steps implementation'}) create (use_external_library_In_Steps_implementation)-[:Improvement]->(maven)
create (Steps_class)-[:Bug]->(scenario)
create (users_of_project)-[:Bug]->(scenario)
create (use_external_library)-[:Improvement]->(scenario)
create (depend_on_library)-[:Improvement]->(scenario)
create (use_external_library_In_Steps_implementation)-[:Improvement]->(scenario)
create (scope:class {name:'scope', favoritecolor: 'green'}) create (Steps_class)-[:Bug]->(scope)
create (users_of_project)-[:Bug]->(scope)
create (use_external_library)-[:Improvement]->(scope)
create (depend_on_library)-[:Improvement]->(scope)
create (use_external_library_In_Steps_implementation)-[:Improvement]->(scope)
create (Steps_class)-[:Bug]->(scenario)
create (users_of_project)-[:Bug]->(scenario)
create (use_external_library)-[:Improvement]->(scenario)
create (depend_on_library)-[:Improvement]->(scenario)
create (use_external_library_In_Steps_implementation)-[:Improvement]->(scenario)
create (Steps_class)-[:Bug]->(scope)
create (users_of_project)-[:Bug]->(scope)
create (use_external_library)-[:Improvement]->(scope)
create (depend_on_library)-[:Improvement]->(scope)
create (use_external_library_In_Steps_implementation)-[:Improvement]->(scope)
create (Candidate_steps:issue {name:'Candidate steps'}) create (Candidate_steps)-[:Bug]->(given)
create (unexpected_behaviour_due_implict_uniqueness:issue {name:'unexpected behaviour due implict uniqueness'}) create (unexpected_behaviour_due_implict_uniqueness)-[:Bug]->(given)
create (matching_textual_steps:issue {name:'matching textual steps'}) create (matching_textual_steps)-[:Improvement]->(given)
create (arising_from_different_annotations:issue {name:'arising from different annotations'}) create (arising_from_different_annotations)-[:Improvement]->(given)
create (have_scenario_like_Scenario:issue {name:'have scenario like Scenario'}) create (have_scenario_like_Scenario)-[:Improvement]->(given)
create (Candidate_steps_method_annotation_method_annotation_type_annotation_type_matching_textual_steps_textual_steps_distinguish_pattern_distinguish_pattern_steps_pattern_steps_arising_from_different_annotations_different_annotations_is_no_such_distinction_such_distinction_confusing_behaviour_public_void_givenFooString_name_have_a_scenario_have_a_scenario_Given_xyz_unexpected_behaviour_matching_pattern_causes_randomness_causes_randomness_in_test_randomness_in_test_test_execution_different_annotations_matching_of_patterns_:issue {name:'Candidate steps - method annotation - method annotation type - annotation type - matching textual steps - textual steps - distinguish pattern - distinguish pattern steps - pattern steps - arising from different annotations - different annotations - is no such distinction - such distinction - confusing behaviour - public void - givenFooString name - have a scenario - have a scenario - Given xyz - unexpected behaviour - matching pattern - causes randomness - causes randomness in test - randomness in test - test execution - different annotations - matching of patterns - '}) create (Candidate_steps_method_annotation_method_annotation_type_annotation_type_matching_textual_steps_textual_steps_distinguish_pattern_distinguish_pattern_steps_pattern_steps_arising_from_different_annotations_different_annotations_is_no_such_distinction_such_distinction_confusing_behaviour_public_void_givenFooString_name_have_a_scenario_have_a_scenario_Given_xyz_unexpected_behaviour_matching_pattern_causes_randomness_causes_randomness_in_test_randomness_in_test_test_execution_different_annotations_matching_of_patterns_)-[:Bug]->(given)
create (Candidate_steps)-[:Bug]->(scenario)
create (unexpected_behaviour_due_implict_uniqueness)-[:Bug]->(scenario)
create (matching_textual_steps)-[:Improvement]->(scenario)
create (arising_from_different_annotations)-[:Improvement]->(scenario)
create (have_scenario_like_Scenario)-[:Improvement]->(scenario)
create (Candidate_steps_method_annotation_method_annotation_type_annotation_type_matching_textual_steps_textual_steps_distinguish_pattern_distinguish_pattern_steps_pattern_steps_arising_from_different_annotations_different_annotations_is_no_such_distinction_such_distinction_confusing_behaviour_public_void_givenFooString_name_have_a_scenario_have_a_scenario_Given_xyz_unexpected_behaviour_matching_pattern_causes_randomness_causes_randomness_in_test_randomness_in_test_test_execution_different_annotations_matching_of_patterns_)-[:Bug]->(scenario)
create (Candidate_steps)-[:Bug]->(scenario)
create (unexpected_behaviour_due_implict_uniqueness)-[:Bug]->(scenario)
create (matching_textual_steps)-[:Improvement]->(scenario)
create (arising_from_different_annotations)-[:Improvement]->(scenario)
create (have_scenario_like_Scenario)-[:Improvement]->(scenario)
create (Candidate_steps_method_annotation_method_annotation_type_annotation_type_matching_textual_steps_textual_steps_distinguish_pattern_distinguish_pattern_steps_pattern_steps_arising_from_different_annotations_different_annotations_is_no_such_distinction_such_distinction_confusing_behaviour_public_void_givenFooString_name_have_a_scenario_have_a_scenario_Given_xyz_unexpected_behaviour_matching_pattern_causes_randomness_causes_randomness_in_test_randomness_in_test_test_execution_different_annotations_matching_of_patterns_)-[:Bug]->(scenario)
create (scenario_parser:issue {name:'scenario parser'}) create (scenario_parser)-[:Bug]->(scenario)
create (couple_of_changes:issue {name:'couple of changes'}) create (couple_of_changes)-[:Bug]->(scenario)
create (recognising_Step:issue {name:'recognising Step'}) create (recognising_Step)-[:Improvement]->(scenario)
create (starting_with_Given:issue {name:'starting with Given'}) create (starting_with_Given)-[:Improvement]->(scenario)
create (recognising_Step_with_content:issue {name:'recognising Step with content'}) create (recognising_Step_with_content)-[:Improvement]->(scenario)
create (recognising_Step_recognising_Step_with_content_Step_with_content_have_a_scenario_have_a_scenario_contains_words_scenario_parser_display_name_made_a_couple_made_a_couple_couple_of_changes_:issue {name:'recognising Step - recognising Step with content - Step with content - have a scenario - have a scenario - contains words - scenario parser - display name - made a couple - made a couple - couple of changes - '}) create (recognising_Step_recognising_Step_with_content_Step_with_content_have_a_scenario_have_a_scenario_contains_words_scenario_parser_display_name_made_a_couple_made_a_couple_couple_of_changes_)-[:Bug]->(scenario)
create (scenario_parser)-[:Bug]->(scenario)
create (couple_of_changes)-[:Bug]->(scenario)
create (recognising_Step)-[:Improvement]->(scenario)
create (starting_with_Given)-[:Improvement]->(scenario)
create (recognising_Step_with_content)-[:Improvement]->(scenario)
create (recognising_Step_recognising_Step_with_content_Step_with_content_have_a_scenario_have_a_scenario_contains_words_scenario_parser_display_name_made_a_couple_made_a_couple_couple_of_changes_)-[:Bug]->(scenario)
create (Generate_StepDoc:issue {name:'Generate StepDoc'}) create (Generate_StepDoc)-[:Bug]->(ant)
create (Generate_StepDoc_from_annotated_methods:issue {name:'Generate StepDoc from annotated methods'}) create (Generate_StepDoc_from_annotated_methods)-[:Bug]->(ant)
create (generate_list:issue {name:'generate list'}) create (generate_list)-[:Improvement]->(ant)
create (generate_list_of_annotated_candidate_available_steps:issue {name:'generate list of annotated candidate available steps'}) create (generate_list_of_annotated_candidate_available_steps)-[:Improvement]->(ant)
create (annotated_methods_generate_the_list_generate_the_list_annotated_candidate_annotated_candidate_steps_candidate_steps_scenario_writers_list_of_steps_steps_patterns_patterns_and_aliases_:issue {name:'annotated methods - generate the list - generate the list - annotated candidate - annotated candidate steps - candidate steps - scenario writers - list of steps - steps patterns - patterns and aliases - '}) create (annotated_methods_generate_the_list_generate_the_list_annotated_candidate_annotated_candidate_steps_candidate_steps_scenario_writers_list_of_steps_steps_patterns_patterns_and_aliases_)-[:Improvement]->(ant)
create (Generate_StepDoc)-[:Bug]->(scenario)
create (Generate_StepDoc_from_annotated_methods)-[:Bug]->(scenario)
create (generate_list)-[:Improvement]->(scenario)
create (generate_list_of_annotated_candidate_available_steps)-[:Improvement]->(scenario)
create (annotated_methods_generate_the_list_generate_the_list_annotated_candidate_annotated_candidate_steps_candidate_steps_scenario_writers_list_of_steps_steps_patterns_patterns_and_aliases_)-[:Improvement]->(scenario)
create (Generate_StepDoc)-[:Bug]->(scenario)
create (Generate_StepDoc_from_annotated_methods)-[:Bug]->(scenario)
create (generate_list)-[:Improvement]->(scenario)
create (generate_list_of_annotated_candidate_available_steps)-[:Improvement]->(scenario)
create (annotated_methods_generate_the_list_generate_the_list_annotated_candidate_annotated_candidate_steps_candidate_steps_scenario_writers_list_of_steps_steps_patterns_patterns_and_aliases_)-[:Improvement]->(scenario)
create (ignoreFailure_flag:issue {name:'ignoreFailure flag'}) create (ignoreFailure_flag)-[:Bug]->(ant)
create (enable_long_scenario:issue {name:'enable long scenario'}) create (enable_long_scenario)-[:Bug]->(ant)
create (run_in_batch_mode:issue {name:'run in batch mode'}) create (run_in_batch_mode)-[:Improvement]->(ant)
create (have_batch_failure_at_end:issue {name:'have batch failure at end'}) create (have_batch_failure_at_end)-[:Improvement]->(ant)
create (Allow_scenarios_batch_mode_fast_mode_ignoreFailure_flag_batch_mode_enable_long_scenario_long_scenario_have_a_summary_have_a_summary_summary_batch_summary_batch_failure_batch_failure_generate_a_full_report_full_report_report_of_scenarios_including_any_failures_including_any_failures_:issue {name:'Allow scenarios - batch mode - fast mode - ignoreFailure flag - batch mode - enable long scenario - long scenario - have a summary - have a summary - summary batch - summary batch failure - batch failure - generate a full report - full report - report of scenarios - including any failures - including any failures - '}) create (Allow_scenarios_batch_mode_fast_mode_ignoreFailure_flag_batch_mode_enable_long_scenario_long_scenario_have_a_summary_have_a_summary_summary_batch_summary_batch_failure_batch_failure_generate_a_full_report_full_report_report_of_scenarios_including_any_failures_including_any_failures_)-[:Improvement]->(ant)
create (ignoreFailure_flag)-[:Bug]->(scenario)
create (enable_long_scenario)-[:Bug]->(scenario)
create (run_in_batch_mode)-[:Improvement]->(scenario)
create (have_batch_failure_at_end)-[:Improvement]->(scenario)
create (Allow_scenarios_batch_mode_fast_mode_ignoreFailure_flag_batch_mode_enable_long_scenario_long_scenario_have_a_summary_have_a_summary_summary_batch_summary_batch_failure_batch_failure_generate_a_full_report_full_report_report_of_scenarios_including_any_failures_including_any_failures_)-[:Improvement]->(scenario)
create (ignoreFailure_flag)-[:Bug]->(scenario)
create (enable_long_scenario)-[:Bug]->(scenario)
create (run_in_batch_mode)-[:Improvement]->(scenario)
create (have_batch_failure_at_end)-[:Improvement]->(scenario)
create (Allow_scenarios_batch_mode_fast_mode_ignoreFailure_flag_batch_mode_enable_long_scenario_long_scenario_have_a_summary_have_a_summary_summary_batch_summary_batch_failure_batch_failure_generate_a_full_report_full_report_report_of_scenarios_including_any_failures_including_any_failures_)-[:Improvement]->(scenario)
create (Maven_plugin:issue {name:'Maven plugin'}) create (Maven_plugin)-[:Bug]->(maven)
create (identify_Scenario_classes:issue {name:'identify Scenario classes'}) create (identify_Scenario_classes)-[:Bug]->(maven)
create (identify_Scenario_classes_in_srctestjava:issue {name:'identify Scenario classes in srctestjava'}) create (identify_Scenario_classes_in_srctestjava)-[:Improvement]->(maven)
create (Maven_plugin)-[:Bug]->(scenario)
create (identify_Scenario_classes)-[:Bug]->(scenario)
create (identify_Scenario_classes_in_srctestjava)-[:Improvement]->(scenario)
create (Maven_plugin)-[:Bug]->(scope)
create (identify_Scenario_classes)-[:Bug]->(scope)
create (identify_Scenario_classes_in_srctestjava)-[:Improvement]->(scope)
create (Maven_plugin)-[:Bug]->(scenario)
create (identify_Scenario_classes)-[:Bug]->(scenario)
create (identify_Scenario_classes_in_srctestjava)-[:Improvement]->(scenario)
create (Maven_plugin)-[:Bug]->(scope)
create (identify_Scenario_classes)-[:Bug]->(scope)
create (identify_Scenario_classes_in_srctestjava)-[:Improvement]->(scope)
create (based_StoryLoader:issue {name:'based StoryLoader'}) create (based_StoryLoader)-[:Bug]->(ant)
create (load_stories:issue {name:'load stories'}) create (load_stories)-[:Bug]->(ant)
create (want_As_story_developer:issue {name:'want As story developer'}) create (want_As_story_developer)-[:Improvement]->(ant)
create (retrieve_stories_from_wikis:issue {name:'retrieve stories from wikis'}) create (retrieve_stories_from_wikis)-[:Improvement]->(ant)
create (story_developer_load_stories_load_stories_via_URLs_stories_via_URLs_retrieve_stories_:issue {name:'story developer - load stories - load stories via URLs - stories via URLs - retrieve stories - '}) create (story_developer_load_stories_load_stories_via_URLs_stories_via_URLs_retrieve_stories_)-[:Improvement]->(ant)
create (find_scenarios:issue {name:'find scenarios'}) create (find_scenarios)-[:Bug]->(scenario)
create (find_scenarios_with_numbers:issue {name:'find scenarios with numbers'}) create (find_scenarios_with_numbers)-[:Bug]->(scenario)
create (find_scenarios_find_scenarios_with_numbers_scenarios_with_numbers_file_name_throws_ScenarioNotFoundException_:issue {name:'find scenarios - find scenarios with numbers - scenarios with numbers - file name - throws ScenarioNotFoundException - '}) create (find_scenarios_find_scenarios_with_numbers_scenarios_with_numbers_file_name_throws_ScenarioNotFoundException_)-[:Improvement]->(scenario)
create (find_scenarios)-[:Bug]->(scenario)
create (find_scenarios_with_numbers)-[:Bug]->(scenario)
create (find_scenarios_find_scenarios_with_numbers_scenarios_with_numbers_file_name_throws_ScenarioNotFoundException_)-[:Improvement]->(scenario)
create (JBehave_code:issue {name:'JBehave code'}) create (JBehave_code)-[:Bug]->(configuration)
create (Improve_javadocs:issue {name:'Improve javadocs'}) create (Improve_javadocs)-[:Bug]->(configuration)
create (be_of_non_default_features:issue {name:'be of non - default features'}) create (be_of_non_default_features)-[:Improvement]->(configuration)
create (_default_features_default_features_features_and_configuration_features_and_configuration_options_configuration_options_:issue {name:'-default features - default features - features and configuration - features and configuration options - configuration options - '}) create (_default_features_default_features_features_and_configuration_features_and_configuration_options_configuration_options_)-[:Improvement]->(configuration)
create (data_archive:issue {name:'data archive'}) create (data_archive)-[:Bug]->(show)
create (using_relative_paths:issue {name:'using relative paths'}) create (using_relative_paths)-[:Bug]->(show)
create (archive_file_archive_file_content_file_content_using_relative_paths_relative_paths_data_archive_data_archive_file_archive_file_archive_file_content_file_content_using_relative_paths_relative_paths_Windows_the_path_Windows_the_path_:issue {name:'archive file - archive file content - file content - using relative paths - relative paths - data archive - data archive file - archive file - archive file content - file content - using relative paths - relative paths - Windows the path - Windows the path - '}) create (archive_file_archive_file_content_file_content_using_relative_paths_relative_paths_data_archive_data_archive_file_archive_file_archive_file_content_file_content_using_relative_paths_relative_paths_Windows_the_path_Windows_the_path_)-[:Improvement]->(show)
create (scenario_classes:issue {name:'scenario classes'}) create (scenario_classes)-[:Bug]->(core)
create (Allow_ScenarioClassLoader:issue {name:'Allow ScenarioClassLoader'}) create (Allow_ScenarioClassLoader)-[:Bug]->(core)
create (need_constructor_with_ClassLoader_parameter:issue {name:'need constructor with ClassLoader parameter'}) create (need_constructor_with_ClassLoader_parameter)-[:Improvement]->(core)
create (instantiate_scenarios_using_default_using_default_constructor_default_constructor_scenario_classes_need_a_constructor_need_a_constructor_using_core_support_a_varargs_support_a_varargs_varargs_of_parameter_parameter_types_parameter_types_using_the_default_using_the_default_default_constructor_use_the_appropriate_parameter_appropriate_parameter_appropriate_parameter_types_parameter_types_:issue {name:'instantiate scenarios - using default - using default constructor - default constructor - scenario classes - need a constructor - need a constructor - using core - support a varargs - support a varargs - varargs of parameter - parameter types - parameter types - using the default - using the default - default constructor - use the appropriate parameter - appropriate parameter - appropriate parameter types - parameter types - '}) create (instantiate_scenarios_using_default_using_default_constructor_default_constructor_scenario_classes_need_a_constructor_need_a_constructor_using_core_support_a_varargs_support_a_varargs_varargs_of_parameter_parameter_types_parameter_types_using_the_default_using_the_default_default_constructor_use_the_appropriate_parameter_appropriate_parameter_appropriate_parameter_types_parameter_types_)-[:Improvement]->(core)
create (scenario_classes)-[:Bug]->(scenario)
create (Allow_ScenarioClassLoader)-[:Bug]->(scenario)
create (need_constructor_with_ClassLoader_parameter)-[:Improvement]->(scenario)
create (instantiate_scenarios_using_default_using_default_constructor_default_constructor_scenario_classes_need_a_constructor_need_a_constructor_using_core_support_a_varargs_support_a_varargs_varargs_of_parameter_parameter_types_parameter_types_using_the_default_using_the_default_default_constructor_use_the_appropriate_parameter_appropriate_parameter_appropriate_parameter_types_parameter_types_)-[:Improvement]->(scenario)
create (scenario_classes)-[:Bug]->(scenario)
create (Allow_ScenarioClassLoader)-[:Bug]->(scenario)
create (need_constructor_with_ClassLoader_parameter)-[:Improvement]->(scenario)
create (instantiate_scenarios_using_default_using_default_constructor_default_constructor_scenario_classes_need_a_constructor_need_a_constructor_using_core_support_a_varargs_support_a_varargs_varargs_of_parameter_parameter_types_parameter_types_using_the_default_using_the_default_default_constructor_use_the_appropriate_parameter_appropriate_parameter_appropriate_parameter_types_parameter_types_)-[:Improvement]->(scenario)
create (eg_environment:issue {name:'eg environment'}) create (eg_environment)-[:Bug]->(ant)
create (produce_configuration:issue {name:'produce configuration'}) create (produce_configuration)-[:Bug]->(ant)
create (configuration_classes_multiple_different_things_different_things_dependency_injection_dependency_injection_mechanism_injection_mechanism_produce_a_configuration_produce_a_configuration_have_different_ways_different_ways_have_a_play_have_a_play_broken_scenarios_broken_scenario_error_output_breaking_a_story_breaking_a_story_broken_stories_:issue {name:'configuration classes - multiple different things - different things - dependency injection - dependency injection mechanism - injection mechanism - produce a configuration - produce a configuration - have different ways - different ways - have a play - have a play - broken scenarios - broken scenario - error output - breaking a story - breaking a story - broken stories - '}) create (configuration_classes_multiple_different_things_different_things_dependency_injection_dependency_injection_mechanism_injection_mechanism_produce_a_configuration_produce_a_configuration_have_different_ways_different_ways_have_a_play_have_a_play_broken_scenarios_broken_scenario_error_output_breaking_a_story_breaking_a_story_broken_stories_)-[:Improvement]->(ant)
create (eg_environment)-[:Bug]->(configuration)
create (produce_configuration)-[:Bug]->(configuration)
create (configuration_classes_multiple_different_things_different_things_dependency_injection_dependency_injection_mechanism_injection_mechanism_produce_a_configuration_produce_a_configuration_have_different_ways_different_ways_have_a_play_have_a_play_broken_scenarios_broken_scenario_error_output_breaking_a_story_breaking_a_story_broken_stories_)-[:Improvement]->(configuration)
create (eg_environment)-[:Bug]->(scenario)
create (produce_configuration)-[:Bug]->(scenario)
create (configuration_classes_multiple_different_things_different_things_dependency_injection_dependency_injection_mechanism_injection_mechanism_produce_a_configuration_produce_a_configuration_have_different_ways_different_ways_have_a_play_have_a_play_broken_scenarios_broken_scenario_error_output_breaking_a_story_breaking_a_story_broken_stories_)-[:Improvement]->(scenario)
create (eg_environment)-[:Bug]->(scenario)
create (produce_configuration)-[:Bug]->(scenario)
create (configuration_classes_multiple_different_things_different_things_dependency_injection_dependency_injection_mechanism_injection_mechanism_produce_a_configuration_produce_a_configuration_have_different_ways_different_ways_have_a_play_have_a_play_broken_scenarios_broken_scenario_error_output_breaking_a_story_breaking_a_story_broken_stories_)-[:Improvement]->(scenario)
create (StoryRunner_methods:issue {name:'StoryRunner methods'}) create (StoryRunner_methods)-[:Bug]->(print)
create (use_BehaviourListener:issue {name:'use BehaviourListener'}) create (use_BehaviourListener)-[:Bug]->(print)
create (default_impl_void_printReport_:issue {name:'default impl - void printReport - '}) create (default_impl_void_printReport_)-[:Improvement]->(print)
create (following_step:issue {name:'following step'}) create (following_step)-[:Bug]->(ant)
create (set_order:issue {name:'set order'}) create (set_order)-[:Improvement]->(ant)
create (set_order_of_steps:issue {name:'set order of steps'}) create (set_order_of_steps)-[:Improvement]->(ant)
create (set_order_set_order_of_steps_order_of_steps_declaring_steps_have_similar_wording_similar_wording_have_a_line_have_a_line_want_this_line_want_this_line_following_step_have_an_annotation_have_an_annotation_indicates_the_order_indicates_the_order_occurs_That_way_occurs_That_way_first_step_example_input_example_input_line_input_line_:issue {name:'set order - set order of steps - order of steps - declaring steps - have similar wording - similar wording - have a line - have a line - want this line - want this line - following step - have an annotation - have an annotation - indicates the order - indicates the order - occurs That way - occurs That way - first step - example input - example input line - input line - '}) create (set_order_set_order_of_steps_order_of_steps_declaring_steps_have_similar_wording_similar_wording_have_a_line_have_a_line_want_this_line_want_this_line_following_step_have_an_annotation_have_an_annotation_indicates_the_order_indicates_the_order_occurs_That_way_occurs_That_way_first_step_example_input_example_input_line_input_line_)-[:Improvement]->(ant)
create (following_step)-[:Bug]->(scenario)
create (set_order)-[:Improvement]->(scenario)
create (set_order_of_steps)-[:Improvement]->(scenario)
create (set_order_set_order_of_steps_order_of_steps_declaring_steps_have_similar_wording_similar_wording_have_a_line_have_a_line_want_this_line_want_this_line_following_step_have_an_annotation_have_an_annotation_indicates_the_order_indicates_the_order_occurs_That_way_occurs_That_way_first_step_example_input_example_input_line_input_line_)-[:Improvement]->(scenario)
create (following_step)-[:Bug]->(scenario)
create (set_order)-[:Improvement]->(scenario)
create (set_order_of_steps)-[:Improvement]->(scenario)
create (set_order_set_order_of_steps_order_of_steps_declaring_steps_have_similar_wording_similar_wording_have_a_line_have_a_line_want_this_line_want_this_line_following_step_have_an_annotation_have_an_annotation_indicates_the_order_indicates_the_order_occurs_That_way_occurs_That_way_first_step_example_input_example_input_line_input_line_)-[:Improvement]->(scenario)
create (different_scenarios:issue {name:'different scenarios'}) create (different_scenarios)-[:Bug]->(pending)
create (activity_on_scenarios:issue {name:'activity on scenarios'}) create (activity_on_scenarios)-[:Bug]->(pending)
create (add_priority:issue {name:'add priority'}) create (add_priority)-[:Improvement]->(pending)
create (add_priority_to_scenarios:issue {name:'add priority to scenarios'}) create (add_priority_to_scenarios)-[:Improvement]->(pending)
create (add_priority_add_priority_textual_scenarios_different_scenarios_beforeScenarioString_title_beforeScenarioString_title_int_priority_create_a_visual_report_visual_report_raise_warnings_high_priority_high_priority_scenario_priority_scenario_is_activity_is_activity_on_scenarios_activity_on_scenarios_less_priority_:issue {name:'add priority - add priority - textual scenarios - different scenarios - beforeScenarioString title - beforeScenarioString title - int priority - create a visual report - visual report - raise warnings - high priority - high priority scenario - priority scenario - is activity - is activity on scenarios - activity on scenarios - less priority - '}) create (add_priority_add_priority_textual_scenarios_different_scenarios_beforeScenarioString_title_beforeScenarioString_title_int_priority_create_a_visual_report_visual_report_raise_warnings_high_priority_high_priority_scenario_priority_scenario_is_activity_is_activity_on_scenarios_activity_on_scenarios_less_priority_)-[:Improvement]->(pending)
create (priority:class {name:'priority', favoritecolor: 'green'}) create (different_scenarios)-[:Bug]->(priority)
create (activity_on_scenarios)-[:Bug]->(priority)
create (add_priority)-[:Improvement]->(priority)
create (add_priority_to_scenarios)-[:Improvement]->(priority)
create (add_priority_add_priority_textual_scenarios_different_scenarios_beforeScenarioString_title_beforeScenarioString_title_int_priority_create_a_visual_report_visual_report_raise_warnings_high_priority_high_priority_scenario_priority_scenario_is_activity_is_activity_on_scenarios_activity_on_scenarios_less_priority_)-[:Improvement]->(priority)
create (different_scenarios)-[:Bug]->(scenario)
create (activity_on_scenarios)-[:Bug]->(scenario)
create (add_priority)-[:Improvement]->(scenario)
create (add_priority_to_scenarios)-[:Improvement]->(scenario)
create (add_priority_add_priority_textual_scenarios_different_scenarios_beforeScenarioString_title_beforeScenarioString_title_int_priority_create_a_visual_report_visual_report_raise_warnings_high_priority_high_priority_scenario_priority_scenario_is_activity_is_activity_on_scenarios_activity_on_scenarios_less_priority_)-[:Improvement]->(scenario)
create (different_scenarios)-[:Bug]->(pending)
create (activity_on_scenarios)-[:Bug]->(pending)
create (add_priority)-[:Improvement]->(pending)
create (add_priority_to_scenarios)-[:Improvement]->(pending)
create (add_priority_add_priority_textual_scenarios_different_scenarios_beforeScenarioString_title_beforeScenarioString_title_int_priority_create_a_visual_report_visual_report_raise_warnings_high_priority_high_priority_scenario_priority_scenario_is_activity_is_activity_on_scenarios_activity_on_scenarios_less_priority_)-[:Improvement]->(pending)
create (different_scenarios)-[:Bug]->(priority)
create (activity_on_scenarios)-[:Bug]->(priority)
create (add_priority)-[:Improvement]->(priority)
create (add_priority_to_scenarios)-[:Improvement]->(priority)
create (add_priority_add_priority_textual_scenarios_different_scenarios_beforeScenarioString_title_beforeScenarioString_title_int_priority_create_a_visual_report_visual_report_raise_warnings_high_priority_high_priority_scenario_priority_scenario_is_activity_is_activity_on_scenarios_activity_on_scenarios_less_priority_)-[:Improvement]->(priority)
create (different_scenarios)-[:Bug]->(scenario)
create (activity_on_scenarios)-[:Bug]->(scenario)
create (add_priority)-[:Improvement]->(scenario)
create (add_priority_to_scenarios)-[:Improvement]->(scenario)
create (add_priority_add_priority_textual_scenarios_different_scenarios_beforeScenarioString_title_beforeScenarioString_title_int_priority_create_a_visual_report_visual_report_raise_warnings_high_priority_high_priority_scenario_priority_scenario_is_activity_is_activity_on_scenarios_activity_on_scenarios_less_priority_)-[:Improvement]->(scenario)
create (Add_Ant:issue {name:'Add Ant'}) create (Add_Ant)-[:Bug]->(scenario)
create (Add_integration_Ant_integration_layer:issue {name:'Add integration Ant integration layer'}) create (Add_integration_Ant_integration_layer)-[:Bug]->(scenario)
create (run_scenarios_via_Ant_tasks:issue {name:'run scenarios via Ant tasks'}) create (run_scenarios_via_Ant_tasks)-[:Improvement]->(scenario)
create (task_integration_integration_layer_run_scenarios_:issue {name:'task integration - integration layer - run scenarios - '}) create (task_integration_integration_layer_run_scenarios_)-[:Improvement]->(scenario)
create (Add_Ant)-[:Bug]->(scenario)
create (Add_integration_Ant_integration_layer)-[:Bug]->(scenario)
create (run_scenarios_via_Ant_tasks)-[:Improvement]->(scenario)
create (task_integration_integration_layer_run_scenarios_)-[:Improvement]->(scenario)
create (reset_state:issue {name:'reset state'}) create (reset_state)-[:Bug]->(ant)
create (reset_state_after_scenario:issue {name:'reset state after scenario'}) create (reset_state_after_scenario)-[:Improvement]->(ant)
create (reset_my_state__scenario_story_scenario_story_make_my_scenarios_:issue {name:'reset my state - -scenario story - scenario story - make my scenarios - '}) create (reset_my_state__scenario_story_scenario_story_make_my_scenarios_)-[:Improvement]->(ant)
create (reset_state)-[:Bug]->(after)
create (reset_state_after_scenario)-[:Improvement]->(after)
create (reset_my_state__scenario_story_scenario_story_make_my_scenarios_)-[:Improvement]->(after)
create (reset_state)-[:Bug]->(scenario)
create (reset_state_after_scenario)-[:Improvement]->(scenario)
create (reset_my_state__scenario_story_scenario_story_make_my_scenarios_)-[:Improvement]->(scenario)
create (reset_state)-[:Bug]->(scenario)
create (reset_state_after_scenario)-[:Improvement]->(scenario)
create (reset_my_state__scenario_story_scenario_story_make_my_scenarios_)-[:Improvement]->(scenario)
create (same_title:issue {name:'same title'}) create (same_title)-[:Bug]->(ant)
create (title_scenarios:issue {name:'title scenarios'}) create (title_scenarios)-[:Bug]->(ant)
create (appear_in_output:issue {name:'appear in output'}) create (appear_in_output)-[:Improvement]->(ant)
create (title_scenarios_before_scenario:issue {name:'title scenarios before scenario'}) create (title_scenarios_before_scenario)-[:Improvement]->(ant)
create (title_scenarios_Given_a_scenario_Given_a_scenario_scenario_title_run_the_scenario_run_the_scenario_see_the_same_title_same_title_:issue {name:'title scenarios - Given a scenario - Given a scenario - scenario title - run the scenario - run the scenario - see the same title - same title - '}) create (title_scenarios_Given_a_scenario_Given_a_scenario_scenario_title_run_the_scenario_run_the_scenario_see_the_same_title_same_title_)-[:Improvement]->(ant)
create (same_title)-[:Bug]->(scenario)
create (title_scenarios)-[:Bug]->(scenario)
create (appear_in_output)-[:Improvement]->(scenario)
create (title_scenarios_before_scenario)-[:Improvement]->(scenario)
create (title_scenarios_Given_a_scenario_Given_a_scenario_scenario_title_run_the_scenario_run_the_scenario_see_the_same_title_same_title_)-[:Improvement]->(scenario)
create (same_title)-[:Bug]->(scenario)
create (title_scenarios)-[:Bug]->(scenario)
create (appear_in_output)-[:Improvement]->(scenario)
create (title_scenarios_before_scenario)-[:Improvement]->(scenario)
create (title_scenarios_Given_a_scenario_Given_a_scenario_scenario_title_run_the_scenario_run_the_scenario_see_the_same_title_same_title_)-[:Improvement]->(scenario)
create (common_failure:issue {name:'common failure'}) create (common_failure)-[:Bug]->(failed)
create (cause_of_failure:issue {name:'cause of failure'}) create (cause_of_failure)-[:Bug]->(failed)
create (upload_files:issue {name:'upload files'}) create (upload_files)-[:Improvement]->(failed)
create (exists_on_filesystem:issue {name:'exists on filesystem'}) create (exists_on_filesystem)-[:Improvement]->(failed)
create (upload_files_in_web_runner:issue {name:'upload files in web runner'}) create (upload_files_in_web_runner)-[:Improvement]->(failed)
create (File_upload_File_upload_failures_upload_failures_failures_in_web_web_runner_informative_Failures_upload_files_upload_files_in_web_files_in_web_web_runner_common_failure_common_failure_cause_failure_cause_upload_an_archive_upload_an_archive_unzipped_directory_unzipped_directory_structure_directory_structure_allow_overwrite_allow_overwrite_by_default_overwrite_by_default_upload_action_:issue {name:'File upload - File upload failures - upload failures - failures in web - web runner - informative Failures - upload files - upload files in web - files in web - web runner - common failure - common failure cause - failure cause - upload an archive - upload an archive - unzipped directory - unzipped directory structure - directory structure - allow overwrite - allow overwrite by default - overwrite by default - upload action - '}) create (File_upload_File_upload_failures_upload_failures_failures_in_web_web_runner_informative_Failures_upload_files_upload_files_in_web_files_in_web_web_runner_common_failure_common_failure_cause_failure_cause_upload_an_archive_upload_an_archive_unzipped_directory_unzipped_directory_structure_directory_structure_allow_overwrite_allow_overwrite_by_default_overwrite_by_default_upload_action_)-[:Bug]->(failed)
create (common_failure)-[:Bug]->(show)
create (cause_of_failure)-[:Bug]->(show)
create (upload_files)-[:Improvement]->(show)
create (exists_on_filesystem)-[:Improvement]->(show)
create (upload_files_in_web_runner)-[:Improvement]->(show)
create (File_upload_File_upload_failures_upload_failures_failures_in_web_web_runner_informative_Failures_upload_files_upload_files_in_web_files_in_web_web_runner_common_failure_common_failure_cause_failure_cause_upload_an_archive_upload_an_archive_unzipped_directory_unzipped_directory_structure_directory_structure_allow_overwrite_allow_overwrite_by_default_overwrite_by_default_upload_action_)-[:Bug]->(show)
create (Given_a_context_Given_a_context_:issue {name:'Given a context - Given a context - '}) create (outcome:class {name:'outcome', favoritecolor: 'green'}) create (Given_a_context_Given_a_context_)-[:Bug]->(outcome)
create (Given_a_context_Given_a_context_)-[:Bug]->(after)
create (Given_a_context_Given_a_context_)-[:Bug]->(outcome)
create (unpack_view:issue {name:'unpack view'}) create (unpack_view)-[:Bug]->(core)
create (default_to_jbehave_core:issue {name:'default to jbehave core'}) create (default_to_jbehave_core)-[:Bug]->(core)
create (Add_resources_goal:issue {name:'Add resources goal'}) create (Add_resources_goal)-[:Improvement]->(core)
create (unpack_resources_to_view_directory:issue {name:'unpack resources to view directory'}) create (unpack_resources_to_view_directory)-[:Improvement]->(core)
create (resources_goal_unpack_the_resources_unpack_the_resources_view_directory_main_advantage_dependency_plugin_derived_the_view_derived_the_view_view_directory_view_directory_location_directory_location_configured_StoryReporterBuilder_configured_as_normal_project_normal_project_normal_project_artifacts_project_artifacts_resource_dependency_resource_dependency_type_dependency_type_:issue {name:'resources goal - unpack the resources - unpack the resources - view directory - main advantage - dependency plugin - derived the view - derived the view - view directory - view directory location - directory location - configured StoryReporterBuilder - configured as normal project - normal project - normal project artifacts - project artifacts - resource dependency - resource dependency type - dependency type - '}) create (resources_goal_unpack_the_resources_unpack_the_resources_view_directory_main_advantage_dependency_plugin_derived_the_view_derived_the_view_view_directory_view_directory_location_directory_location_configured_StoryReporterBuilder_configured_as_normal_project_normal_project_normal_project_artifacts_project_artifacts_resource_dependency_resource_dependency_type_dependency_type_)-[:Improvement]->(core)
create (unpack_view)-[:Bug]->(maven)
create (default_to_jbehave_core)-[:Bug]->(maven)
create (Add_resources_goal)-[:Improvement]->(maven)
create (unpack_resources_to_view_directory)-[:Improvement]->(maven)
create (resources_goal_unpack_the_resources_unpack_the_resources_view_directory_main_advantage_dependency_plugin_derived_the_view_derived_the_view_view_directory_view_directory_location_directory_location_configured_StoryReporterBuilder_configured_as_normal_project_normal_project_normal_project_artifacts_project_artifacts_resource_dependency_resource_dependency_type_dependency_type_)-[:Improvement]->(maven)
create (unpack_view)-[:Bug]->(StoryReporterBuilder)
create (default_to_jbehave_core)-[:Bug]->(StoryReporterBuilder)
create (Add_resources_goal)-[:Improvement]->(StoryReporterBuilder)
create (unpack_resources_to_view_directory)-[:Improvement]->(StoryReporterBuilder)
create (resources_goal_unpack_the_resources_unpack_the_resources_view_directory_main_advantage_dependency_plugin_derived_the_view_derived_the_view_view_directory_view_directory_location_directory_location_configured_StoryReporterBuilder_configured_as_normal_project_normal_project_normal_project_artifacts_project_artifacts_resource_dependency_resource_dependency_type_dependency_type_)-[:Improvement]->(StoryReporterBuilder)
create (unpack_view)-[:Bug]->(StoryReporterBuilder)
create (default_to_jbehave_core)-[:Bug]->(StoryReporterBuilder)
create (Add_resources_goal)-[:Improvement]->(StoryReporterBuilder)
create (unpack_resources_to_view_directory)-[:Improvement]->(StoryReporterBuilder)
create (resources_goal_unpack_the_resources_unpack_the_resources_view_directory_main_advantage_dependency_plugin_derived_the_view_derived_the_view_view_directory_view_directory_location_directory_location_configured_StoryReporterBuilder_configured_as_normal_project_normal_project_normal_project_artifacts_project_artifacts_resource_dependency_resource_dependency_type_dependency_type_)-[:Improvement]->(StoryReporterBuilder)
create (unpack_view)-[:Bug]->(StoryReporterBuilder)
create (default_to_jbehave_core)-[:Bug]->(StoryReporterBuilder)
create (Add_resources_goal)-[:Improvement]->(StoryReporterBuilder)
create (unpack_resources_to_view_directory)-[:Improvement]->(StoryReporterBuilder)
create (resources_goal_unpack_the_resources_unpack_the_resources_view_directory_main_advantage_dependency_plugin_derived_the_view_derived_the_view_view_directory_view_directory_location_directory_location_configured_StoryReporterBuilder_configured_as_normal_project_normal_project_normal_project_artifacts_project_artifacts_resource_dependency_resource_dependency_type_dependency_type_)-[:Improvement]->(StoryReporterBuilder)
create (main_change:issue {name:'main change'}) create (main_change)-[:Bug]->(configuration)
create (Creation_of_new_parser:issue {name:'Creation of new parser'}) create (Creation_of_new_parser)-[:Bug]->(configuration)
create (support_tracking:issue {name:'support tracking'}) create (support_tracking)-[:Improvement]->(configuration)
create (running_in_OSGi_container:issue {name:'running in OSGi container'}) create (running_in_OSGi_container)-[:Improvement]->(configuration)
create (support_tracking_of_line_numbers:issue {name:'support tracking of line numbers'}) create (support_tracking_of_line_numbers)-[:Improvement]->(configuration)
create (main_change)-[:Bug]->(after)
create (Creation_of_new_parser)-[:Bug]->(after)
create (support_tracking)-[:Improvement]->(after)
create (running_in_OSGi_container)-[:Improvement]->(after)
create (support_tracking_of_line_numbers)-[:Improvement]->(after)
create (main_change)-[:Bug]->(ExamplesTable)
create (Creation_of_new_parser)-[:Bug]->(ExamplesTable)
create (support_tracking)-[:Improvement]->(ExamplesTable)
create (running_in_OSGi_container)-[:Improvement]->(ExamplesTable)
create (support_tracking_of_line_numbers)-[:Improvement]->(ExamplesTable)
create (invoke_setupteardown_methods_to_setup:issue {name:'invoke setupteardown methods to setup'}) create (invoke_setupteardown_methods_to_setup)-[:Bug]->(after)
create (invoke_setupteardown_methods_to_setup)-[:Bug]->(scenario)
create (invoke_setupteardown_methods_to_setup)-[:Bug]->(scenario)
create (default_inheritance:issue {name:'default inheritance'}) create (default_inheritance)-[:Bug]->(given)
create (Add_inherit:issue {name:'Add inherit'}) create (Add_inherit)-[:Bug]->(given)
create (is_By_inheritance_behaviour:issue {name:'is By inheritance behaviour'}) create (is_By_inheritance_behaviour)-[:Improvement]->(given)
create (Add_inherit_for_valued_annotation_property:issue {name:'Add inherit for valued annotation property'}) create (Add_inherit_for_valued_annotation_property)-[:Improvement]->(given)
create (consistent_Adopt:issue {name:'consistent Adopt'}) create (consistent_Adopt)-[:Bug]->(StoryReporterBuilder)
create (Adopt_convention_for_builder_methods:issue {name:'Adopt convention for builder methods'}) create (Adopt_convention_for_builder_methods)-[:Bug]->(StoryReporterBuilder)
create (specify_build_specification:issue {name:'specify build specification'}) create (specify_build_specification)-[:Improvement]->(StoryReporterBuilder)
create (StoryReporterBuilder_method_StoryReporterBuilder_method_names_method_names_builder_methods_specify_the_build_specify_the_build_build_specification_:issue {name:'StoryReporterBuilder method - StoryReporterBuilder method names - method names - builder methods - specify the build - specify the build - build specification - '}) create (StoryReporterBuilder_method_StoryReporterBuilder_method_names_method_names_builder_methods_specify_the_build_specify_the_build_build_specification_)-[:Improvement]->(StoryReporterBuilder)
create (consistent_Adopt)-[:Bug]->(StoryReporterBuilder)
create (Adopt_convention_for_builder_methods)-[:Bug]->(StoryReporterBuilder)
create (specify_build_specification)-[:Improvement]->(StoryReporterBuilder)
create (StoryReporterBuilder_method_StoryReporterBuilder_method_names_method_names_builder_methods_specify_the_build_specify_the_build_build_specification_)-[:Improvement]->(StoryReporterBuilder)
create (consistent_Adopt)-[:Bug]->(StoryReporterBuilder)
create (Adopt_convention_for_builder_methods)-[:Bug]->(StoryReporterBuilder)
create (specify_build_specification)-[:Improvement]->(StoryReporterBuilder)
create (StoryReporterBuilder_method_StoryReporterBuilder_method_names_method_names_builder_methods_specify_the_build_specify_the_build_build_specification_)-[:Improvement]->(StoryReporterBuilder)
create (story_files:issue {name:'story files'}) create (story_files)-[:Bug]->(core)
create (Spaces_in_Path:issue {name:'Spaces in Path'}) create (Spaces_in_Path)-[:Bug]->(core)
create (breaks_function_loadStoryAsTextfails:issue {name:'breaks function loadStoryAsTextfails'}) create (breaks_function_loadStoryAsTextfails)-[:Improvement]->(core)
create (add_to_jbehave_coresrctestjavaorgjbehavecoreiostories:issue {name:'add to jbehave coresrctestjavaorgjbehavecoreiostories'}) create (add_to_jbehave_coresrctestjavaorgjbehavecoreiostories)-[:Improvement]->(core)
create (throw_new_InvalidStoryResourcestoryPath_for_StoryFilePath_traversal_traversals:issue {name:'throw new InvalidStoryResourcestoryPath for StoryFilePath traversal traversals'}) create (throw_new_InvalidStoryResourcestoryPath_for_StoryFilePath_traversal_traversals)-[:Improvement]->(core)
create (story_files)-[:Bug]->(CodeLocations)
create (Spaces_in_Path)-[:Bug]->(CodeLocations)
create (breaks_function_loadStoryAsTextfails)-[:Improvement]->(CodeLocations)
create (add_to_jbehave_coresrctestjavaorgjbehavecoreiostories)-[:Improvement]->(CodeLocations)
create (throw_new_InvalidStoryResourcestoryPath_for_StoryFilePath_traversal_traversals)-[:Improvement]->(CodeLocations)
create (LoadFromRelativeFile:class {name:'LoadFromRelativeFile', favoritecolor: 'green'}) create (story_files)-[:Bug]->(LoadFromRelativeFile)
create (Spaces_in_Path)-[:Bug]->(LoadFromRelativeFile)
create (breaks_function_loadStoryAsTextfails)-[:Improvement]->(LoadFromRelativeFile)
create (add_to_jbehave_coresrctestjavaorgjbehavecoreiostories)-[:Improvement]->(LoadFromRelativeFile)
create (throw_new_InvalidStoryResourcestoryPath_for_StoryFilePath_traversal_traversals)-[:Improvement]->(LoadFromRelativeFile)
create (Hudson_Plugin:issue {name:'Hudson Plugin'}) create (Hudson_Plugin)-[:Bug]->(ant)
create (see_build_test_result:issue {name:'see build test result'}) create (see_build_test_result)-[:Bug]->(ant)
create (appear_in_build_test:issue {name:'appear in build test'}) create (appear_in_build_test)-[:Improvement]->(ant)
create (monitor_progress_of_stories:issue {name:'monitor progress of stories'}) create (monitor_progress_of_stories)-[:Improvement]->(ant)
create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_:issue {name:'build test - build test result - test result - failed scenarios - broke my build - want scenarios - pending steps - failed steps - see individual scenarios - individual scenarios - build graph - monitor progress - monitor progress of stories - progress of stories - build trend - build trend graph - trend graph - pending and successful - successful scenarios - monitor the stability - monitor the stability - '}) create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_)-[:Improvement]->(ant)
create (Hudson_Plugin)-[:Bug]->(failed)
create (see_build_test_result)-[:Bug]->(failed)
create (appear_in_build_test)-[:Improvement]->(failed)
create (monitor_progress_of_stories)-[:Improvement]->(failed)
create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_)-[:Improvement]->(failed)
create (Hudson_Plugin)-[:Bug]->(pending)
create (see_build_test_result)-[:Bug]->(pending)
create (appear_in_build_test)-[:Improvement]->(pending)
create (monitor_progress_of_stories)-[:Improvement]->(pending)
create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_)-[:Improvement]->(pending)
create (Hudson_Plugin)-[:Bug]->(scenario)
create (see_build_test_result)-[:Bug]->(scenario)
create (appear_in_build_test)-[:Improvement]->(scenario)
create (monitor_progress_of_stories)-[:Improvement]->(scenario)
create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_)-[:Improvement]->(scenario)
create (Hudson_Plugin)-[:Bug]->(pending)
create (see_build_test_result)-[:Bug]->(pending)
create (appear_in_build_test)-[:Improvement]->(pending)
create (monitor_progress_of_stories)-[:Improvement]->(pending)
create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_)-[:Improvement]->(pending)
create (Hudson_Plugin)-[:Bug]->(scenario)
create (see_build_test_result)-[:Bug]->(scenario)
create (appear_in_build_test)-[:Improvement]->(scenario)
create (monitor_progress_of_stories)-[:Improvement]->(scenario)
create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_)-[:Improvement]->(scenario)
create (Hudson_Plugin)-[:Bug]->(show)
create (see_build_test_result)-[:Bug]->(show)
create (appear_in_build_test)-[:Improvement]->(show)
create (monitor_progress_of_stories)-[:Improvement]->(show)
create (build_test_build_test_result_test_result_failed_scenarios_broke_my_build_want_scenarios_pending_steps_failed_steps_see_individual_scenarios_individual_scenarios_build_graph_monitor_progress_monitor_progress_of_stories_progress_of_stories_build_trend_build_trend_graph_trend_graph_pending_and_successful_successful_scenarios_monitor_the_stability_monitor_the_stability_)-[:Improvement]->(show)
create (Count_scenarios:issue {name:'Count scenarios'}) create (Count_scenarios)-[:Bug]->(given)
create (Count_scenarios_in_story:issue {name:'Count scenarios in story'}) create (Count_scenarios_in_story)-[:Bug]->(given)
create (counting_scenarios:issue {name:'counting scenarios'}) create (counting_scenarios)-[:Improvement]->(given)
create (displaying_number_of_scenarios:issue {name:'displaying number of scenarios'}) create (displaying_number_of_scenarios)-[:Improvement]->(given)
create (Count_scenarios_counting_scenarios_displaying_the_number_displaying_the_number_number_of_scenarios_including_int_:issue {name:'Count scenarios - counting scenarios - displaying the number - displaying the number - number of scenarios - including int - '}) create (Count_scenarios_counting_scenarios_displaying_the_number_displaying_the_number_number_of_scenarios_including_int_)-[:Improvement]->(given)
create (Count_scenarios)-[:Bug]->(scenario)
create (Count_scenarios_in_story)-[:Bug]->(scenario)
create (counting_scenarios)-[:Improvement]->(scenario)
create (displaying_number_of_scenarios)-[:Improvement]->(scenario)
create (Count_scenarios_counting_scenarios_displaying_the_number_displaying_the_number_number_of_scenarios_including_int_)-[:Improvement]->(scenario)
create (Count_scenarios)-[:Bug]->(scenario)
create (Count_scenarios_in_story)-[:Bug]->(scenario)
create (counting_scenarios)-[:Improvement]->(scenario)
create (displaying_number_of_scenarios)-[:Improvement]->(scenario)
create (Count_scenarios_counting_scenarios_displaying_the_number_displaying_the_number_number_of_scenarios_including_int_)-[:Improvement]->(scenario)
create (Count_scenarios)-[:Bug]->(GivenStories)
create (Count_scenarios_in_story)-[:Bug]->(GivenStories)
create (counting_scenarios)-[:Improvement]->(GivenStories)
create (displaying_number_of_scenarios)-[:Improvement]->(GivenStories)
create (Count_scenarios_counting_scenarios_displaying_the_number_displaying_the_number_number_of_scenarios_including_int_)-[:Improvement]->(GivenStories)
create (complete_Failures:issue {name:'complete Failures'}) create (complete_Failures)-[:Bug]->(scenario)
create (complete_Failures)-[:Bug]->(scenario)
create (Merge_story:issue {name:'Merge story'}) create (Merge_story)-[:Bug]->(configuration)
create (Consolidate_configuration:issue {name:'Consolidate configuration'}) create (Consolidate_configuration)-[:Bug]->(configuration)
create (be_by_controls:issue {name:'be by controls'}) create (be_by_controls)-[:Improvement]->(configuration)
create (objects_story_configurations_into_single_Configuration_object:issue {name:'objects story configurations into single Configuration object'}) create (objects_story_configurations_into_single_Configuration_object)-[:Improvement]->(configuration)
create (Consolidate_configuration_story_and_steps_story_and_steps_configurations_steps_configurations_single_Configuration_single_Configuration_object_Configuration_object_use_the_builder_use_the_builder_builder_pattern_embedder_controls_main_configuration_main_configuration_object_configuration_object_upstream_entry_upstream_entry_points_entry_points_:issue {name:'Consolidate configuration - story and steps - story and steps configurations - steps configurations - single Configuration - single Configuration object - Configuration object - use the builder - use the builder - builder pattern - embedder controls - main configuration - main configuration object - configuration object - upstream entry - upstream entry points - entry points - '}) create (Consolidate_configuration_story_and_steps_story_and_steps_configurations_steps_configurations_single_Configuration_single_Configuration_object_Configuration_object_use_the_builder_use_the_builder_builder_pattern_embedder_controls_main_configuration_main_configuration_object_configuration_object_upstream_entry_upstream_entry_points_entry_points_)-[:Improvement]->(configuration)
create (Merge_story)-[:Bug]->(embedder)
create (Consolidate_configuration)-[:Bug]->(embedder)
create (be_by_controls)-[:Improvement]->(embedder)
create (objects_story_configurations_into_single_Configuration_object)-[:Improvement]->(embedder)
create (Consolidate_configuration_story_and_steps_story_and_steps_configurations_steps_configurations_single_Configuration_single_Configuration_object_Configuration_object_use_the_builder_use_the_builder_builder_pattern_embedder_controls_main_configuration_main_configuration_object_configuration_object_upstream_entry_upstream_entry_points_entry_points_)-[:Improvement]->(embedder)
create (Story_reporter:issue {name:'Story reporter'}) create (Story_reporter)-[:Bug]->(narrative)
create (Story_reporter_in_XML_format:issue {name:'Story reporter in XML format'}) create (Story_reporter_in_XML_format)-[:Bug]->(narrative)
create (include_story_narrative:issue {name:'include story narrative'}) create (include_story_narrative)-[:Improvement]->(narrative)
create (include_story_narrative_in_story_attribute_report_builder:issue {name:'include story narrative in story attribute report builder'}) create (include_story_narrative_in_story_attribute_report_builder)-[:Improvement]->(narrative)
create (Story_reporter_XML_format_include_the_story_include_the_story_story_narrative_story_title_attribute_XML_attribute_XML_report_XML_report_XML_report_builder_report_builder_produces_a_report_produces_a_report_executed_story_contains_a_narrative_contains_a_narrative_executed_story_contain_a_narrative_contain_a_narrative_expect_a_story_expect_a_story_story_narrative_contains_no_narrative_contains_no_narrative_Attached_testcase_x_versions_:issue {name:'Story reporter - XML format - include the story - include the story - story narrative - story title - attribute XML - attribute XML report - XML report - XML report builder - report builder - produces a report - produces a report - executed story - contains a narrative - contains a narrative - executed story - contain a narrative - contain a narrative - expect a story - expect a story - story narrative - contains no narrative - contains no narrative - Attached testcase - x versions - '}) create (Story_reporter_XML_format_include_the_story_include_the_story_story_narrative_story_title_attribute_XML_attribute_XML_report_XML_report_XML_report_builder_report_builder_produces_a_report_produces_a_report_executed_story_contains_a_narrative_contains_a_narrative_executed_story_contain_a_narrative_contain_a_narrative_expect_a_story_expect_a_story_story_narrative_contains_no_narrative_contains_no_narrative_Attached_testcase_x_versions_)-[:Improvement]->(narrative)
create (Story_reporter)-[:Bug]->(narrative)
create (Story_reporter_in_XML_format)-[:Bug]->(narrative)
create (include_story_narrative)-[:Improvement]->(narrative)
create (include_story_narrative_in_story_attribute_report_builder)-[:Improvement]->(narrative)
create (Story_reporter_XML_format_include_the_story_include_the_story_story_narrative_story_title_attribute_XML_attribute_XML_report_XML_report_XML_report_builder_report_builder_produces_a_report_produces_a_report_executed_story_contains_a_narrative_contains_a_narrative_executed_story_contain_a_narrative_contain_a_narrative_expect_a_story_expect_a_story_story_narrative_contains_no_narrative_contains_no_narrative_Attached_testcase_x_versions_)-[:Improvement]->(narrative)
create (annotation_processor:issue {name:'annotation processor'}) create (SpringStepsFactory:class {name:'SpringStepsFactory', favoritecolor: 'green'}) create (annotation_processor)-[:Bug]->(SpringStepsFactory)
create (catch_around_getBean_step:issue {name:'catch around getBean step'}) create (catch_around_getBean_step)-[:Bug]->(SpringStepsFactory)
create (ignore_beans:issue {name:'ignore beans'}) create (ignore_beans)-[:Improvement]->(SpringStepsFactory)
create (ignore_beans_with_undefined_type:issue {name:'ignore beans with undefined type'}) create (ignore_beans_with_undefined_type)-[:Improvement]->(SpringStepsFactory)
create (ignore_beans_undefined_type_fail_instantiation_use_abstract_beans_abstract_beans_annotation_processor_included_a_patch_included_a_patch_try_catch_getBean_step_Test_data_recreate_problem_:issue {name:'ignore beans - undefined type - fail instantiation - use abstract beans - abstract beans - annotation processor - included a patch - included a patch - try catch - getBean step - Test data - recreate problem - '}) create (ignore_beans_undefined_type_fail_instantiation_use_abstract_beans_abstract_beans_annotation_processor_included_a_patch_included_a_patch_try_catch_getBean_step_Test_data_recreate_problem_)-[:Improvement]->(SpringStepsFactory)
create (default_resource:issue {name:'default resource'}) create (default_resource)-[:Bug]->(configuration)
create (load_content:issue {name:'load content'}) create (load_content)-[:Bug]->(configuration)
create (be_At_times:issue {name:'be At times'}) create (be_At_times)-[:Improvement]->(configuration)
create (load_content_of_examples_table:issue {name:'load content of examples table'}) create (load_content_of_examples_table)-[:Improvement]->(configuration)
create (loaded_from_external_resources_external_resources_resources_At_times_load_the_content_load_the_content_examples_table_external_resource_classpath_or_URL_default_resource_default_resource_loader_resource_loader_based_one_require_any_additional_configuration_additional_configuration_based_one_requires_the_class_requires_the_class_derive_the_classloader_derive_the_classloader_handle_both_cases_handle_both_cases_textual_table_textual_table_input_table_input_input_or_resource_input_or_resource_path_resource_path_resource_path_input_path_input_allow_the_use_allow_the_use_:issue {name:'loaded from external resources - external resources - resources At times - load the content - load the content - examples table - external resource - classpath or URL - default resource - default resource loader - resource loader - based one - require any additional configuration - additional configuration - based one - requires the class - requires the class - derive the classloader - derive the classloader - handle both cases - handle both cases - textual table - textual table input - table input - input or resource - input or resource path - resource path - resource path input - path input - allow the use - allow the use - '}) create (loaded_from_external_resources_external_resources_resources_At_times_load_the_content_load_the_content_examples_table_external_resource_classpath_or_URL_default_resource_default_resource_loader_resource_loader_based_one_require_any_additional_configuration_additional_configuration_based_one_requires_the_class_requires_the_class_derive_the_classloader_derive_the_classloader_handle_both_cases_handle_both_cases_textual_table_textual_table_input_table_input_input_or_resource_input_or_resource_path_resource_path_resource_path_input_path_input_allow_the_use_allow_the_use_)-[:Improvement]->(configuration)
create (default_resource)-[:Bug]->(ExamplesTable)
create (load_content)-[:Bug]->(ExamplesTable)
create (be_At_times)-[:Improvement]->(ExamplesTable)
create (load_content_of_examples_table)-[:Improvement]->(ExamplesTable)
create (loaded_from_external_resources_external_resources_resources_At_times_load_the_content_load_the_content_examples_table_external_resource_classpath_or_URL_default_resource_default_resource_loader_resource_loader_based_one_require_any_additional_configuration_additional_configuration_based_one_requires_the_class_requires_the_class_derive_the_classloader_derive_the_classloader_handle_both_cases_handle_both_cases_textual_table_textual_table_input_table_input_input_or_resource_input_or_resource_path_resource_path_resource_path_input_path_input_allow_the_use_allow_the_use_)-[:Improvement]->(ExamplesTable)
create (single_story:issue {name:'single story'}) create (single_story)-[:Bug]->(failed)
create (Allow_scenarios:issue {name:'Allow scenarios'}) create (Allow_scenarios)-[:Bug]->(failed)
create (skip_scenarios_in_single_story:issue {name:'skip scenarios in single story'}) create (skip_scenarios_in_single_story)-[:Improvement]->(failed)
create (Allow_scenarios_failed_scenarios_single_story_skip_scenarios_failed_scenario_single_story_:issue {name:'Allow scenarios - failed scenarios - single story - skip scenarios - failed scenario - single story - '}) create (Allow_scenarios_failed_scenarios_single_story_skip_scenarios_failed_scenario_single_story_)-[:Improvement]->(failed)
create (single_story)-[:Bug]->(scenario)
create (Allow_scenarios)-[:Bug]->(scenario)
create (skip_scenarios_in_single_story)-[:Improvement]->(scenario)
create (Allow_scenarios_failed_scenarios_single_story_skip_scenarios_failed_scenario_single_story_)-[:Improvement]->(scenario)
create (single_story)-[:Bug]->(scenario)
create (Allow_scenarios)-[:Bug]->(scenario)
create (skip_scenarios_in_single_story)-[:Improvement]->(scenario)
create (Allow_scenarios_failed_scenarios_single_story_skip_scenarios_failed_scenario_single_story_)-[:Improvement]->(scenario)
create (Allow_filtering:issue {name:'Allow filtering'}) create (Allow_filtering)-[:Bug]->(meta)
create (Allow_filtering_of_stories:issue {name:'Allow filtering of stories'}) create (Allow_filtering_of_stories)-[:Bug]->(meta)
create (Allow_filtering_Allow_filtering_of_stories_filtering_of_stories_stories_and_scenarios_stories_and_scenarios_use_this_info_use_this_info_:issue {name:'Allow filtering - Allow filtering of stories - filtering of stories - stories and scenarios - stories and scenarios - use this info - use this info - '}) create (Allow_filtering_Allow_filtering_of_stories_filtering_of_stories_stories_and_scenarios_stories_and_scenarios_use_this_info_use_this_info_)-[:Improvement]->(meta)
create (Allow_filtering)-[:Bug]->(meta)
create (Allow_filtering_of_stories)-[:Bug]->(meta)
create (Allow_filtering_Allow_filtering_of_stories_filtering_of_stories_stories_and_scenarios_stories_and_scenarios_use_this_info_use_this_info_)-[:Improvement]->(meta)
create (Allow_filtering)-[:Bug]->(scenario)
create (Allow_filtering_of_stories)-[:Bug]->(scenario)
create (Allow_filtering_Allow_filtering_of_stories_filtering_of_stories_stories_and_scenarios_stories_and_scenarios_use_this_info_use_this_info_)-[:Improvement]->(scenario)
create (Allow_filtering)-[:Bug]->(scenario)
create (Allow_filtering_of_stories)-[:Bug]->(scenario)
create (Allow_filtering_Allow_filtering_of_stories_filtering_of_stories_stories_and_scenarios_stories_and_scenarios_use_this_info_use_this_info_)-[:Improvement]->(scenario)
create (runnable_stories:issue {name:'runnable stories'}) create (runnable_stories)-[:Bug]->(given)
create (finding_story_paths:issue {name:'finding story paths'}) create (finding_story_paths)-[:Bug]->(given)
create (finding_in_different_guises:issue {name:'finding in different guises'}) create (finding_in_different_guises)-[:Improvement]->(given)
create (allow_finding_of_textual_story_paths:issue {name:'allow finding of textual story paths'}) create (allow_finding_of_textual_story_paths)-[:Improvement]->(given)
create (finding_story_finding_story_paths_story_paths_runnable_stories_finding_in_different_guises_different_guises_allow_the_finding_allow_the_finding_textual_story_textual_story_paths_story_paths_base_search_base_search_dir_search_dir_using_includeexclude_patterns_includeexclude_patterns_given_prefix_created_URL_based_paths_story_paths_normalised_paths_allow_the_finding_allow_the_finding_java_sources_sources_and_creation_given_EmbedderClassLoader_:issue {name:'finding story - finding story paths - story paths - runnable stories - finding in different guises - different guises - allow the finding - allow the finding - textual story - textual story paths - story paths - base search - base search dir - search dir - using includeexclude patterns - includeexclude patterns - given prefix - created URL - based paths - story paths - normalised paths - allow the finding - allow the finding - java sources - sources and creation - given EmbedderClassLoader - '}) create (finding_story_finding_story_paths_story_paths_runnable_stories_finding_in_different_guises_different_guises_allow_the_finding_allow_the_finding_textual_story_textual_story_paths_story_paths_base_search_base_search_dir_search_dir_using_includeexclude_patterns_includeexclude_patterns_given_prefix_created_URL_based_paths_story_paths_normalised_paths_allow_the_finding_allow_the_finding_java_sources_sources_and_creation_given_EmbedderClassLoader_)-[:Improvement]->(given)
create (EmbedderClassLoader:class {name:'EmbedderClassLoader', favoritecolor: 'green'}) create (runnable_stories)-[:Bug]->(EmbedderClassLoader)
create (finding_story_paths)-[:Bug]->(EmbedderClassLoader)
create (finding_in_different_guises)-[:Improvement]->(EmbedderClassLoader)
create (allow_finding_of_textual_story_paths)-[:Improvement]->(EmbedderClassLoader)
create (finding_story_finding_story_paths_story_paths_runnable_stories_finding_in_different_guises_different_guises_allow_the_finding_allow_the_finding_textual_story_textual_story_paths_story_paths_base_search_base_search_dir_search_dir_using_includeexclude_patterns_includeexclude_patterns_given_prefix_created_URL_based_paths_story_paths_normalised_paths_allow_the_finding_allow_the_finding_java_sources_sources_and_creation_given_EmbedderClassLoader_)-[:Improvement]->(EmbedderClassLoader)
create (StoryFinder:class {name:'StoryFinder', favoritecolor: 'green'}) create (runnable_stories)-[:Bug]->(StoryFinder)
create (finding_story_paths)-[:Bug]->(StoryFinder)
create (finding_in_different_guises)-[:Improvement]->(StoryFinder)
create (allow_finding_of_textual_story_paths)-[:Improvement]->(StoryFinder)
create (finding_story_finding_story_paths_story_paths_runnable_stories_finding_in_different_guises_different_guises_allow_the_finding_allow_the_finding_textual_story_textual_story_paths_story_paths_base_search_base_search_dir_search_dir_using_includeexclude_patterns_includeexclude_patterns_given_prefix_created_URL_based_paths_story_paths_normalised_paths_allow_the_finding_allow_the_finding_java_sources_sources_and_creation_given_EmbedderClassLoader_)-[:Improvement]->(StoryFinder)
create (parameter_in_table:issue {name:'parameter in table'}) create (parameter_in_table)-[:Bug]->(scenario)
create (demonstrate_problem:issue {name:'demonstrate problem'}) create (demonstrate_problem)-[:Improvement]->(scenario)
create (is_in_failure_case:issue {name:'is in failure case'}) create (is_in_failure_case)-[:Improvement]->(scenario)
create (close_Response_in_fact:issue {name:'close Response in fact'}) create (close_Response_in_fact)-[:Improvement]->(scenario)
create (parameter_in_table)-[:Bug]->(scenario)
create (demonstrate_problem)-[:Improvement]->(scenario)
create (is_in_failure_case)-[:Improvement]->(scenario)
create (close_Response_in_fact)-[:Improvement]->(scenario)
create (parameter_in_table)-[:Bug]->(close)
create (demonstrate_problem)-[:Improvement]->(close)
create (is_in_failure_case)-[:Improvement]->(close)
create (close_Response_in_fact)-[:Improvement]->(close)
create (Rename_RunnableStory:issue {name:'Rename RunnableStory'}) create (Rename_RunnableStory)-[:Bug]->(ant)
create (remove_redundant_methods:issue {name:'remove redundant methods'}) create (remove_redundant_methods)-[:Bug]->(ant)
create (remain_in_Embeddable:issue {name:'remain in Embeddable'}) create (remain_in_Embeddable)-[:Improvement]->(ant)
create (have_access_to_other_Embedder_functionality:issue {name:'have access to other Embedder functionality'}) create (have_access_to_other_Embedder_functionality)-[:Improvement]->(ant)
create (remove_redundant_methods_redundant_methods_reflect_the_fact_reflect_the_fact_run_multiple_stories_multiple_stories_have_access_generic_name_void_run_other_methods_live_in_abstract_implementations_abstract_implementations_allows_the_configuration_allows_the_configuration_embedder_for_execution_single_story_:issue {name:'remove redundant methods - redundant methods - reflect the fact - reflect the fact - run multiple stories - multiple stories - have access - generic name - void run - other methods - live in abstract implementations - abstract implementations - allows the configuration - allows the configuration - embedder for execution - single story - '}) create (remove_redundant_methods_redundant_methods_reflect_the_fact_reflect_the_fact_run_multiple_stories_multiple_stories_have_access_generic_name_void_run_other_methods_live_in_abstract_implementations_abstract_implementations_allows_the_configuration_allows_the_configuration_embedder_for_execution_single_story_)-[:Improvement]->(ant)
create (Rename_RunnableStory)-[:Bug]->(configuration)
create (remove_redundant_methods)-[:Bug]->(configuration)
create (remain_in_Embeddable)-[:Improvement]->(configuration)
create (have_access_to_other_Embedder_functionality)-[:Improvement]->(configuration)
create (remove_redundant_methods_redundant_methods_reflect_the_fact_reflect_the_fact_run_multiple_stories_multiple_stories_have_access_generic_name_void_run_other_methods_live_in_abstract_implementations_abstract_implementations_allows_the_configuration_allows_the_configuration_embedder_for_execution_single_story_)-[:Improvement]->(configuration)
create (useEmbedder:class {name:'useEmbedder', favoritecolor: 'green'}) create (Rename_RunnableStory)-[:Bug]->(useEmbedder)
create (remove_redundant_methods)-[:Bug]->(useEmbedder)
create (remain_in_Embeddable)-[:Improvement]->(useEmbedder)
create (have_access_to_other_Embedder_functionality)-[:Improvement]->(useEmbedder)
create (remove_redundant_methods_redundant_methods_reflect_the_fact_reflect_the_fact_run_multiple_stories_multiple_stories_have_access_generic_name_void_run_other_methods_live_in_abstract_implementations_abstract_implementations_allows_the_configuration_allows_the_configuration_embedder_for_execution_single_story_)-[:Improvement]->(useEmbedder)
create (Rename_RunnableStory)-[:Bug]->(useEmbedder)
create (remove_redundant_methods)-[:Bug]->(useEmbedder)
create (remain_in_Embeddable)-[:Improvement]->(useEmbedder)
create (have_access_to_other_Embedder_functionality)-[:Improvement]->(useEmbedder)
create (remove_redundant_methods_redundant_methods_reflect_the_fact_reflect_the_fact_run_multiple_stories_multiple_stories_have_access_generic_name_void_run_other_methods_live_in_abstract_implementations_abstract_implementations_allows_the_configuration_allows_the_configuration_embedder_for_execution_single_story_)-[:Improvement]->(useEmbedder)
create (Rename_RunnableStory)-[:Bug]->(embedder)
create (remove_redundant_methods)-[:Bug]->(embedder)
create (remain_in_Embeddable)-[:Improvement]->(embedder)
create (have_access_to_other_Embedder_functionality)-[:Improvement]->(embedder)
create (remove_redundant_methods_redundant_methods_reflect_the_fact_reflect_the_fact_run_multiple_stories_multiple_stories_have_access_generic_name_void_run_other_methods_live_in_abstract_implementations_abstract_implementations_allows_the_configuration_allows_the_configuration_embedder_for_execution_single_story_)-[:Improvement]->(embedder)
create (Rename_RunnableStory)-[:Bug]->(JUnitStory)
create (remove_redundant_methods)-[:Bug]->(JUnitStory)
create (remain_in_Embeddable)-[:Improvement]->(JUnitStory)
create (have_access_to_other_Embedder_functionality)-[:Improvement]->(JUnitStory)
create (remove_redundant_methods_redundant_methods_reflect_the_fact_reflect_the_fact_run_multiple_stories_multiple_stories_have_access_generic_name_void_run_other_methods_live_in_abstract_implementations_abstract_implementations_allows_the_configuration_allows_the_configuration_embedder_for_execution_single_story_)-[:Improvement]->(JUnitStory)
create (first_scenario:issue {name:'first scenario'}) create (first_scenario)-[:Bug]->(scenario)
create (execute_scenarios:issue {name:'execute scenarios'}) create (execute_scenarios)-[:Bug]->(scenario)
create (execute_scenarios_within_story:issue {name:'execute scenarios within story'}) create (execute_scenarios_within_story)-[:Improvement]->(scenario)
create (execute_all_scenarios_execute_all_scenarios_Given_a_story_Given_a_story_first_scenario_second_scenario_:issue {name:'execute all scenarios - execute all scenarios - Given a story - Given a story - first scenario - second scenario - '}) create (execute_all_scenarios_execute_all_scenarios_Given_a_story_Given_a_story_first_scenario_second_scenario_)-[:Improvement]->(scenario)
create (first_scenario)-[:Bug]->(scenario)
create (execute_scenarios)-[:Bug]->(scenario)
create (execute_scenarios_within_story)-[:Improvement]->(scenario)
create (execute_all_scenarios_execute_all_scenarios_Given_a_story_Given_a_story_first_scenario_second_scenario_)-[:Improvement]->(scenario)
create (first_scenario)-[:Bug]->(GivenStory)
create (execute_scenarios)-[:Bug]->(GivenStory)
create (execute_scenarios_within_story)-[:Improvement]->(GivenStory)
create (execute_all_scenarios_execute_all_scenarios_Given_a_story_Given_a_story_first_scenario_second_scenario_)-[:Improvement]->(GivenStory)
create (rendering_of_newlines:issue {name:'rendering of newlines'}) create (rendering_of_newlines)-[:Bug]->(ExamplesTable)
create (outputting_example_tables:issue {name:'outputting example tables'}) create (outputting_example_tables)-[:Bug]->(ExamplesTable)
create (outputting_example_tables_as_parameters:issue {name:'outputting example tables as parameters'}) create (outputting_example_tables_as_parameters)-[:Improvement]->(ExamplesTable)
create (rendering_of_newlines_parameter_in_HTML_outputting_example_outputting_example_tables_example_tables_tables_as_parameters_newlines_between_rows_:issue {name:'rendering of newlines - parameter in HTML - outputting example - outputting example tables - example tables - tables as parameters - newlines between rows - '}) create (rendering_of_newlines_parameter_in_HTML_outputting_example_outputting_example_tables_example_tables_tables_as_parameters_newlines_between_rows_)-[:Improvement]->(ExamplesTable)
create (JDK_annotation:issue {name:'JDK annotation'}) create (JDK_annotation)-[:Bug]->(core)
create (functionality_Use_of_javassist:issue {name:'functionality Use of javassist'}) create (functionality_Use_of_javassist)-[:Bug]->(core)
create (Remove_dependency:issue {name:'Remove dependency'}) create (Remove_dependency)-[:Improvement]->(core)
create (parsing_over_large_set:issue {name:'parsing over large set'}) create (parsing_over_large_set)-[:Improvement]->(core)
create (Remove_dependency_on_javassist:issue {name:'Remove dependency on javassist'}) create (Remove_dependency_on_javassist)-[:Improvement]->(core)
create (Remove_dependency_annotation_functionality_large_set_set_of_classes_load_the_class_load_the_class_have_those_use_have_those_use_use_cases_eliminate_the_javassist_eliminate_the_javassist_javassist_dependency_New_version_andor_superclasses_remove_the_dependency_remove_the_dependency_:issue {name:'Remove dependency - annotation functionality - large set - set of classes - load the class - load the class - have those use - have those use - use cases - eliminate the javassist - eliminate the javassist - javassist dependency - New version - andor superclasses - remove the dependency - remove the dependency - '}) create (Remove_dependency_annotation_functionality_large_set_set_of_classes_load_the_class_load_the_class_have_those_use_have_those_use_use_cases_eliminate_the_javassist_eliminate_the_javassist_javassist_dependency_New_version_andor_superclasses_remove_the_dependency_remove_the_dependency_)-[:Bug]->(core)
create (JDK_annotation)-[:Bug]->(ant)
create (functionality_Use_of_javassist)-[:Bug]->(ant)
create (Remove_dependency)-[:Improvement]->(ant)
create (parsing_over_large_set)-[:Improvement]->(ant)
create (Remove_dependency_on_javassist)-[:Improvement]->(ant)
create (Remove_dependency_annotation_functionality_large_set_set_of_classes_load_the_class_load_the_class_have_those_use_have_those_use_use_cases_eliminate_the_javassist_eliminate_the_javassist_javassist_dependency_New_version_andor_superclasses_remove_the_dependency_remove_the_dependency_)-[:Bug]->(ant)
create (getAnnotation:class {name:'getAnnotation', favoritecolor: 'green'}) create (JDK_annotation)-[:Bug]->(getAnnotation)
create (functionality_Use_of_javassist)-[:Bug]->(getAnnotation)
create (Remove_dependency)-[:Improvement]->(getAnnotation)
create (parsing_over_large_set)-[:Improvement]->(getAnnotation)
create (Remove_dependency_on_javassist)-[:Improvement]->(getAnnotation)
create (Remove_dependency_annotation_functionality_large_set_set_of_classes_load_the_class_load_the_class_have_those_use_have_those_use_use_cases_eliminate_the_javassist_eliminate_the_javassist_javassist_dependency_New_version_andor_superclasses_remove_the_dependency_remove_the_dependency_)-[:Bug]->(getAnnotation)
create (meta_info:issue {name:'meta info'}) create (meta_info)-[:Bug]->(ant)
create (swimlane_view_with_one_lane:issue {name:'swimlane view with one lane'}) create (swimlane_view_with_one_lane)-[:Bug]->(ant)
create (get_visibility:issue {name:'get visibility'}) create (get_visibility)-[:Improvement]->(ant)
create (get_visibility_of_themesepics:issue {name:'get visibility of themesepics'}) create (get_visibility_of_themesepics)-[:Improvement]->(ant)
create (view_in_order_get_visibility_get_visibility_of_themesepics_visibility_of_themesepics_release_planner_map_stories_meta_filters_Using_story_Using_story_maps_story_maps_group_stories__cutting_concerns_cutting_concerns_using_filters_meta_info_meta_info_JBEHAVE__info_JBEHAVE__swimlane_view_lane_per_filter_clear_and_concise_concise_view_:issue {name:'view In order - get visibility - get visibility of themesepics - visibility of themesepics - release planner - map stories - meta filters - Using story - Using story maps - story maps - group stories - -cutting concerns - cutting concerns - using filters - meta info - meta info JBEHAVE- - info JBEHAVE- - swimlane view - lane per filter - clear and concise - concise view - '}) create (view_in_order_get_visibility_get_visibility_of_themesepics_visibility_of_themesepics_release_planner_map_stories_meta_filters_Using_story_Using_story_maps_story_maps_group_stories__cutting_concerns_cutting_concerns_using_filters_meta_info_meta_info_JBEHAVE__info_JBEHAVE__swimlane_view_lane_per_filter_clear_and_concise_concise_view_)-[:Improvement]->(ant)
create (meta_info)-[:Bug]->(meta)
create (swimlane_view_with_one_lane)-[:Bug]->(meta)
create (get_visibility)-[:Improvement]->(meta)
create (get_visibility_of_themesepics)-[:Improvement]->(meta)
create (view_in_order_get_visibility_get_visibility_of_themesepics_visibility_of_themesepics_release_planner_map_stories_meta_filters_Using_story_Using_story_maps_story_maps_group_stories__cutting_concerns_cutting_concerns_using_filters_meta_info_meta_info_JBEHAVE__info_JBEHAVE__swimlane_view_lane_per_filter_clear_and_concise_concise_view_)-[:Improvement]->(meta)
create (meta_info)-[:Bug]->(meta)
create (swimlane_view_with_one_lane)-[:Bug]->(meta)
create (get_visibility)-[:Improvement]->(meta)
create (get_visibility_of_themesepics)-[:Improvement]->(meta)
create (view_in_order_get_visibility_get_visibility_of_themesepics_visibility_of_themesepics_release_planner_map_stories_meta_filters_Using_story_Using_story_maps_story_maps_group_stories__cutting_concerns_cutting_concerns_using_filters_meta_info_meta_info_JBEHAVE__info_JBEHAVE__swimlane_view_lane_per_filter_clear_and_concise_concise_view_)-[:Improvement]->(meta)
create (leading_spaces:issue {name:'leading spaces'}) create (leading_spaces)-[:Bug]->(ExamplesTable)
create (use_example_tables:issue {name:'use example tables'}) create (use_example_tables)-[:Bug]->(ExamplesTable)
create (Allow_In_JBehave_Core:issue {name:'Allow In JBehave Core'}) create (Allow_In_JBehave_Core)-[:Improvement]->(ExamplesTable)
create (containing_cells_with_leadingtrailing_spaces:issue {name:'containing cells with leadingtrailing spaces'}) create (containing_cells_with_leadingtrailing_spaces)-[:Improvement]->(ExamplesTable)
create (trailing_spaces_example_table_example_table_cells_table_cells_trailing_spaces_example_table_example_table_cells_table_cells_ExamplesTable_API_following_table__X__X__X__regression_cause_use_example_use_example_tables_example_tables_containing_cells_containing_cells_with_leadingtrailing_cells_with_leadingtrailing_leadingtrailing_spaces_:issue {name:'trailing spaces - example table - example table cells - table cells - trailing spaces - example table - example table cells - table cells - ExamplesTable API - following table - | |X - | |X | - |X | - regression cause - use example - use example tables - example tables - containing cells - containing cells with leadingtrailing - cells with leadingtrailing - leadingtrailing spaces - '}) create (trailing_spaces_example_table_example_table_cells_table_cells_trailing_spaces_example_table_example_table_cells_table_cells_ExamplesTable_API_following_table__X__X__X__regression_cause_use_example_use_example_tables_example_tables_containing_cells_containing_cells_with_leadingtrailing_cells_with_leadingtrailing_leadingtrailing_spaces_)-[:Improvement]->(ExamplesTable)
create (Ensure_ExamplesTable:issue {name:'Ensure ExamplesTable'}) create (Ensure_ExamplesTable)-[:Bug]->(ExamplesTable)
create (guarantee_order:issue {name:'guarantee order'}) create (guarantee_order)-[:Bug]->(ExamplesTable)
create (ordering_of_columns:issue {name:'ordering of columns'}) create (ordering_of_columns)-[:Improvement]->(ExamplesTable)
create (guarantee_order_of_columns:issue {name:'guarantee order of columns'}) create (guarantee_order_of_columns)-[:Improvement]->(ExamplesTable)
create (guarantee_order_preserving_the_order_preserving_the_order_textual_table_preserve_the_ordering_preserve_the_ordering_small_cost_cost_of_performance_:issue {name:'guarantee order - preserving the order - preserving the order - textual table - preserve the ordering - preserve the ordering - small cost - cost of performance - '}) create (guarantee_order_preserving_the_order_preserving_the_order_textual_table_preserve_the_ordering_preserve_the_ordering_small_cost_cost_of_performance_)-[:Improvement]->(ExamplesTable)
create (Rename_failure:issue {name:'Rename failure'}) create (FailureStrategy:class {name:'FailureStrategy', favoritecolor: 'green'}) create (Rename_failure)-[:Bug]->(FailureStrategy)
create (handling_strategies:issue {name:'handling strategies'}) create (handling_strategies)-[:Bug]->(FailureStrategy)
create (implement_as_standalone_classes:issue {name:'implement as standalone classes'}) create (implement_as_standalone_classes)-[:Improvement]->(FailureStrategy)
create (Rename_failure_handling_strategies_implement_as_standalone_classes_standalone_classes_standalone_classes_anonymous_classes_allow_for_more_control_more_control_extend_the_strategy_extend_the_strategy_:issue {name:'Rename failure - handling strategies - implement as standalone classes - standalone classes - standalone classes - anonymous classes - allow for more control - more control - extend the strategy - extend the strategy - '}) create (Rename_failure_handling_strategies_implement_as_standalone_classes_standalone_classes_standalone_classes_anonymous_classes_allow_for_more_control_more_control_extend_the_strategy_extend_the_strategy_)-[:Improvement]->(FailureStrategy)
create (PendingStepStrategy:class {name:'PendingStepStrategy', favoritecolor: 'green'}) create (Rename_failure)-[:Bug]->(PendingStepStrategy)
create (handling_strategies)-[:Bug]->(PendingStepStrategy)
create (implement_as_standalone_classes)-[:Improvement]->(PendingStepStrategy)
create (Rename_failure_handling_strategies_implement_as_standalone_classes_standalone_classes_standalone_classes_anonymous_classes_allow_for_more_control_more_control_extend_the_strategy_extend_the_strategy_)-[:Improvement]->(PendingStepStrategy)
create (different_class:issue {name:'different class'}) create (different_class)-[:Bug]->(org_jbehave_core)
create (Ensure_same_instance:issue {name:'Ensure same instance'}) create (Ensure_same_instance)-[:Improvement]->(org_jbehave_core)
create (running_under_maven_plugin:issue {name:'running under maven plugin'}) create (running_under_maven_plugin)-[:Improvement]->(org_jbehave_core)
create (Ensure_same_instance_of_EmbedderClassLoader:issue {name:'Ensure same instance of EmbedderClassLoader'}) create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(org_jbehave_core)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_:issue {name:'Ensure same instance - same instance - instance of EmbedderClassLoader - run stories - getting the following stacktrace - following stacktrace - using different class - different class - different class loaders - class loaders - find the stories - find the stories - created classloader - '}) create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(org_jbehave_core)
create (different_class)-[:Bug]->(org_jbehave_core_embedder)
create (Ensure_same_instance)-[:Improvement]->(org_jbehave_core_embedder)
create (running_under_maven_plugin)-[:Improvement]->(org_jbehave_core_embedder)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(org_jbehave_core_embedder)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(org_jbehave_core_embedder)
create (different_class)-[:Bug]->(org_jbehave_core_steps)
create (Ensure_same_instance)-[:Improvement]->(org_jbehave_core_steps)
create (running_under_maven_plugin)-[:Improvement]->(org_jbehave_core_steps)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(org_jbehave_core_steps)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(org_jbehave_core_steps)
create (different_class)-[:Bug]->(core)
create (Ensure_same_instance)-[:Improvement]->(core)
create (running_under_maven_plugin)-[:Improvement]->(core)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(core)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(core)
create (google:class {name:'google', favoritecolor: 'green'}) create (different_class)-[:Bug]->(google)
create (Ensure_same_instance)-[:Improvement]->(google)
create (running_under_maven_plugin)-[:Improvement]->(google)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(google)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(google)
create (different_class)-[:Bug]->(maven)
create (Ensure_same_instance)-[:Improvement]->(maven)
create (running_under_maven_plugin)-[:Improvement]->(maven)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(maven)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(maven)
create (different_class)-[:Bug]->(embedder)
create (Ensure_same_instance)-[:Improvement]->(embedder)
create (running_under_maven_plugin)-[:Improvement]->(embedder)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(embedder)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(embedder)
create (lifecycle:class {name:'lifecycle', favoritecolor: 'green'}) create (different_class)-[:Bug]->(lifecycle)
create (Ensure_same_instance)-[:Improvement]->(lifecycle)
create (running_under_maven_plugin)-[:Improvement]->(lifecycle)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(lifecycle)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(lifecycle)
create (different_class)-[:Bug]->(lifecycle)
create (Ensure_same_instance)-[:Improvement]->(lifecycle)
create (running_under_maven_plugin)-[:Improvement]->(lifecycle)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(lifecycle)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(lifecycle)
create (different_class)-[:Bug]->(initialize)
create (Ensure_same_instance)-[:Improvement]->(initialize)
create (running_under_maven_plugin)-[:Improvement]->(initialize)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(initialize)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(initialize)
create (different_class)-[:Bug]->(EmbedderClassLoader)
create (Ensure_same_instance)-[:Improvement]->(EmbedderClassLoader)
create (running_under_maven_plugin)-[:Improvement]->(EmbedderClassLoader)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(EmbedderClassLoader)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(EmbedderClassLoader)
create (AnnotatedEmbedderRunner:class {name:'AnnotatedEmbedderRunner', favoritecolor: 'green'}) create (different_class)-[:Bug]->(AnnotatedEmbedderRunner)
create (Ensure_same_instance)-[:Improvement]->(AnnotatedEmbedderRunner)
create (running_under_maven_plugin)-[:Improvement]->(AnnotatedEmbedderRunner)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(AnnotatedEmbedderRunner)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(AnnotatedEmbedderRunner)
create (Lifecycle:class {name:'Lifecycle', favoritecolor: 'green'}) create (different_class)-[:Bug]->(Lifecycle)
create (Ensure_same_instance)-[:Improvement]->(Lifecycle)
create (running_under_maven_plugin)-[:Improvement]->(Lifecycle)
create (Ensure_same_instance_of_EmbedderClassLoader)-[:Improvement]->(Lifecycle)
create (Ensure_same_instance_same_instance_instance_of_EmbedderClassLoader_run_stories_getting_the_following_stacktrace_following_stacktrace_using_different_class_different_class_different_class_loaders_class_loaders_find_the_stories_find_the_stories_created_classloader_)-[:Bug]->(Lifecycle)
create (successful_scenarios:issue {name:'successful scenarios'}) create (successful_scenarios)-[:Bug]->(failed)
create (number_of_run_scenarios:issue {name:'number of run scenarios'}) create (number_of_run_scenarios)-[:Bug]->(failed)
create (Collecting_number:issue {name:'Collecting number'}) create (Collecting_number)-[:Improvement]->(failed)
create (render_in_story_reports:issue {name:'render in story reports'}) create (render_in_story_reports)-[:Improvement]->(failed)
create (highlight_number_of_successful_ones:issue {name:'highlight number of successful ones'}) create (highlight_number_of_successful_ones)-[:Improvement]->(failed)
create (Collect_successful_scenarios_successful_scenarios_story_reports_number_of_run_run_scenarios_failed_scenarios_successful_ones_highlighting_the_total_number_total_number_number_of_scenarios_are_failures_:issue {name:'Collect successful scenarios - successful scenarios - story reports - number of run - run scenarios - failed scenarios - successful ones - highlighting the total number - total number - number of scenarios - are failures - '}) create (Collect_successful_scenarios_successful_scenarios_story_reports_number_of_run_run_scenarios_failed_scenarios_successful_ones_highlighting_the_total_number_total_number_number_of_scenarios_are_failures_)-[:Bug]->(failed)
create (successful_scenarios)-[:Bug]->(scenario)
create (number_of_run_scenarios)-[:Bug]->(scenario)
create (Collecting_number)-[:Improvement]->(scenario)
create (render_in_story_reports)-[:Improvement]->(scenario)
create (highlight_number_of_successful_ones)-[:Improvement]->(scenario)
create (Collect_successful_scenarios_successful_scenarios_story_reports_number_of_run_run_scenarios_failed_scenarios_successful_ones_highlighting_the_total_number_total_number_number_of_scenarios_are_failures_)-[:Bug]->(scenario)
create (successful_scenarios)-[:Bug]->(scenario)
create (number_of_run_scenarios)-[:Bug]->(scenario)
create (Collecting_number)-[:Improvement]->(scenario)
create (render_in_story_reports)-[:Improvement]->(scenario)
create (highlight_number_of_successful_ones)-[:Improvement]->(scenario)
create (Collect_successful_scenarios_successful_scenarios_story_reports_number_of_run_run_scenarios_failed_scenarios_successful_ones_highlighting_the_total_number_total_number_number_of_scenarios_are_failures_)-[:Bug]->(scenario)
create (different_names:issue {name:'different names'}) create (different_names)-[:Bug]->(scenario)
create (screenshot_upon_failing_scenario:issue {name:'screenshot upon failing scenario'}) create (screenshot_upon_failing_scenario)-[:Bug]->(scenario)
create (Add_SeleniumWebDriverSteps:issue {name:'Add SeleniumWebDriverSteps'}) create (Add_SeleniumWebDriverSteps)-[:Improvement]->(scenario)
create (Add_instances_of_SeleniumWebDriverSteps:issue {name:'Add instances of SeleniumWebDriverSteps'}) create (Add_instances_of_SeleniumWebDriverSteps)-[:Improvement]->(scenario)
create (Add_SeleniumWebDriverSteps_capturesave_screenshot_failing_scenario_Add_instances_Add_instances_of_SeleniumWebDriverSteps_instances_of_SeleniumWebDriverSteps_capturesave_screenshot_scenario_failure_different_names_reflects_the_difference_reflects_the_difference_:issue {name:'Add SeleniumWebDriverSteps - capturesave screenshot - failing scenario - Add instances - Add instances of SeleniumWebDriverSteps - instances of SeleniumWebDriverSteps - capturesave screenshot - scenario failure - different names - reflects the difference - reflects the difference - '}) create (Add_SeleniumWebDriverSteps_capturesave_screenshot_failing_scenario_Add_instances_Add_instances_of_SeleniumWebDriverSteps_instances_of_SeleniumWebDriverSteps_capturesave_screenshot_scenario_failure_different_names_reflects_the_difference_reflects_the_difference_)-[:Improvement]->(scenario)
create (different_names)-[:Bug]->(scenario)
create (screenshot_upon_failing_scenario)-[:Bug]->(scenario)
create (Add_SeleniumWebDriverSteps)-[:Improvement]->(scenario)
create (Add_instances_of_SeleniumWebDriverSteps)-[:Improvement]->(scenario)
create (Add_SeleniumWebDriverSteps_capturesave_screenshot_failing_scenario_Add_instances_Add_instances_of_SeleniumWebDriverSteps_instances_of_SeleniumWebDriverSteps_capturesave_screenshot_scenario_failure_different_names_reflects_the_difference_reflects_the_difference_)-[:Improvement]->(scenario)
create (useViewGenerator_in_Configuration:issue {name:'useViewGenerator in Configuration'}) create (useViewGenerator:class {name:'useViewGenerator', favoritecolor: 'green'}) create (useViewGenerator_in_Configuration)-[:Bug]->(useViewGenerator)
create (honour_builder_pattern:issue {name:'honour builder pattern'}) create (honour_builder_pattern)-[:Bug]->(useViewGenerator)
create (Method_useViewGenerator_useViewGenerator_in_Configuration_honour_the_builder_honour_the_builder_builder_pattern_make_the_method_make_the_method_return_Configuration_:issue {name:'Method useViewGenerator - useViewGenerator in Configuration - honour the builder - honour the builder - builder pattern - make the method - make the method - return Configuration - '}) create (Method_useViewGenerator_useViewGenerator_in_Configuration_honour_the_builder_honour_the_builder_builder_pattern_make_the_method_make_the_method_return_Configuration_)-[:Improvement]->(useViewGenerator)
create (useViewGenerator_in_Configuration)-[:Bug]->(useViewGenerator)
create (honour_builder_pattern)-[:Bug]->(useViewGenerator)
create (Method_useViewGenerator_useViewGenerator_in_Configuration_honour_the_builder_honour_the_builder_builder_pattern_make_the_method_make_the_method_return_Configuration_)-[:Improvement]->(useViewGenerator)
create (ViewGenerator:class {name:'ViewGenerator', favoritecolor: 'green'}) create (useViewGenerator_in_Configuration)-[:Bug]->(ViewGenerator)
create (honour_builder_pattern)-[:Bug]->(ViewGenerator)
create (Method_useViewGenerator_useViewGenerator_in_Configuration_honour_the_builder_honour_the_builder_builder_pattern_make_the_method_make_the_method_return_Configuration_)-[:Improvement]->(ViewGenerator)
create (StoryControls_configuration_element:issue {name:'StoryControls configuration element'}) create (StoryControls_configuration_element)-[:Bug]->(configuration)
create (Allow_story_controls:issue {name:'Allow story controls'}) create (Allow_story_controls)-[:Bug]->(configuration)
create (be_via_annotations:issue {name:'be via annotations'}) create (be_via_annotations)-[:Improvement]->(configuration)
create (GivenStories_keywords:issue {name:'GivenStories keywords'}) create (GivenStories_keywords)-[:Bug]->(keywords)
create (corresponding_portions_of_scenario:issue {name:'corresponding portions of scenario'}) create (corresponding_portions_of_scenario)-[:Bug]->(keywords)
create (appear_at_beginning:issue {name:'appear at beginning'}) create (appear_at_beginning)-[:Improvement]->(keywords)
create (newline_In_line_requirement_of_steps_steps_keywords_beginning_of_line_corresponding_portions_:issue {name:'newline In line - requirement of steps - steps keywords - beginning of line - corresponding portions - '}) create (newline_In_line_requirement_of_steps_steps_keywords_beginning_of_line_corresponding_portions_)-[:Improvement]->(keywords)
create (GivenStories_keywords)-[:Bug]->(after)
create (corresponding_portions_of_scenario)-[:Bug]->(after)
create (appear_at_beginning)-[:Improvement]->(after)
create (newline_In_line_requirement_of_steps_steps_keywords_beginning_of_line_corresponding_portions_)-[:Improvement]->(after)
create (GivenStories_keywords)-[:Bug]->(scenario)
create (corresponding_portions_of_scenario)-[:Bug]->(scenario)
create (appear_at_beginning)-[:Improvement]->(scenario)
create (newline_In_line_requirement_of_steps_steps_keywords_beginning_of_line_corresponding_portions_)-[:Improvement]->(scenario)
create (GivenStories_keywords)-[:Bug]->(scenario)
create (corresponding_portions_of_scenario)-[:Bug]->(scenario)
create (appear_at_beginning)-[:Improvement]->(scenario)
create (newline_In_line_requirement_of_steps_steps_keywords_beginning_of_line_corresponding_portions_)-[:Improvement]->(scenario)
create (GivenStories_keywords)-[:Bug]->(keywords)
create (corresponding_portions_of_scenario)-[:Bug]->(keywords)
create (appear_at_beginning)-[:Improvement]->(keywords)
create (newline_In_line_requirement_of_steps_steps_keywords_beginning_of_line_corresponding_portions_)-[:Improvement]->(keywords)
create (GivenStories_keywords)-[:Bug]->(GivenStories)
create (corresponding_portions_of_scenario)-[:Bug]->(GivenStories)
create (appear_at_beginning)-[:Improvement]->(GivenStories)
create (newline_In_line_requirement_of_steps_steps_keywords_beginning_of_line_corresponding_portions_)-[:Improvement]->(GivenStories)
create (current_context:issue {name:'current context'}) create (current_context)-[:Bug]->(Context)
create (has_nice_feature:issue {name:'has nice feature'}) create (has_nice_feature)-[:Bug]->(Context)
create (provide_alternative_impls_as_based_panel:issue {name:'provide alternative impls as based panel'}) create (provide_alternative_impls_as_based_panel)-[:Improvement]->(Context)
create (current_context)-[:Bug]->(show)
create (has_nice_feature)-[:Bug]->(show)
create (provide_alternative_impls_as_based_panel)-[:Improvement]->(show)
create (Allow_comments:issue {name:'Allow comments'}) create (Allow_comments)-[:Bug]->(after)
create (read_in_lines:issue {name:'read in lines'}) create (read_in_lines)-[:Bug]->(after)
create (Allow_comments_in_tables:issue {name:'Allow comments in tables'}) create (Allow_comments_in_tables)-[:Improvement]->(after)
create (Allow_comments_Allow_comments_in_tables_comments_in_tables_include_comments_include_comments_in_tables_comments_in_tables_make_scenarios_Given_the_documents_Given_the_documents_have_a_comment_have_a_comment_tried_a_small_test_small_test_fix_the_problem_fix_the_problem_:issue {name:'Allow comments - Allow comments in tables - comments in tables - include comments - include comments in tables - comments in tables - make scenarios - Given the documents - Given the documents - have a comment - have a comment - tried a small test - small test - fix the problem - fix the problem - '}) create (Allow_comments_Allow_comments_in_tables_comments_in_tables_include_comments_include_comments_in_tables_comments_in_tables_make_scenarios_Given_the_documents_Given_the_documents_have_a_comment_have_a_comment_tried_a_small_test_small_test_fix_the_problem_fix_the_problem_)-[:Improvement]->(after)
create (Allow_comments)-[:Bug]->(scenario)
create (read_in_lines)-[:Bug]->(scenario)
create (Allow_comments_in_tables)-[:Improvement]->(scenario)
create (Allow_comments_Allow_comments_in_tables_comments_in_tables_include_comments_include_comments_in_tables_comments_in_tables_make_scenarios_Given_the_documents_Given_the_documents_have_a_comment_have_a_comment_tried_a_small_test_small_test_fix_the_problem_fix_the_problem_)-[:Improvement]->(scenario)
create (Allow_comments)-[:Bug]->(scenario)
create (read_in_lines)-[:Bug]->(scenario)
create (Allow_comments_in_tables)-[:Improvement]->(scenario)
create (Allow_comments_Allow_comments_in_tables_comments_in_tables_include_comments_include_comments_in_tables_comments_in_tables_make_scenarios_Given_the_documents_Given_the_documents_have_a_comment_have_a_comment_tried_a_small_test_small_test_fix_the_problem_fix_the_problem_)-[:Improvement]->(scenario)
create (Allow_comments)-[:Bug]->(ExamplesTable)
create (read_in_lines)-[:Bug]->(ExamplesTable)
create (Allow_comments_in_tables)-[:Improvement]->(ExamplesTable)
create (Allow_comments_Allow_comments_in_tables_comments_in_tables_include_comments_include_comments_in_tables_comments_in_tables_make_scenarios_Given_the_documents_Given_the_documents_have_a_comment_have_a_comment_tried_a_small_test_small_test_fix_the_problem_fix_the_problem_)-[:Improvement]->(ExamplesTable)
create (commom_JAXB:issue {name:'commom JAXB'}) create (commom_JAXB)-[:Bug]->(scenario)
create (objects_for_JBehave:issue {name:'objects for JBehave'}) create (objects_for_JBehave)-[:Bug]->(scenario)
create (Define_JAXB_interfaces:issue {name:'Define JAXB interfaces'}) create (Define_JAXB_interfaces)-[:Improvement]->(scenario)
create (Define_JAXB_interfaces_for_systems:issue {name:'Define JAXB interfaces for systems'}) create (Define_JAXB_interfaces_for_systems)-[:Improvement]->(scenario)
create (commom_JAXB)-[:Bug]->(scenario)
create (objects_for_JBehave)-[:Bug]->(scenario)
create (Define_JAXB_interfaces)-[:Improvement]->(scenario)
create (Define_JAXB_interfaces_for_systems)-[:Improvement]->(scenario)
create (Spring_Security:issue {name:'Spring Security'}) create (Spring_Security)-[:Bug]->(ant)
create (ZIP_of_Security_example:issue {name:'ZIP of Security example'}) create (ZIP_of_Security_example)-[:Bug]->(ant)
create (uses_JBehave:issue {name:'uses JBehave'}) create (uses_JBehave)-[:Improvement]->(ant)
create (uses_JBehave_with_Security_Ant_plugins:issue {name:'uses JBehave with Security Ant plugins'}) create (uses_JBehave_with_Security_Ant_plugins)-[:Improvement]->(ant)
create (transfer_copyright_:issue {name:'transfer copyright - '}) create (transfer_copyright_)-[:Improvement]->(ant)
create (name_of_boolean_flag:issue {name:'name of boolean flag'}) create (name_of_boolean_flag)-[:Bug]->(given)
create (supports_running_givenStories:issue {name:'supports running givenStories'}) create (supports_running_givenStories)-[:Bug]->(given)
create (avoid_confusion_with_StoryEmbedder:issue {name:'avoid confusion with StoryEmbedder'}) create (avoid_confusion_with_StoryEmbedder)-[:Improvement]->(given)
create (Rename_embeddedStory_flag_embeddedStory_flag_flag_to_givenStory_running_givenStories_boolean_flag_avoid_confusion_:issue {name:'Rename embeddedStory flag - embeddedStory flag - flag to givenStory - running givenStories - boolean flag - avoid confusion - '}) create (Rename_embeddedStory_flag_embeddedStory_flag_flag_to_givenStory_running_givenStories_boolean_flag_avoid_confusion_)-[:Improvement]->(given)
create (givenStories:class {name:'givenStories', favoritecolor: 'green'}) create (name_of_boolean_flag)-[:Bug]->(givenStories)
create (supports_running_givenStories)-[:Bug]->(givenStories)
create (avoid_confusion_with_StoryEmbedder)-[:Improvement]->(givenStories)
create (Rename_embeddedStory_flag_embeddedStory_flag_flag_to_givenStory_running_givenStories_boolean_flag_avoid_confusion_)-[:Improvement]->(givenStories)
create (name_of_boolean_flag)-[:Bug]->(givenStories)
create (supports_running_givenStories)-[:Bug]->(givenStories)
create (avoid_confusion_with_StoryEmbedder)-[:Improvement]->(givenStories)
create (Rename_embeddedStory_flag_embeddedStory_flag_flag_to_givenStory_running_givenStories_boolean_flag_avoid_confusion_)-[:Improvement]->(givenStories)
create (single_includeexclude_patterns:issue {name:'single includeexclude patterns'}) create (single_includeexclude_patterns)-[:Bug]->(StoryFinder)
create (find_paths:issue {name:'find paths'}) create (find_paths)-[:Bug]->(StoryFinder)
create (Add_to_StoryFinder:issue {name:'Add to StoryFinder'}) create (Add_to_StoryFinder)-[:Improvement]->(StoryFinder)
create (find_paths_by_URL_code_location:issue {name:'find paths by URL code location'}) create (find_paths_by_URL_code_location)-[:Improvement]->(StoryFinder)
create (find_paths_find_paths_by_URL_paths_by_URL_URL_code_URL_code_location_code_location_single_includeexclude_patterns_includeexclude_patterns_common_use_common_use_case_use_case_using_a_URL_using_a_URL_URL_code_URL_code_location_code_location_single_includeexclude_pattern_includeexclude_pattern_:issue {name:'find paths - find paths by URL - paths by URL - URL code - URL code location - code location - single includeexclude patterns - includeexclude patterns - common use - common use case - use case - using a URL - using a URL - URL code - URL code location - code location - single includeexclude pattern - includeexclude pattern - '}) create (find_paths_find_paths_by_URL_paths_by_URL_URL_code_URL_code_location_code_location_single_includeexclude_patterns_includeexclude_patterns_common_use_common_use_case_use_case_using_a_URL_using_a_URL_URL_code_URL_code_location_code_location_single_includeexclude_pattern_includeexclude_pattern_)-[:Improvement]->(StoryFinder)
create (Cache_container:issue {name:'Cache container'}) create (UsingSpring:class {name:'UsingSpring', favoritecolor: 'green'}) create (Cache_container)-[:Bug]->(UsingSpring)
create (assume_versus_use:issue {name:'assume versus use'}) create (assume_versus_use)-[:Improvement]->(UsingSpring)
create (Cache_container)-[:Bug]->(spring)
create (assume_versus_use)-[:Improvement]->(spring)
create (Cache_container)-[:Bug]->(maven)
create (assume_versus_use)-[:Improvement]->(maven)
create (Cache_container)-[:Bug]->(Context)
create (assume_versus_use)-[:Improvement]->(Context)
create (Indented_scenarios:issue {name:'Indented scenarios'}) create (Indented_scenarios)-[:Bug]->(failed)
create (none_of_steps:issue {name:'none of steps'}) create (none_of_steps)-[:Bug]->(failed)
create (working_for_renamed_files:issue {name:'working for renamed files'}) create (working_for_renamed_files)-[:Improvement]->(failed)
create (Indented_scenarios_scenarios_in_stories_seems_regex_made_no_match_made_no_match_had_breakpoints_had_breakpoints_in_place_breakpoints_in_place_:issue {name:'Indented scenarios - scenarios in stories - seems regex - made no match - made no match - had breakpoints - had breakpoints in place - breakpoints in place - '}) create (Indented_scenarios_scenarios_in_stories_seems_regex_made_no_match_made_no_match_had_breakpoints_had_breakpoints_in_place_breakpoints_in_place_)-[:Improvement]->(failed)
create (Indented_scenarios)-[:Bug]->(after)
create (none_of_steps)-[:Bug]->(after)
create (working_for_renamed_files)-[:Improvement]->(after)
create (Indented_scenarios_scenarios_in_stories_seems_regex_made_no_match_made_no_match_had_breakpoints_had_breakpoints_in_place_breakpoints_in_place_)-[:Improvement]->(after)
create (Indented_scenarios)-[:Bug]->(scenario)
create (none_of_steps)-[:Bug]->(scenario)
create (working_for_renamed_files)-[:Improvement]->(scenario)
create (Indented_scenarios_scenarios_in_stories_seems_regex_made_no_match_made_no_match_had_breakpoints_had_breakpoints_in_place_breakpoints_in_place_)-[:Improvement]->(scenario)
create (Indented_scenarios)-[:Bug]->(scenario)
create (none_of_steps)-[:Bug]->(scenario)
create (working_for_renamed_files)-[:Improvement]->(scenario)
create (Indented_scenarios_scenarios_in_stories_seems_regex_made_no_match_made_no_match_had_breakpoints_had_breakpoints_in_place_breakpoints_in_place_)-[:Improvement]->(scenario)
create (Put_strategic_throw:issue {name:'Put strategic throw'}) create (Put_strategic_throw)-[:Bug]->(configuration)
create (dump_to_console:issue {name:'dump to console'}) create (dump_to_console)-[:Improvement]->(configuration)
create (have_prerequisite_packages_in_stack:issue {name:'have prerequisite packages in stack'}) create (have_prerequisite_packages_in_stack)-[:Improvement]->(configuration)
create (different_StoryNameResolvers:issue {name:'different StoryNameResolvers'}) create (different_StoryNameResolvers)-[:Bug]->(core)
create (trims_everything:issue {name:'trims everything'}) create (trims_everything)-[:Bug]->(core)
create (have_full_stops_in_file_name:issue {name:'have full stops in file name'}) create (have_full_stops_in_file_name)-[:Improvement]->(core)
create (Allow_different_StoryNameResolvers_different_StoryNameResolvers_report_generation_current_StoryNameResolver_last_full_stop_full_stop_have_full_stops_full_stops_file_name_Allow_a_custom_Allow_a_custom_custom_StoryNameResolver_:issue {name:'Allow different StoryNameResolvers - different StoryNameResolvers - report generation - current StoryNameResolver - last full stop - full stop - have full stops - full stops - file name - Allow a custom - Allow a custom - custom StoryNameResolver - '}) create (Allow_different_StoryNameResolvers_different_StoryNameResolvers_report_generation_current_StoryNameResolver_last_full_stop_full_stop_have_full_stops_full_stops_file_name_Allow_a_custom_Allow_a_custom_custom_StoryNameResolver_)-[:Improvement]->(core)
create (UnderscoredToCapitalized:class {name:'UnderscoredToCapitalized', favoritecolor: 'green'}) create (different_StoryNameResolvers)-[:Bug]->(UnderscoredToCapitalized)
create (trims_everything)-[:Bug]->(UnderscoredToCapitalized)
create (have_full_stops_in_file_name)-[:Improvement]->(UnderscoredToCapitalized)
create (Allow_different_StoryNameResolvers_different_StoryNameResolvers_report_generation_current_StoryNameResolver_last_full_stop_full_stop_have_full_stops_full_stops_file_name_Allow_a_custom_Allow_a_custom_custom_StoryNameResolver_)-[:Improvement]->(UnderscoredToCapitalized)
create (simple_textarea:issue {name:'simple textarea'}) create (simple_textarea)-[:Bug]->(show)
create (list_of_steps_instances:issue {name:'list of steps instances'}) create (list_of_steps_instances)-[:Bug]->(show)
create (Find_page:issue {name:'Find page'}) create (Find_page)-[:Improvement]->(show)
create (show_corresponding_methods_in_steps_instance:issue {name:'show corresponding methods in steps instance'}) create (show_corresponding_methods_in_steps_instance)-[:Improvement]->(show)
create (allow_a_simple_textarea_simple_textarea_paste_a_textual_step_textual_step_matching_step_matching_step_patterns_step_patterns_corresponding_methods_steps_instance_show_the_list_show_the_list_list_of_steps_steps_instances_textual_step_:issue {name:'allow a simple textarea - simple textarea - paste a textual step - textual step - matching step - matching step patterns - step patterns - corresponding methods - steps instance - show the list - show the list - list of steps - steps instances - textual step - '}) create (allow_a_simple_textarea_simple_textarea_paste_a_textual_step_textual_step_matching_step_matching_step_patterns_step_patterns_corresponding_methods_steps_instance_show_the_list_show_the_list_list_of_steps_steps_instances_textual_step_)-[:Improvement]->(show)
create (web_application:issue {name:'web application'}) create (web_application)-[:Bug]->(configuration)
create (use_Wicket:issue {name:'use Wicket'}) create (use_Wicket)-[:Bug]->(configuration)
create (be_From_point:issue {name:'be From point'}) create (be_From_point)-[:Improvement]->(configuration)
create (use_Wicket_as_Wicket_shares:issue {name:'use Wicket as Wicket shares'}) create (use_Wicket_as_Wicket_shares)-[:Improvement]->(configuration)
create (web_application_web_application_framework_application_framework_same_philosophy_has_a_wide_community_wide_community_wide_community_support_community_support_point_of_view_only_change_specify_configuration_configuration_and_steps_configuration_and_steps_instances_steps_instances_Application_class_:issue {name:'web application - web application framework - application framework - same philosophy - has a wide community - wide community - wide community support - community support - point of view - only change - specify configuration - configuration and steps - configuration and steps instances - steps instances - Application class - '}) create (web_application_web_application_framework_application_framework_same_philosophy_has_a_wide_community_wide_community_wide_community_support_community_support_point_of_view_only_change_specify_configuration_configuration_and_steps_configuration_and_steps_instances_steps_instances_Application_class_)-[:Improvement]->(configuration)
create (Adriano_Bonat:issue {name:'Adriano Bonat'}) create (Adriano_Bonat)-[:Bug]->(core)
create (Add_Groovy_support:issue {name:'Add Groovy support'}) create (Add_Groovy_support)-[:Bug]->(core)
create (Starting_from_contribution:issue {name:'Starting from contribution'}) create (Starting_from_contribution)-[:Improvement]->(core)
create (create_steps_instances_from_Groovy_scripts:issue {name:'create steps instances from Groovy scripts'}) create (create_steps_instances_from_Groovy_scripts)-[:Improvement]->(core)
create (groovy:class {name:'groovy', favoritecolor: 'green'}) create (Adriano_Bonat)-[:Bug]->(groovy)
create (Add_Groovy_support)-[:Bug]->(groovy)
create (Starting_from_contribution)-[:Improvement]->(groovy)
create (create_steps_instances_from_Groovy_scripts)-[:Improvement]->(groovy)
create (named_parameters:issue {name:'named parameters'}) create (named_parameters)-[:Bug]->(ExamplesTable)
create (row_of_ExamplesTable:issue {name:'row of ExamplesTable'}) create (row_of_ExamplesTable)-[:Bug]->(ExamplesTable)
create (using_same_mechanism:issue {name:'using same mechanism'}) create (using_same_mechanism)-[:Improvement]->(ExamplesTable)
create (using_same_mechanism_of_ExamplesTable:issue {name:'using same mechanism of ExamplesTable'}) create (using_same_mechanism_of_ExamplesTable)-[:Improvement]->(ExamplesTable)
create (using_the_same_mechanism_same_mechanism_named_parameters_has_an_anchor_has_an_anchor_required_parameters_:issue {name:'using the same mechanism - same mechanism - named parameters - has an anchor - has an anchor - required parameters - '}) create (using_the_same_mechanism_same_mechanism_named_parameters_has_an_anchor_has_an_anchor_required_parameters_)-[:Improvement]->(ExamplesTable)
create (named_parameters)-[:Bug]->(GivenStories)
create (row_of_ExamplesTable)-[:Bug]->(GivenStories)
create (using_same_mechanism)-[:Improvement]->(GivenStories)
create (using_same_mechanism_of_ExamplesTable)-[:Improvement]->(GivenStories)
create (using_the_same_mechanism_same_mechanism_named_parameters_has_an_anchor_has_an_anchor_required_parameters_)-[:Improvement]->(GivenStories)
create (named_parameters)-[:Bug]->(GivenStory)
create (row_of_ExamplesTable)-[:Bug]->(GivenStory)
create (using_same_mechanism)-[:Improvement]->(GivenStory)
create (using_same_mechanism_of_ExamplesTable)-[:Improvement]->(GivenStory)
create (using_the_same_mechanism_same_mechanism_named_parameters_has_an_anchor_has_an_anchor_required_parameters_)-[:Improvement]->(GivenStory)
create (Provide_table_row_values:issue {name:'Provide table row values'}) create (Provide_table_row_values)-[:Bug]->(ExamplesTable)
create (need_In_cases:issue {name:'need In cases'}) create (need_In_cases)-[:Bug]->(ExamplesTable)
create (provides_row_values_as_MapString:issue {name:'provides row values as MapString'}) create (provides_row_values_as_MapString)-[:Improvement]->(ExamplesTable)
create (Provide_table_Provide_table_row_table_row_table_row_values_row_values_converted_parameters_provides_the_row_provides_the_row_row_values_most_cases_convert_these_values_convert_these_values_provide_the_row_provide_the_row_row_values_specified_types_step_conversion_provision_of_defaults_accessing_single_value_single_value_table_structure_:issue {name:'Provide table - Provide table row - table row - table row values - row values - converted parameters - provides the row - provides the row - row values - most cases - convert these values - convert these values - provide the row - provide the row - row values - specified types - step conversion - provision of defaults - accessing single value - single value - table structure - '}) create (Provide_table_Provide_table_row_table_row_table_row_values_row_values_converted_parameters_provides_the_row_provides_the_row_row_values_most_cases_convert_these_values_convert_these_values_provide_the_row_provide_the_row_row_values_specified_types_step_conversion_provision_of_defaults_accessing_single_value_single_value_table_structure_)-[:Improvement]->(ExamplesTable)
create (details_availability:issue {name:'details availability'}) create (details_availability)-[:Bug]->(scenario)
create (is_in_real_terms:issue {name:'is in real terms'}) create (is_in_real_terms)-[:Improvement]->(scenario)
create (grammer_definition_details_the_availability_details_the_availability_real_terms_fundamental_blocker_writing_clear_scenarios_clear_scenarios_:issue {name:'grammer definition - details the availability - details the availability - real terms - fundamental blocker - writing clear scenarios - clear scenarios - '}) create (grammer_definition_details_the_availability_details_the_availability_real_terms_fundamental_blocker_writing_clear_scenarios_clear_scenarios_)-[:Improvement]->(scenario)
create (details_availability)-[:Bug]->(scenario)
create (is_in_real_terms)-[:Improvement]->(scenario)
create (grammer_definition_details_the_availability_details_the_availability_real_terms_fundamental_blocker_writing_clear_scenarios_clear_scenarios_)-[:Improvement]->(scenario)
create (skip_mode:issue {name:'skip mode'}) create (skip_mode)-[:Bug]->(EmbedderClassLoader)
create (instantiate_Embeddable_instances:issue {name:'instantiate Embeddable instances'}) create (instantiate_Embeddable_instances)-[:Bug]->(EmbedderClassLoader)
create (avoid_unnecessary_instantiation_of_classes:issue {name:'avoid unnecessary instantiation of classes'}) create (avoid_unnecessary_instantiation_of_classes)-[:Improvement]->(EmbedderClassLoader)
create (Embeddable_instances_instantiate_the_Embeddable_instances_Embeddable_instances_class_names_entry_points_avoid_unnecessary_instantiation_unnecessary_instantiation_instantiation_of_classes_skip_mode_code_logic_collection_of_class_class_names_other_configurable_parameters_configurable_parameters_:issue {name:'Embeddable instances - instantiate the Embeddable instances - Embeddable instances - class names - entry points - avoid unnecessary instantiation - unnecessary instantiation - instantiation of classes - skip mode - code logic - collection of class - class names - other configurable parameters - configurable parameters - '}) create (Embeddable_instances_instantiate_the_Embeddable_instances_Embeddable_instances_class_names_entry_points_avoid_unnecessary_instantiation_unnecessary_instantiation_instantiation_of_classes_skip_mode_code_logic_collection_of_class_class_names_other_configurable_parameters_configurable_parameters_)-[:Improvement]->(EmbedderClassLoader)
create (running_GivenStory_Behaviour:issue {name:'running GivenStory Behaviour'}) create (running_GivenStory_Behaviour)-[:Bug]->(GivenStory)
create (Add_configurable_sorting_strategies:issue {name:'Add configurable sorting strategies'}) create (Add_configurable_sorting_strategies)-[:Bug]->(scenario)
create (Add_configurable_sorting_strategies_for_stories:issue {name:'Add configurable sorting strategies for stories'}) create (Add_configurable_sorting_strategies_for_stories)-[:Bug]->(scenario)
create (Add_configurable_sorting_configurable_sorting_configurable_sorting_strategies_sorting_strategies_strategies_for_stories_stories_in_reports_Allow_stories_different_configurable_strategies_configurable_strategies_successfailure_criteria_number_of_scenarios_scenarios_or_steps_:issue {name:'Add configurable sorting - configurable sorting - configurable sorting strategies - sorting strategies - strategies for stories - stories in reports - Allow stories - different configurable strategies - configurable strategies - successfailure criteria - number of scenarios - scenarios or steps - '}) create (Add_configurable_sorting_configurable_sorting_configurable_sorting_strategies_sorting_strategies_strategies_for_stories_stories_in_reports_Allow_stories_different_configurable_strategies_configurable_strategies_successfailure_criteria_number_of_scenarios_scenarios_or_steps_)-[:Improvement]->(scenario)
create (Add_configurable_sorting_strategies)-[:Bug]->(scenario)
create (Add_configurable_sorting_strategies_for_stories)-[:Bug]->(scenario)
create (Add_configurable_sorting_configurable_sorting_configurable_sorting_strategies_sorting_strategies_strategies_for_stories_stories_in_reports_Allow_stories_different_configurable_strategies_configurable_strategies_successfailure_criteria_number_of_scenarios_scenarios_or_steps_)-[:Improvement]->(scenario)
create (Example_noformat:issue {name:'Example noformat'}) create (Example_noformat)-[:Bug]->(ant)
create (Support_in_order:issue {name:'Support In order'}) create (Support_in_order)-[:Bug]->(ant)
create (compose_steps:issue {name:'compose steps'}) create (compose_steps)-[:Improvement]->(ant)
create (go_to_home_page:issue {name:'go to home page'}) create (go_to_home_page)-[:Improvement]->(ant)
create (Support_composition_composition_of_steps_steps_in_order_scenario_development_scenario_writer_compose_steps_existing_steps_Given_customer_bought_a_product_bought_a_product_Given_customer_put_a_product_put_a_product_registered_card_home_page_include_annotations_step_concatenation_:issue {name:'Support composition - composition of steps - steps In order - scenario development - scenario writer - compose steps - existing steps - Given customer - bought a product - bought a product - Given customer - put a product - put a product - registered card - home page - include annotations - step concatenation - '}) create (Support_composition_composition_of_steps_steps_in_order_scenario_development_scenario_writer_compose_steps_existing_steps_Given_customer_bought_a_product_bought_a_product_Given_customer_put_a_product_put_a_product_registered_card_home_page_include_annotations_step_concatenation_)-[:Improvement]->(ant)
create (Example_noformat)-[:Bug]->(scenario)
create (Support_in_order)-[:Bug]->(scenario)
create (compose_steps)-[:Improvement]->(scenario)
create (go_to_home_page)-[:Improvement]->(scenario)
create (Support_composition_composition_of_steps_steps_in_order_scenario_development_scenario_writer_compose_steps_existing_steps_Given_customer_bought_a_product_bought_a_product_Given_customer_put_a_product_put_a_product_registered_card_home_page_include_annotations_step_concatenation_)-[:Improvement]->(scenario)
create (Example_noformat)-[:Bug]->(scenario)
create (Support_in_order)-[:Bug]->(scenario)
create (compose_steps)-[:Improvement]->(scenario)
create (go_to_home_page)-[:Improvement]->(scenario)
create (Support_composition_composition_of_steps_steps_in_order_scenario_development_scenario_writer_compose_steps_existing_steps_Given_customer_bought_a_product_bought_a_product_Given_customer_put_a_product_put_a_product_registered_card_home_page_include_annotations_step_concatenation_)-[:Improvement]->(scenario)
create (thrown_exception:issue {name:'thrown exception'}) create (thrown_exception)-[:Bug]->(after)
create (derivative_of_RuntimeE:issue {name:'derivative of RuntimeE'}) create (derivative_of_RuntimeE)-[:Bug]->(after)
create (thrown_exception)-[:Bug]->(close)
create (derivative_of_RuntimeE)-[:Bug]->(close)
create (gettersetter_for_FilePathResolver:issue {name:'gettersetter for FilePathResolver'}) create (gettersetter_for_FilePathResolver)-[:Bug]->(SpringStoryReporterBuilder)
create (Add_gettersetter:issue {name:'Add gettersetter'}) create (Add_gettersetter)-[:Bug]->(SpringStoryReporterBuilder)
create (Add_gettersetter_:issue {name:'Add gettersetter - '}) create (Add_gettersetter_)-[:Improvement]->(SpringStoryReporterBuilder)
create (gettersetter_for_FilePathResolver)-[:Bug]->(StoryReporterBuilder)
create (Add_gettersetter)-[:Bug]->(StoryReporterBuilder)
create (Add_gettersetter_)-[:Improvement]->(StoryReporterBuilder)
create (gettersetter_for_FilePathResolver)-[:Bug]->(StoryReporterBuilder)
create (Add_gettersetter)-[:Bug]->(StoryReporterBuilder)
create (Add_gettersetter_)-[:Improvement]->(StoryReporterBuilder)
create (gettersetter_for_FilePathResolver)-[:Bug]->(StoryReporterBuilder)
create (Add_gettersetter)-[:Bug]->(StoryReporterBuilder)
create (Add_gettersetter_)-[:Improvement]->(StoryReporterBuilder)
create (Configuration_option:issue {name:'Configuration option'}) create (Configuration_option)-[:Bug]->(ant)
create (Configuration_option_for_non_greedy_matchers:issue {name:'Configuration option for non - greedy matchers'}) create (Configuration_option_for_non_greedy_matchers)-[:Bug]->(ant)
create (provide_configuration_option:issue {name:'provide configuration option'}) create (provide_configuration_option)-[:Improvement]->(ant)
create (scale_with_large_amount:issue {name:'scale with large amount'}) create (scale_with_large_amount)-[:Improvement]->(ant)
create (provide_configuration_option_in_StepsConfiguration:issue {name:'provide configuration option in StepsConfiguration'}) create (provide_configuration_option_in_StepsConfiguration)-[:Improvement]->(ant)
create (Configuration_option__greedy_matchers_greedy_matchers_matchers_for_steps_biggest_sore_point_sore_point_ex_matchers_matchers_for_step_step_prose_large_amount_amount_of_steps_global_priority_global_priority_number_priority_number_ex_matcher_usable_solution_provide_a_configuration_provide_a_configuration_configuration_option_side_note_rich_templating_rich_templating_language_templating_language_language_like_velocity_:issue {name:'Configuration option - -greedy matchers - greedy matchers - matchers for steps - biggest sore point - sore point - ex matchers - matchers for step - step prose - large amount - amount of steps - global priority - global priority number - priority number - ex matcher - usable solution - provide a configuration - provide a configuration - configuration option - side note - rich templating - rich templating language - templating language - language like velocity - '}) create (Configuration_option__greedy_matchers_greedy_matchers_matchers_for_steps_biggest_sore_point_sore_point_ex_matchers_matchers_for_step_step_prose_large_amount_amount_of_steps_global_priority_global_priority_number_priority_number_ex_matcher_usable_solution_provide_a_configuration_provide_a_configuration_configuration_option_side_note_rich_templating_rich_templating_language_templating_language_language_like_velocity_)-[:Bug]->(ant)
create (Configuration_option)-[:Bug]->(configuration)
create (Configuration_option_for_non_greedy_matchers)-[:Bug]->(configuration)
create (provide_configuration_option)-[:Improvement]->(configuration)
create (scale_with_large_amount)-[:Improvement]->(configuration)
create (provide_configuration_option_in_StepsConfiguration)-[:Improvement]->(configuration)
create (Configuration_option__greedy_matchers_greedy_matchers_matchers_for_steps_biggest_sore_point_sore_point_ex_matchers_matchers_for_step_step_prose_large_amount_amount_of_steps_global_priority_global_priority_number_priority_number_ex_matcher_usable_solution_provide_a_configuration_provide_a_configuration_configuration_option_side_note_rich_templating_rich_templating_language_templating_language_language_like_velocity_)-[:Bug]->(configuration)
create (Configuration_option)-[:Bug]->(priority)
create (Configuration_option_for_non_greedy_matchers)-[:Bug]->(priority)
create (provide_configuration_option)-[:Improvement]->(priority)
create (scale_with_large_amount)-[:Improvement]->(priority)
create (provide_configuration_option_in_StepsConfiguration)-[:Improvement]->(priority)
create (Configuration_option__greedy_matchers_greedy_matchers_matchers_for_steps_biggest_sore_point_sore_point_ex_matchers_matchers_for_step_step_prose_large_amount_amount_of_steps_global_priority_global_priority_number_priority_number_ex_matcher_usable_solution_provide_a_configuration_provide_a_configuration_configuration_option_side_note_rich_templating_rich_templating_language_templating_language_language_like_velocity_)-[:Bug]->(priority)
create (Configuration_option)-[:Bug]->(priority)
create (Configuration_option_for_non_greedy_matchers)-[:Bug]->(priority)
create (provide_configuration_option)-[:Improvement]->(priority)
create (scale_with_large_amount)-[:Improvement]->(priority)
create (provide_configuration_option_in_StepsConfiguration)-[:Improvement]->(priority)
create (Configuration_option__greedy_matchers_greedy_matchers_matchers_for_steps_biggest_sore_point_sore_point_ex_matchers_matchers_for_step_step_prose_large_amount_amount_of_steps_global_priority_global_priority_number_priority_number_ex_matcher_usable_solution_provide_a_configuration_provide_a_configuration_configuration_option_side_note_rich_templating_rich_templating_language_templating_language_language_like_velocity_)-[:Bug]->(priority)
create (instantiate_abstract_beans:issue {name:'instantiate abstract beans'}) create (instantiate_abstract_beans)-[:Bug]->(SpringStepsFactory)
create (allows_declaration_of_abstract_beans:issue {name:'allows declaration of abstract beans'}) create (allows_declaration_of_abstract_beans)-[:Bug]->(SpringStepsFactory)
create (instantiate_abstract_beans_abstract_beans_abstract_beans_Spring_beans_Spring_allows_the_declaration_allows_the_declaration_abstract_beans_bean_type_:issue {name:'instantiate abstract beans - abstract beans - abstract beans Spring - beans Spring - allows the declaration - allows the declaration - abstract beans - bean type - '}) create (instantiate_abstract_beans_abstract_beans_abstract_beans_Spring_beans_Spring_allows_the_declaration_allows_the_declaration_abstract_beans_bean_type_)-[:Improvement]->(SpringStepsFactory)
create (Run_Story:issue {name:'Run Story'}) create (Run_Story)-[:Bug]->(meta)
create (Add_support:issue {name:'Add support'}) create (Add_support)-[:Bug]->(meta)
create (Add_support_for_meta_filtering:issue {name:'Add support for meta filtering'}) create (Add_support_for_meta_filtering)-[:Improvement]->(meta)
create (Add_support_meta_filtering_filtering_in_story_Support_specification_meta_filters_meta_filters_meta_filtering_:issue {name:'Add support - meta filtering - filtering in story - Support specification - meta filters - meta filters - meta filtering - '}) create (Add_support_meta_filtering_filtering_in_story_Support_specification_meta_filters_meta_filters_meta_filtering_)-[:Improvement]->(meta)
create (Run_Story)-[:Bug]->(meta)
create (Add_support)-[:Bug]->(meta)
create (Add_support_for_meta_filtering)-[:Improvement]->(meta)
create (Add_support_meta_filtering_filtering_in_story_Support_specification_meta_filters_meta_filters_meta_filtering_)-[:Improvement]->(meta)
create (default_report:issue {name:'default report'}) create (default_report)-[:Bug]->(StoryReporterBuilder)
create (current_working_directory_in_order:issue {name:'current working directory in order'}) create (current_working_directory_in_order)-[:Bug]->(StoryReporterBuilder)
create (has_field_outputLocationClass:issue {name:'has field outputLocationClass'}) create (has_field_outputLocationClass)-[:Improvement]->(StoryReporterBuilder)
create (is_by_default:issue {name:'is by default'}) create (is_by_default)-[:Improvement]->(StoryReporterBuilder)
create (using_location_of_jar:issue {name:'using location of jar'}) create (using_location_of_jar)-[:Improvement]->(StoryReporterBuilder)
create (default_report)-[:Bug]->(StoryReporterBuilder)
create (current_working_directory_in_order)-[:Bug]->(StoryReporterBuilder)
create (has_field_outputLocationClass)-[:Improvement]->(StoryReporterBuilder)
create (is_by_default)-[:Improvement]->(StoryReporterBuilder)
create (using_location_of_jar)-[:Improvement]->(StoryReporterBuilder)
create (default_report)-[:Bug]->(StoryReporterBuilder)
create (current_working_directory_in_order)-[:Bug]->(StoryReporterBuilder)
create (has_field_outputLocationClass)-[:Improvement]->(StoryReporterBuilder)
create (is_by_default)-[:Improvement]->(StoryReporterBuilder)
create (using_location_of_jar)-[:Improvement]->(StoryReporterBuilder)
create (StoryLocation:class {name:'StoryLocation', favoritecolor: 'green'}) create (default_report)-[:Bug]->(StoryLocation)
create (current_working_directory_in_order)-[:Bug]->(StoryLocation)
create (has_field_outputLocationClass)-[:Improvement]->(StoryLocation)
create (is_by_default)-[:Improvement]->(StoryLocation)
create (using_location_of_jar)-[:Improvement]->(StoryLocation)
create (CCC_:issue {name:'|C|C|C| ||||'}) create (CCC_)-[:Bug]->(org_jbehave_core)
create (cause_exception:issue {name:'cause exception'}) create (cause_exception)-[:Improvement]->(org_jbehave_core)
create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___:issue {name:'Empty example - Empty example table - example table - Empty example table row - example table row - table row - table row values - row values - cause exception - Given the following example - following example - following example table - example table - parse the table - parse the table - following error - stack trace - Parsing the table - Parsing the table - last row - || || - '}) create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___)-[:Improvement]->(org_jbehave_core)
create (CCC_)-[:Bug]->(org_jbehave_core_embedder)
create (cause_exception)-[:Improvement]->(org_jbehave_core_embedder)
create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___)-[:Improvement]->(org_jbehave_core_embedder)
create (org_jbehave_core_model:package {name:'org_jbehave_core_model', favoritecolor: 'orange'}) create (CCC_)-[:Bug]->(org_jbehave_core_model)
create (cause_exception)-[:Improvement]->(org_jbehave_core_model)
create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___)-[:Improvement]->(org_jbehave_core_model)
create (CCC_)-[:Bug]->(org_jbehave_core_steps)
create (cause_exception)-[:Improvement]->(org_jbehave_core_steps)
create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___)-[:Improvement]->(org_jbehave_core_steps)
create (CCC_)-[:Bug]->(core)
create (cause_exception)-[:Improvement]->(core)
create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___)-[:Improvement]->(core)
create (CCC_)-[:Bug]->(embedder)
create (cause_exception)-[:Improvement]->(embedder)
create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___)-[:Improvement]->(embedder)
create (CCC_)-[:Bug]->(ExamplesTable)
create (cause_exception)-[:Improvement]->(ExamplesTable)
create (Empty_example_Empty_example_table_example_table_Empty_example_table_row_example_table_row_table_row_table_row_values_row_values_cause_exception_Given_the_following_example_following_example_following_example_table_example_table_parse_the_table_parse_the_table_following_error_stack_trace_Parsing_the_table_Parsing_the_table_last_row___)-[:Improvement]->(ExamplesTable)
create (new_step:issue {name:'new step'}) create (new_step)-[:Bug]->(keywords)
create (starting_keywords:issue {name:'starting keywords'}) create (starting_keywords)-[:Bug]->(keywords)
create (find_in_textual_acronym:issue {name:'find in textual acronym'}) create (find_in_textual_acronym)-[:Improvement]->(keywords)
create (identifies_second_occurrence_of_keyword:issue {name:'identifies second occurrence of keyword'}) create (identifies_second_occurrence_of_keyword)-[:Improvement]->(keywords)
create (starting_keywords_single_letter_textual_acronym_new_step_comprehensive_solution_identifies_the_second_occurrence_second_occurrence_keyword_in_scenario_scenario_text_allow_users_prefixing_the_starting_prefixing_the_starting_starting_work_same_line_:issue {name:'starting keywords - single letter - textual acronym - new step - comprehensive solution - identifies the second occurrence - second occurrence - keyword in scenario - scenario text - allow users - prefixing the starting - prefixing the starting - starting work - same line - '}) create (starting_keywords_single_letter_textual_acronym_new_step_comprehensive_solution_identifies_the_second_occurrence_second_occurrence_keyword_in_scenario_scenario_text_allow_users_prefixing_the_starting_prefixing_the_starting_starting_work_same_line_)-[:Improvement]->(keywords)
create (new_step)-[:Bug]->(after)
create (starting_keywords)-[:Bug]->(after)
create (find_in_textual_acronym)-[:Improvement]->(after)
create (identifies_second_occurrence_of_keyword)-[:Improvement]->(after)
create (starting_keywords_single_letter_textual_acronym_new_step_comprehensive_solution_identifies_the_second_occurrence_second_occurrence_keyword_in_scenario_scenario_text_allow_users_prefixing_the_starting_prefixing_the_starting_starting_work_same_line_)-[:Improvement]->(after)
create (new_step)-[:Bug]->(scenario)
create (starting_keywords)-[:Bug]->(scenario)
create (find_in_textual_acronym)-[:Improvement]->(scenario)
create (identifies_second_occurrence_of_keyword)-[:Improvement]->(scenario)
create (starting_keywords_single_letter_textual_acronym_new_step_comprehensive_solution_identifies_the_second_occurrence_second_occurrence_keyword_in_scenario_scenario_text_allow_users_prefixing_the_starting_prefixing_the_starting_starting_work_same_line_)-[:Improvement]->(scenario)
create (new_step)-[:Bug]->(scenario)
create (starting_keywords)-[:Bug]->(scenario)
create (find_in_textual_acronym)-[:Improvement]->(scenario)
create (identifies_second_occurrence_of_keyword)-[:Improvement]->(scenario)
create (starting_keywords_single_letter_textual_acronym_new_step_comprehensive_solution_identifies_the_second_occurrence_second_occurrence_keyword_in_scenario_scenario_text_allow_users_prefixing_the_starting_prefixing_the_starting_starting_work_same_line_)-[:Improvement]->(scenario)
create (new_step)-[:Bug]->(keywords)
create (starting_keywords)-[:Bug]->(keywords)
create (find_in_textual_acronym)-[:Improvement]->(keywords)
create (identifies_second_occurrence_of_keyword)-[:Improvement]->(keywords)
create (starting_keywords_single_letter_textual_acronym_new_step_comprehensive_solution_identifies_the_second_occurrence_second_occurrence_keyword_in_scenario_scenario_text_allow_users_prefixing_the_starting_prefixing_the_starting_starting_work_same_line_)-[:Improvement]->(keywords)
create (crude_approach:issue {name:'crude approach'}) create (crude_approach)-[:Bug]->(StoryReporterBuilder)
create (Improve_reporting:issue {name:'Improve reporting'}) create (Improve_reporting)-[:Bug]->(StoryReporterBuilder)
create (need_In_use_cases:issue {name:'need In use cases'}) create (need_In_use_cases)-[:Improvement]->(StoryReporterBuilder)
create (Improve_reporting_of_failure:issue {name:'Improve reporting of failure'}) create (Improve_reporting_of_failure)-[:Improvement]->(StoryReporterBuilder)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_:issue {name:'Improve reporting - Improve reporting of failure - reporting of failure - have the reportErrors - have the reportErrors - prints the failure - prints the failure - failure stack - failure stack trace - stack trace - crude approach - most use - most use cases - use cases - report the failure - report the failure - outcome failure - system failure - show failure - show failure message - failure message - message after step - stack trace - entire scenario - failure trace - failure trace flag - trace flag - provide an outcomes - provide an outcomes - outcomes table - verify multiple outcomes - multiple outcomes - failure trace - failure trace reporting - trace reporting - '}) create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(StoryReporterBuilder)
create (crude_approach)-[:Bug]->(outcome)
create (Improve_reporting)-[:Bug]->(outcome)
create (need_In_use_cases)-[:Improvement]->(outcome)
create (Improve_reporting_of_failure)-[:Improvement]->(outcome)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(outcome)
create (crude_approach)-[:Bug]->(after)
create (Improve_reporting)-[:Bug]->(after)
create (need_In_use_cases)-[:Improvement]->(after)
create (Improve_reporting_of_failure)-[:Improvement]->(after)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(after)
create (crude_approach)-[:Bug]->(outcome)
create (Improve_reporting)-[:Bug]->(outcome)
create (need_In_use_cases)-[:Improvement]->(outcome)
create (Improve_reporting_of_failure)-[:Improvement]->(outcome)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(outcome)
create (crude_approach)-[:Bug]->(scenario)
create (Improve_reporting)-[:Bug]->(scenario)
create (need_In_use_cases)-[:Improvement]->(scenario)
create (Improve_reporting_of_failure)-[:Improvement]->(scenario)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(scenario)
create (crude_approach)-[:Bug]->(scenario)
create (Improve_reporting)-[:Bug]->(scenario)
create (need_In_use_cases)-[:Improvement]->(scenario)
create (Improve_reporting_of_failure)-[:Improvement]->(scenario)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(scenario)
create (crude_approach)-[:Bug]->(print)
create (Improve_reporting)-[:Bug]->(print)
create (need_In_use_cases)-[:Improvement]->(print)
create (Improve_reporting_of_failure)-[:Improvement]->(print)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(print)
create (crude_approach)-[:Bug]->(StoryReporterBuilder)
create (Improve_reporting)-[:Bug]->(StoryReporterBuilder)
create (need_In_use_cases)-[:Improvement]->(StoryReporterBuilder)
create (Improve_reporting_of_failure)-[:Improvement]->(StoryReporterBuilder)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(StoryReporterBuilder)
create (crude_approach)-[:Bug]->(StoryReporterBuilder)
create (Improve_reporting)-[:Bug]->(StoryReporterBuilder)
create (need_In_use_cases)-[:Improvement]->(StoryReporterBuilder)
create (Improve_reporting_of_failure)-[:Improvement]->(StoryReporterBuilder)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(StoryReporterBuilder)
create (crude_approach)-[:Bug]->(show)
create (Improve_reporting)-[:Bug]->(show)
create (need_In_use_cases)-[:Improvement]->(show)
create (Improve_reporting_of_failure)-[:Improvement]->(show)
create (Improve_reporting_Improve_reporting_of_failure_reporting_of_failure_have_the_reportErrors_have_the_reportErrors_prints_the_failure_prints_the_failure_failure_stack_failure_stack_trace_stack_trace_crude_approach_most_use_most_use_cases_use_cases_report_the_failure_report_the_failure_outcome_failure_system_failure_show_failure_show_failure_message_failure_message_message_after_step_stack_trace_entire_scenario_failure_trace_failure_trace_flag_trace_flag_provide_an_outcomes_provide_an_outcomes_outcomes_table_verify_multiple_outcomes_multiple_outcomes_failure_trace_failure_trace_reporting_trace_reporting_)-[:Improvement]->(show)
create (BigDecimal_parameter_conversion:issue {name:'BigDecimal parameter conversion'}) create (BigDecimal_parameter_conversion)-[:Bug]->(ant)
create (makes_exponential_type_representation:issue {name:'makes exponential type representation'}) create (makes_exponential_type_representation)-[:Bug]->(ant)
create (fails_for_numbers:issue {name:'fails for numbers'}) create (fails_for_numbers)-[:Improvement]->(ant)
create (BigDecimal_parameter_BigDecimal_parameter_conversion_parameter_conversion_significant_digits_makes_a_exponential_type_exponential_type_exponential_type_representation_type_representation_:issue {name:'BigDecimal parameter - BigDecimal parameter conversion - parameter conversion - significant digits - makes a exponential type - exponential type - exponential type representation - type representation - '}) create (BigDecimal_parameter_BigDecimal_parameter_conversion_parameter_conversion_significant_digits_makes_a_exponential_type_exponential_type_exponential_type_representation_type_representation_)-[:Improvement]->(ant)
create (toString:class {name:'toString', favoritecolor: 'green'}) create (BigDecimal_parameter_conversion)-[:Bug]->(toString)
create (makes_exponential_type_representation)-[:Bug]->(toString)
create (fails_for_numbers)-[:Improvement]->(toString)
create (BigDecimal_parameter_BigDecimal_parameter_conversion_parameter_conversion_significant_digits_makes_a_exponential_type_exponential_type_exponential_type_representation_type_representation_)-[:Improvement]->(toString)
create (BigDecimal_parameter_conversion)-[:Bug]->(toString)
create (makes_exponential_type_representation)-[:Bug]->(toString)
create (fails_for_numbers)-[:Improvement]->(toString)
create (BigDecimal_parameter_BigDecimal_parameter_conversion_parameter_conversion_significant_digits_makes_a_exponential_type_exponential_type_exponential_type_representation_type_representation_)-[:Improvement]->(toString)
create (lifecycle_step:issue {name:'lifecycle step'}) create (lifecycle_step)-[:Bug]->(given)
create (change_in_order_things:issue {name:'change in order things'}) create (change_in_order_things)-[:Bug]->(given)
create (using_jBehave:issue {name:'using jBehave'}) create (using_jBehave)-[:Improvement]->(given)
create (be_in_error:issue {name:'be in error'}) create (be_in_error)-[:Improvement]->(given)
create (adding_printouts_in_methods:issue {name:'adding printouts in methods'}) create (adding_printouts_in_methods)-[:Improvement]->(given)
create (lifecycle_step)-[:Bug]->(lifecycle)
create (change_in_order_things)-[:Bug]->(lifecycle)
create (using_jBehave)-[:Improvement]->(lifecycle)
create (be_in_error)-[:Improvement]->(lifecycle)
create (adding_printouts_in_methods)-[:Improvement]->(lifecycle)
create (lifecycle_step)-[:Bug]->(outcome)
create (change_in_order_things)-[:Bug]->(outcome)
create (using_jBehave)-[:Improvement]->(outcome)
create (be_in_error)-[:Improvement]->(outcome)
create (adding_printouts_in_methods)-[:Improvement]->(outcome)
create (lifecycle_step)-[:Bug]->(after)
create (change_in_order_things)-[:Bug]->(after)
create (using_jBehave)-[:Improvement]->(after)
create (be_in_error)-[:Improvement]->(after)
create (adding_printouts_in_methods)-[:Improvement]->(after)
create (lifecycle_step)-[:Bug]->(lifecycle)
create (change_in_order_things)-[:Bug]->(lifecycle)
create (using_jBehave)-[:Improvement]->(lifecycle)
create (be_in_error)-[:Improvement]->(lifecycle)
create (adding_printouts_in_methods)-[:Improvement]->(lifecycle)
create (lifecycle_step)-[:Bug]->(outcome)
create (change_in_order_things)-[:Bug]->(outcome)
create (using_jBehave)-[:Improvement]->(outcome)
create (be_in_error)-[:Improvement]->(outcome)
create (adding_printouts_in_methods)-[:Improvement]->(outcome)
create (lifecycle_step)-[:Bug]->(scenario)
create (change_in_order_things)-[:Bug]->(scenario)
create (using_jBehave)-[:Improvement]->(scenario)
create (be_in_error)-[:Improvement]->(scenario)
create (adding_printouts_in_methods)-[:Improvement]->(scenario)
create (lifecycle_step)-[:Bug]->(scenario)
create (change_in_order_things)-[:Bug]->(scenario)
create (using_jBehave)-[:Improvement]->(scenario)
create (be_in_error)-[:Improvement]->(scenario)
create (adding_printouts_in_methods)-[:Improvement]->(scenario)
create (lifecycle_step)-[:Bug]->(print)
create (change_in_order_things)-[:Bug]->(print)
create (using_jBehave)-[:Improvement]->(print)
create (be_in_error)-[:Improvement]->(print)
create (adding_printouts_in_methods)-[:Improvement]->(print)
create (Jbehave_plugin:issue {name:'Jbehave plugin'}) create (Jbehave_plugin)-[:Bug]->(maven)
create (run_multiple_JunitStories:issue {name:'run multiple JunitStories'}) create (run_multiple_JunitStories)-[:Bug]->(maven)
create (calls_in_method:issue {name:'calls in method'}) create (calls_in_method)-[:Improvement]->(maven)
create (have_test_project_with_two_TestRunner_classes:issue {name:'have test project with two TestRunner classes'}) create (have_test_project_with_two_TestRunner_classes)-[:Improvement]->(maven)
create (maven_plugin_have_a_test_have_a_test_test_project_test_runners_completes_the_first_test_first_test_first_test_runnber_test_runnber_second_test_second_test_runner_test_runner_got_the_RejectedExecutionException_got_the_RejectedExecutionException_running_stoies_:issue {name:'maven plugin - have a test - have a test - test project - test runners - completes the first test - first test - first test runnber - test runnber - second test - second test runner - test runner - got the RejectedExecutionException - got the RejectedExecutionException - running stoies - '}) create (maven_plugin_have_a_test_have_a_test_test_project_test_runners_completes_the_first_test_first_test_first_test_runnber_test_runnber_second_test_second_test_runner_test_runner_got_the_RejectedExecutionException_got_the_RejectedExecutionException_running_stoies_)-[:Improvement]->(maven)
create (Jbehave_plugin)-[:Bug]->(useEmbedder)
create (run_multiple_JunitStories)-[:Bug]->(useEmbedder)
create (calls_in_method)-[:Improvement]->(useEmbedder)
create (have_test_project_with_two_TestRunner_classes)-[:Improvement]->(useEmbedder)
create (maven_plugin_have_a_test_have_a_test_test_project_test_runners_completes_the_first_test_first_test_first_test_runnber_test_runnber_second_test_second_test_runner_test_runner_got_the_RejectedExecutionException_got_the_RejectedExecutionException_running_stoies_)-[:Improvement]->(useEmbedder)
create (Jbehave_plugin)-[:Bug]->(useEmbedder)
create (run_multiple_JunitStories)-[:Bug]->(useEmbedder)
create (calls_in_method)-[:Improvement]->(useEmbedder)
create (have_test_project_with_two_TestRunner_classes)-[:Improvement]->(useEmbedder)
create (maven_plugin_have_a_test_have_a_test_test_project_test_runners_completes_the_first_test_first_test_first_test_runnber_test_runnber_second_test_second_test_runner_test_runner_got_the_RejectedExecutionException_got_the_RejectedExecutionException_running_stoies_)-[:Improvement]->(useEmbedder)
create (Jbehave_plugin)-[:Bug]->(embedder)
create (run_multiple_JunitStories)-[:Bug]->(embedder)
create (calls_in_method)-[:Improvement]->(embedder)
create (have_test_project_with_two_TestRunner_classes)-[:Improvement]->(embedder)
create (maven_plugin_have_a_test_have_a_test_test_project_test_runners_completes_the_first_test_first_test_first_test_runnber_test_runnber_second_test_second_test_runner_test_runner_got_the_RejectedExecutionException_got_the_RejectedExecutionException_running_stoies_)-[:Improvement]->(embedder)
create (Jbehave_plugin)-[:Bug]->(failed)
create (run_multiple_JunitStories)-[:Bug]->(failed)
create (calls_in_method)-[:Improvement]->(failed)
create (have_test_project_with_two_TestRunner_classes)-[:Improvement]->(failed)
create (maven_plugin_have_a_test_have_a_test_test_project_test_runners_completes_the_first_test_first_test_first_test_runnber_test_runnber_second_test_second_test_runner_test_runner_got_the_RejectedExecutionException_got_the_RejectedExecutionException_running_stoies_)-[:Improvement]->(failed)
create (have_complex_scenarios:issue {name:'have complex scenarios'}) create (have_complex_scenarios)-[:Bug]->(after)
create (pending_after_first_step:issue {name:'pending after first step'}) create (pending_after_first_step)-[:Bug]->(after)
create (have_complex_scenarios_with_use:issue {name:'have complex scenarios with use'}) create (have_complex_scenarios_with_use)-[:Improvement]->(after)
create (have_complex_scenarios_complex_scenarios_:issue {name:'have complex scenarios - complex scenarios - '}) create (have_complex_scenarios_complex_scenarios_)-[:Improvement]->(after)
create (have_complex_scenarios)-[:Bug]->(pending)
create (pending_after_first_step)-[:Bug]->(pending)
create (have_complex_scenarios_with_use)-[:Improvement]->(pending)
create (have_complex_scenarios_complex_scenarios_)-[:Improvement]->(pending)
create (have_complex_scenarios)-[:Bug]->(scenario)
create (pending_after_first_step)-[:Bug]->(scenario)
create (have_complex_scenarios_with_use)-[:Improvement]->(scenario)
create (have_complex_scenarios_complex_scenarios_)-[:Improvement]->(scenario)
create (have_complex_scenarios)-[:Bug]->(pending)
create (pending_after_first_step)-[:Bug]->(pending)
create (have_complex_scenarios_with_use)-[:Improvement]->(pending)
create (have_complex_scenarios_complex_scenarios_)-[:Improvement]->(pending)
create (have_complex_scenarios)-[:Bug]->(scenario)
create (pending_after_first_step)-[:Bug]->(scenario)
create (have_complex_scenarios_with_use)-[:Improvement]->(scenario)
create (have_complex_scenarios_complex_scenarios_)-[:Improvement]->(scenario)
create (locale_Add:issue {name:'locale Add'}) create (locale_Add)-[:Bug]->(keywords)
create (Add_support)-[:Bug]->(keywords)
create (Add_support_for_Add_support:issue {name:'Add support for Add support'}) create (Add_support_for_Add_support)-[:Improvement]->(keywords)
create (locale_Add)-[:Bug]->(keywords)
create (Add_support)-[:Bug]->(keywords)
create (Add_support_for_Add_support)-[:Improvement]->(keywords)
create (Duration_calculation:issue {name:'Duration calculation'}) create (Duration_calculation)-[:Bug]->(duration)
create (returns_elapsed_duration:issue {name:'returns elapsed duration'}) create (returns_elapsed_duration)-[:Improvement]->(duration)
create (results_in_round:issue {name:'results in round'}) create (results_in_round)-[:Improvement]->(duration)
create (returns_elapsed_duration_by_method_getDurationInMillis:issue {name:'returns elapsed duration by method getDurationInMillis'}) create (returns_elapsed_duration_by_method_getDurationInMillis)-[:Improvement]->(duration)
create (API_public:issue {name:'API public'}) create (API_public)-[:Bug]->(ExamplesTable)
create (perform_manipulations:issue {name:'perform manipulations'}) create (perform_manipulations)-[:Bug]->(ExamplesTable)
create (perform_manipulations_with_ExamplesTable:issue {name:'perform manipulations with ExamplesTable'}) create (perform_manipulations_with_ExamplesTable)-[:Improvement]->(ExamplesTable)
create (API_public_API_public_perform_manipulations_proper_way_:issue {name:'API public - API public - perform manipulations - proper way - '}) create (API_public_API_public_perform_manipulations_proper_way_)-[:Improvement]->(ExamplesTable)
create (Summary_report:issue {name:'Summary report'}) create (Summary_report)-[:Bug]->(failed)
create (lack_of_stats_file:issue {name:'lack of stats file'}) create (lack_of_stats_file)-[:Bug]->(failed)
create (highlights_problem:issue {name:'highlights problem'}) create (highlights_problem)-[:Improvement]->(failed)
create (coincides_with_stats_file:issue {name:'coincides with stats file'}) create (coincides_with_stats_file)-[:Improvement]->(failed)
create (highlights_problem_with_missing_stats_files:issue {name:'highlights problem with missing stats files'}) create (highlights_problem_with_missing_stats_files)-[:Improvement]->(failed)
create (Summary_report_highlights_problem_missing_stats_missing_stats_files_stats_files_false_positive_results_positive_results_firefox_report_summary_report_run_no_stats_run_no_stats_stats_file_lack_of_stats_stats_file_missing_stats_missing_stats_files_stats_files_missing_stats_missing_stats_file_stats_file_more_test_more_test_failures_test_failures_:issue {name:'Summary report - highlights problem - missing stats - missing stats files - stats files - false positive results - positive results - firefox report - summary report - run no stats - run no stats - stats file - lack of stats - stats file - missing stats - missing stats files - stats files - missing stats - missing stats file - stats file - more test - more test failures - test failures - '}) create (Summary_report_highlights_problem_missing_stats_missing_stats_files_stats_files_false_positive_results_positive_results_firefox_report_summary_report_run_no_stats_run_no_stats_stats_file_lack_of_stats_stats_file_missing_stats_missing_stats_files_stats_files_missing_stats_missing_stats_file_stats_file_more_test_more_test_failures_test_failures_)-[:Bug]->(failed)
create (Summary_report)-[:Bug]->(given)
create (lack_of_stats_file)-[:Bug]->(given)
create (highlights_problem)-[:Improvement]->(given)
create (coincides_with_stats_file)-[:Improvement]->(given)
create (highlights_problem_with_missing_stats_files)-[:Improvement]->(given)
create (Summary_report_highlights_problem_missing_stats_missing_stats_files_stats_files_false_positive_results_positive_results_firefox_report_summary_report_run_no_stats_run_no_stats_stats_file_lack_of_stats_stats_file_missing_stats_missing_stats_files_stats_files_missing_stats_missing_stats_file_stats_file_more_test_more_test_failures_test_failures_)-[:Bug]->(given)
create (Summary_report)-[:Bug]->(show)
create (lack_of_stats_file)-[:Bug]->(show)
create (highlights_problem)-[:Improvement]->(show)
create (coincides_with_stats_file)-[:Improvement]->(show)
create (highlights_problem_with_missing_stats_files)-[:Improvement]->(show)
create (Summary_report_highlights_problem_missing_stats_missing_stats_files_stats_files_false_positive_results_positive_results_firefox_report_summary_report_run_no_stats_run_no_stats_stats_file_lack_of_stats_stats_file_missing_stats_missing_stats_files_stats_files_missing_stats_missing_stats_file_stats_file_more_test_more_test_failures_test_failures_)-[:Bug]->(show)
create (default_value:issue {name:'default value'}) create (default_value)-[:Bug]->(ExamplesTable)
create (Changing_value_separator:issue {name:'Changing value separator'}) create (Changing_value_separator)-[:Bug]->(ExamplesTable)
create (Changing_value_separator_of_JBehave:issue {name:'Changing value separator of JBehave'}) create (Changing_value_separator_of_JBehave)-[:Improvement]->(ExamplesTable)
create (Changing_the_value_Changing_the_value_value_separator_faced_a_problem_faced_a_problem_default_value_default_value_separator_value_separator_example_table_got_a__got_a___character__character_screenshot_character_screenshot_:issue {name:'Changing the value - Changing the value - value separator - faced a problem - faced a problem - default value - default value separator - value separator - example table - got a | - got a | - | character - | character screenshot - character screenshot - '}) create (Changing_the_value_Changing_the_value_value_separator_faced_a_problem_faced_a_problem_default_value_default_value_separator_value_separator_example_table_got_a__got_a___character__character_screenshot_character_screenshot_)-[:Improvement]->(ExamplesTable)
create (usage_example:issue {name:'usage example'}) create (usage_example)-[:Bug]->(ExamplesTable)
create (Adding_new_Parameter_Converter:issue {name:'Adding new Parameter Converter'}) create (Adding_new_Parameter_Converter)-[:Bug]->(ExamplesTable)
create (Adding_new_Parameter_Converter_for_Json_support:issue {name:'Adding new Parameter Converter for Json support'}) create (Adding_new_Parameter_Converter_for_Json_support)-[:Improvement]->(ExamplesTable)
create (lifecycle_steps:issue {name:'lifecycle steps'}) create (lifecycle_steps)-[:Bug]->(ant)
create (Add_Lifecycle_Scope:issue {name:'Add Lifecycle Scope'}) create (Add_Lifecycle_Scope)-[:Bug]->(ant)
create (support_execution_of_beforeafter_steps:issue {name:'support execution of beforeafter steps'}) create (support_execution_of_beforeafter_steps)-[:Improvement]->(ant)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_:issue {name:'lifecycle steps - Adding a new lifecycle - new lifecycle - new lifecycle scope - lifecycle scope - support the execution - support the execution - execution of beforeafter - beforeafter steps - scenario and story - scenario and story level - story level - '}) create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(ant)
create (lifecycle_steps)-[:Bug]->(lifecycle)
create (Add_Lifecycle_Scope)-[:Bug]->(lifecycle)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(lifecycle)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(lifecycle)
create (lifecycle_steps)-[:Bug]->(after)
create (Add_Lifecycle_Scope)-[:Bug]->(after)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(after)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(after)
create (lifecycle_steps)-[:Bug]->(lifecycle)
create (Add_Lifecycle_Scope)-[:Bug]->(lifecycle)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(lifecycle)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(lifecycle)
create (lifecycle_steps)-[:Bug]->(scenario)
create (Add_Lifecycle_Scope)-[:Bug]->(scenario)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(scenario)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(scenario)
create (lifecycle_steps)-[:Bug]->(scope)
create (Add_Lifecycle_Scope)-[:Bug]->(scope)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(scope)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(scope)
create (lifecycle_steps)-[:Bug]->(scenario)
create (Add_Lifecycle_Scope)-[:Bug]->(scenario)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(scenario)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(scenario)
create (lifecycle_steps)-[:Bug]->(scope)
create (Add_Lifecycle_Scope)-[:Bug]->(scope)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(scope)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(scope)
create (lifecycle_steps)-[:Bug]->(Lifecycle)
create (Add_Lifecycle_Scope)-[:Bug]->(Lifecycle)
create (support_execution_of_beforeafter_steps)-[:Improvement]->(Lifecycle)
create (lifecycle_steps_Adding_a_new_lifecycle_new_lifecycle_new_lifecycle_scope_lifecycle_scope_support_the_execution_support_the_execution_execution_of_beforeafter_beforeafter_steps_scenario_and_story_scenario_and_story_level_story_level_)-[:Improvement]->(Lifecycle)
create (two_years:issue {name:'two years'}) create (two_years)-[:Bug]->(maven)
create (running_business_logic:issue {name:'running business logic'}) create (running_business_logic)-[:Bug]->(maven)
create (play_with_jBehave:issue {name:'play with jBehave'}) create (play_with_jBehave)-[:Improvement]->(maven)
create (creates_logger_without_embedder_CL:issue {name:'creates logger without embedder CL'}) create (creates_logger_without_embedder_CL)-[:Improvement]->(maven)
create (running_a_business_running_a_business_business_logic_creates_a_logger_creates_a_logger_force_the_binding_force_the_binding_implementing_a_static_StaticLoggerBinder_static_StaticLoggerBinder_seems_the_issue_seems_the_issue_Attached_a_simplified_project_simplified_project_reproduces_the_issue_reproduces_the_issue_:issue {name:'running a business - running a business - business logic - creates a logger - creates a logger - force the binding - force the binding - implementing a static StaticLoggerBinder - static StaticLoggerBinder - seems the issue - seems the issue - Attached a simplified project - simplified project - reproduces the issue - reproduces the issue - '}) create (running_a_business_running_a_business_business_logic_creates_a_logger_creates_a_logger_force_the_binding_force_the_binding_implementing_a_static_StaticLoggerBinder_static_StaticLoggerBinder_seems_the_issue_seems_the_issue_Attached_a_simplified_project_simplified_project_reproduces_the_issue_reproduces_the_issue_)-[:Improvement]->(maven)
create (two_years)-[:Bug]->(embedder)
create (running_business_logic)-[:Bug]->(embedder)
create (play_with_jBehave)-[:Improvement]->(embedder)
create (creates_logger_without_embedder_CL)-[:Improvement]->(embedder)
create (running_a_business_running_a_business_business_logic_creates_a_logger_creates_a_logger_force_the_binding_force_the_binding_implementing_a_static_StaticLoggerBinder_static_StaticLoggerBinder_seems_the_issue_seems_the_issue_Attached_a_simplified_project_simplified_project_reproduces_the_issue_reproduces_the_issue_)-[:Improvement]->(embedder)
create (two_years)-[:Bug]->(EmbedderClassLoader)
create (running_business_logic)-[:Bug]->(EmbedderClassLoader)
create (play_with_jBehave)-[:Improvement]->(EmbedderClassLoader)
create (creates_logger_without_embedder_CL)-[:Improvement]->(EmbedderClassLoader)
create (running_a_business_running_a_business_business_logic_creates_a_logger_creates_a_logger_force_the_binding_force_the_binding_implementing_a_static_StaticLoggerBinder_static_StaticLoggerBinder_seems_the_issue_seems_the_issue_Attached_a_simplified_project_simplified_project_reproduces_the_issue_reproduces_the_issue_)-[:Improvement]->(EmbedderClassLoader)
create (DirectExecutorService_JBehave:issue {name:'DirectExecutorService JBehave'}) create (DirectExecutorService_JBehave)-[:Bug]->(core)
create (SameThreadExecutors_class_in_jbehave_core:issue {name:'SameThreadExecutors class in jbehave core'}) create (SameThreadExecutors_class_in_jbehave_core)-[:Bug]->(core)
create (uses_Guava_method:issue {name:'uses Guava method'}) create (uses_Guava_method)-[:Improvement]->(core)
create (starting_from_version:issue {name:'starting from version'}) create (starting_from_version)-[:Improvement]->(core)
create (DirectExecutorService_JBehave)-[:Bug]->(google)
create (SameThreadExecutors_class_in_jbehave_core)-[:Bug]->(google)
create (uses_Guava_method)-[:Improvement]->(google)
create (starting_from_version)-[:Improvement]->(google)
create (DirectExecutorService:class {name:'DirectExecutorService', favoritecolor: 'green'}) create (DirectExecutorService_JBehave)-[:Bug]->(DirectExecutorService)
create (SameThreadExecutors_class_in_jbehave_core)-[:Bug]->(DirectExecutorService)
create (uses_Guava_method)-[:Improvement]->(DirectExecutorService)
create (starting_from_version)-[:Improvement]->(DirectExecutorService)
create (SameThreadExecutors:class {name:'SameThreadExecutors', favoritecolor: 'green'}) create (DirectExecutorService_JBehave)-[:Bug]->(SameThreadExecutors)
create (SameThreadExecutors_class_in_jbehave_core)-[:Bug]->(SameThreadExecutors)
create (uses_Guava_method)-[:Improvement]->(SameThreadExecutors)
create (starting_from_version)-[:Improvement]->(SameThreadExecutors)
create (inlined_separators:issue {name:'inlined separators'}) create (inlined_separators)-[:Bug]->(org_jbehave_core)
create (fails_with_error:issue {name:'fails with error'}) create (fails_with_error)-[:Improvement]->(org_jbehave_core)
create (take_possible_custom_separators_into_account:issue {name:'take possible custom separators into account'}) create (take_possible_custom_separators_into_account)-[:Improvement]->(org_jbehave_core)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_:issue {name:'inlined separators - inlined separators - contain default - contain default header - default header - default header separator - header separator - Story path - root cause - wrong detection - isTableString input - possible custom - possible custom separators - custom separators - '}) create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(org_jbehave_core)
create (org_jbehave_core_io:package {name:'org_jbehave_core_io', favoritecolor: 'orange'}) create (inlined_separators)-[:Bug]->(org_jbehave_core_io)
create (fails_with_error)-[:Improvement]->(org_jbehave_core_io)
create (take_possible_custom_separators_into_account)-[:Improvement]->(org_jbehave_core_io)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(org_jbehave_core_io)
create (inlined_separators)-[:Bug]->(org_jbehave_core_model)
create (fails_with_error)-[:Improvement]->(org_jbehave_core_model)
create (take_possible_custom_separators_into_account)-[:Improvement]->(org_jbehave_core_model)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(org_jbehave_core_model)
create (inlined_separators)-[:Bug]->(core)
create (fails_with_error)-[:Improvement]->(core)
create (take_possible_custom_separators_into_account)-[:Improvement]->(core)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(core)
create (inlined_separators)-[:Bug]->(keywords)
create (fails_with_error)-[:Improvement]->(keywords)
create (take_possible_custom_separators_into_account)-[:Improvement]->(keywords)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(keywords)
create (examplesTable:class {name:'examplesTable', favoritecolor: 'green'}) create (inlined_separators)-[:Bug]->(examplesTable)
create (fails_with_error)-[:Improvement]->(examplesTable)
create (take_possible_custom_separators_into_account)-[:Improvement]->(examplesTable)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(examplesTable)
create (examplesTableHeaderSeparator:class {name:'examplesTableHeaderSeparator', favoritecolor: 'green'}) create (inlined_separators)-[:Bug]->(examplesTableHeaderSeparator)
create (fails_with_error)-[:Improvement]->(examplesTableHeaderSeparator)
create (take_possible_custom_separators_into_account)-[:Improvement]->(examplesTableHeaderSeparator)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(examplesTableHeaderSeparator)
create (ignorable:class {name:'ignorable', favoritecolor: 'green'}) create (inlined_separators)-[:Bug]->(ignorable)
create (fails_with_error)-[:Improvement]->(ignorable)
create (take_possible_custom_separators_into_account)-[:Improvement]->(ignorable)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(ignorable)
create (inlined_separators)-[:Bug]->(examplesTable)
create (fails_with_error)-[:Improvement]->(examplesTable)
create (take_possible_custom_separators_into_account)-[:Improvement]->(examplesTable)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(examplesTable)
create (inlined_separators)-[:Bug]->(examplesTableHeaderSeparator)
create (fails_with_error)-[:Improvement]->(examplesTableHeaderSeparator)
create (take_possible_custom_separators_into_account)-[:Improvement]->(examplesTableHeaderSeparator)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(examplesTableHeaderSeparator)
create (inlined_separators)-[:Bug]->(ignorable)
create (fails_with_error)-[:Improvement]->(ignorable)
create (take_possible_custom_separators_into_account)-[:Improvement]->(ignorable)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(ignorable)
create (inlined_separators)-[:Bug]->(keywords)
create (fails_with_error)-[:Improvement]->(keywords)
create (take_possible_custom_separators_into_account)-[:Improvement]->(keywords)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(keywords)
create (inlined_separators)-[:Bug]->(LoadFromClasspath)
create (fails_with_error)-[:Improvement]->(LoadFromClasspath)
create (take_possible_custom_separators_into_account)-[:Improvement]->(LoadFromClasspath)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(LoadFromClasspath)
create (inlined_separators)-[:Bug]->(ExamplesTable)
create (fails_with_error)-[:Improvement]->(ExamplesTable)
create (take_possible_custom_separators_into_account)-[:Improvement]->(ExamplesTable)
create (inlined_separators_inlined_separators_contain_default_contain_default_header_default_header_default_header_separator_header_separator_Story_path_root_cause_wrong_detection_isTableString_input_possible_custom_possible_custom_separators_custom_separators_)-[:Bug]->(ExamplesTable)
create (story_parsing:issue {name:'story parsing'}) create (story_parsing)-[:Bug]->(after)
create (substitute_steps:issue {name:'substitute steps'}) create (substitute_steps)-[:Bug]->(after)
create (means_after_story:issue {name:'means after story'}) create (means_after_story)-[:Improvement]->(after)
create (substitute_steps_in_templates:issue {name:'substitute steps in templates'}) create (substitute_steps_in_templates)-[:Improvement]->(after)
create (substitute_steps_substitute_steps_in_templates_steps_in_templates_following_functionality_have_many_steps_many_steps_use_the_parameterized_values_parameterized_values_cover_all_necessary_steps_necessary_steps_take_place_story_parsing_have_a_scenario_have_a_scenario_More_concrete_example_concrete_example_Given_a_step_Given_a_step_Given_a_step_Given_a_step_useful_functionality_provide_ideas_provide_ideas_for_improvement_ideas_for_improvement_:issue {name:'substitute steps - substitute steps in templates - steps in templates - following functionality - have many steps - many steps - use the parameterized values - parameterized values - cover all necessary steps - necessary steps - take place - story parsing - have a scenario - have a scenario - More concrete example - concrete example - Given a step - Given a step - Given a step - Given a step - useful functionality - provide ideas - provide ideas for improvement - ideas for improvement - '}) create (substitute_steps_substitute_steps_in_templates_steps_in_templates_following_functionality_have_many_steps_many_steps_use_the_parameterized_values_parameterized_values_cover_all_necessary_steps_necessary_steps_take_place_story_parsing_have_a_scenario_have_a_scenario_More_concrete_example_concrete_example_Given_a_step_Given_a_step_Given_a_step_Given_a_step_useful_functionality_provide_ideas_provide_ideas_for_improvement_ideas_for_improvement_)-[:Improvement]->(after)
create (story_parsing)-[:Bug]->(scenario)
create (substitute_steps)-[:Bug]->(scenario)
create (means_after_story)-[:Improvement]->(scenario)
create (substitute_steps_in_templates)-[:Improvement]->(scenario)
create (substitute_steps_substitute_steps_in_templates_steps_in_templates_following_functionality_have_many_steps_many_steps_use_the_parameterized_values_parameterized_values_cover_all_necessary_steps_necessary_steps_take_place_story_parsing_have_a_scenario_have_a_scenario_More_concrete_example_concrete_example_Given_a_step_Given_a_step_Given_a_step_Given_a_step_useful_functionality_provide_ideas_provide_ideas_for_improvement_ideas_for_improvement_)-[:Improvement]->(scenario)
create (story_parsing)-[:Bug]->(scenario)
create (substitute_steps)-[:Bug]->(scenario)
create (means_after_story)-[:Improvement]->(scenario)
create (substitute_steps_in_templates)-[:Improvement]->(scenario)
create (substitute_steps_substitute_steps_in_templates_steps_in_templates_following_functionality_have_many_steps_many_steps_use_the_parameterized_values_parameterized_values_cover_all_necessary_steps_necessary_steps_take_place_story_parsing_have_a_scenario_have_a_scenario_More_concrete_example_concrete_example_Given_a_step_Given_a_step_Given_a_step_Given_a_step_useful_functionality_provide_ideas_provide_ideas_for_improvement_ideas_for_improvement_)-[:Improvement]->(scenario)
create (Scenario_metadata:issue {name:'Scenario metadata'}) create (Scenario_metadata)-[:Bug]->(ant)
create (using_JBehave:issue {name:'using JBehave'}) create (using_JBehave)-[:Bug]->(ant)
create (have_about_scenarios:issue {name:'have about scenarios'}) create (have_about_scenarios)-[:Improvement]->(ant)
create (downgrade_usage_of_features:issue {name:'downgrade usage of features'}) create (downgrade_usage_of_features)-[:Improvement]->(ant)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_:issue {name:'written a failure - written a failure - failure scenarios - failure scenarios rerun - scenarios rerun - scenarios rerun mechanism - rerun mechanism - fetching scenario - meta tags - meta info - Medium priority - Open state - latest features - reporting this issue - reporting this issue - Highest priority - '}) create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(ant)
create (Scenario_metadata)-[:Bug]->(meta)
create (using_JBehave)-[:Bug]->(meta)
create (have_about_scenarios)-[:Improvement]->(meta)
create (downgrade_usage_of_features)-[:Improvement]->(meta)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(meta)
create (Scenario_metadata)-[:Bug]->(after)
create (using_JBehave)-[:Bug]->(after)
create (have_about_scenarios)-[:Improvement]->(after)
create (downgrade_usage_of_features)-[:Improvement]->(after)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(after)
create (Scenario_metadata)-[:Bug]->(meta)
create (using_JBehave)-[:Bug]->(meta)
create (have_about_scenarios)-[:Improvement]->(meta)
create (downgrade_usage_of_features)-[:Improvement]->(meta)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(meta)
create (Scenario_metadata)-[:Bug]->(priority)
create (using_JBehave)-[:Bug]->(priority)
create (have_about_scenarios)-[:Improvement]->(priority)
create (downgrade_usage_of_features)-[:Improvement]->(priority)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(priority)
create (Scenario_metadata)-[:Bug]->(scenario)
create (using_JBehave)-[:Bug]->(scenario)
create (have_about_scenarios)-[:Improvement]->(scenario)
create (downgrade_usage_of_features)-[:Improvement]->(scenario)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(scenario)
create (Scenario_metadata)-[:Bug]->(priority)
create (using_JBehave)-[:Bug]->(priority)
create (have_about_scenarios)-[:Improvement]->(priority)
create (downgrade_usage_of_features)-[:Improvement]->(priority)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(priority)
create (Scenario_metadata)-[:Bug]->(scenario)
create (using_JBehave)-[:Bug]->(scenario)
create (have_about_scenarios)-[:Improvement]->(scenario)
create (downgrade_usage_of_features)-[:Improvement]->(scenario)
create (written_a_failure_written_a_failure_failure_scenarios_failure_scenarios_rerun_scenarios_rerun_scenarios_rerun_mechanism_rerun_mechanism_fetching_scenario_meta_tags_meta_info_Medium_priority_Open_state_latest_features_reporting_this_issue_reporting_this_issue_Highest_priority_)-[:Improvement]->(scenario)
create (jbehave_needle:issue {name:'jbehave needle'}) create (jbehave_needle)-[:Bug]->(maven)
create (compile_Project:issue {name:'compile Project'}) create (compile_Project)-[:Bug]->(maven)
create (SpringStepsFactory_handles:issue {name:'SpringStepsFactory handles'}) create (SpringStepsFactory_handles)-[:Bug]->(SpringStepsFactory)
create (handles_instance_creation:issue {name:'handles instance creation'}) create (handles_instance_creation)-[:Bug]->(SpringStepsFactory)
create (iterating_through_bean_definitions:issue {name:'iterating through bean definitions'}) create (iterating_through_bean_definitions)-[:Improvement]->(SpringStepsFactory)
create (creates_instances_of_classes:issue {name:'creates instances of classes'}) create (creates_instances_of_classes)-[:Improvement]->(SpringStepsFactory)
create (createInstanceOfType:class {name:'createInstanceOfType', favoritecolor: 'green'}) create (SpringStepsFactory_handles)-[:Bug]->(createInstanceOfType)
create (handles_instance_creation)-[:Bug]->(createInstanceOfType)
create (iterating_through_bean_definitions)-[:Improvement]->(createInstanceOfType)
create (creates_instances_of_classes)-[:Improvement]->(createInstanceOfType)
create (SpringStepsFactory_handles)-[:Bug]->(scope)
create (handles_instance_creation)-[:Bug]->(scope)
create (iterating_through_bean_definitions)-[:Improvement]->(scope)
create (creates_instances_of_classes)-[:Improvement]->(scope)
create (SpringStepsFactory_handles)-[:Bug]->(scope)
create (handles_instance_creation)-[:Bug]->(scope)
create (iterating_through_bean_definitions)-[:Improvement]->(scope)
create (creates_instances_of_classes)-[:Improvement]->(scope)
create (Example_Context:issue {name:'Example Context'}) create (Example_Context)-[:Bug]->(ant)
create (Feature_As_user:issue {name:'Feature As user'}) create (Feature_As_user)-[:Bug]->(ant)
create (reset_example_context_objects:issue {name:'reset example context objects'}) create (reset_example_context_objects)-[:Improvement]->(ant)
create (is_in_Second_scenario_description:issue {name:'is in Second scenario description'}) create (is_in_Second_scenario_description)-[:Improvement]->(ant)
create (Create_feature_with_two_normal_scenarios:issue {name:'Create feature with two normal scenarios'}) create (Create_feature_with_two_normal_scenarios)-[:Improvement]->(ant)
create (reset_example_context_example_context_example_context_objects_context_objects_prevents_re_prevents_re__re__re_usage__usage_usage_from_steps_steps_with_default_default_retention_default_retention_level_retention_level_retention_level_example_level_example_using_normal_scenarios_normal_scenarios_Create_a_feature_Create_a_feature_normal_scenarios_using_default_using_default_retention_default_retention_default_retention_level_retention_level_retention_level_example_level_example_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Given_a_system_Given_a_system_system_state_different_state_scenario_description_Given_a_system_Given_a_system_system_state_different_state_:issue {name:'reset example context - example context - example context objects - context objects - prevents re - prevents re- - re- - re-usage - -usage - usage from steps - steps with default - default retention - default retention level - retention level - retention level example - level example - using normal scenarios - normal scenarios - Create a feature - Create a feature - normal scenarios - using default - using default retention - default retention - default retention level - retention level - retention level example - level example - perform an action - perform an action - achieve a business - achieve a business - business goal - scenario description - Given a system - Given a system - system state - different state - scenario description - Given a system - Given a system - system state - different state - '}) create (reset_example_context_example_context_example_context_objects_context_objects_prevents_re_prevents_re__re__re_usage__usage_usage_from_steps_steps_with_default_default_retention_default_retention_level_retention_level_retention_level_example_level_example_using_normal_scenarios_normal_scenarios_Create_a_feature_Create_a_feature_normal_scenarios_using_default_using_default_retention_default_retention_default_retention_level_retention_level_retention_level_example_level_example_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Given_a_system_Given_a_system_system_state_different_state_scenario_description_Given_a_system_Given_a_system_system_state_different_state_)-[:Bug]->(ant)
create (Example_Context)-[:Bug]->(scenario)
create (Feature_As_user)-[:Bug]->(scenario)
create (reset_example_context_objects)-[:Improvement]->(scenario)
create (is_in_Second_scenario_description)-[:Improvement]->(scenario)
create (Create_feature_with_two_normal_scenarios)-[:Improvement]->(scenario)
create (reset_example_context_example_context_example_context_objects_context_objects_prevents_re_prevents_re__re__re_usage__usage_usage_from_steps_steps_with_default_default_retention_default_retention_level_retention_level_retention_level_example_level_example_using_normal_scenarios_normal_scenarios_Create_a_feature_Create_a_feature_normal_scenarios_using_default_using_default_retention_default_retention_default_retention_level_retention_level_retention_level_example_level_example_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Given_a_system_Given_a_system_system_state_different_state_scenario_description_Given_a_system_Given_a_system_system_state_different_state_)-[:Bug]->(scenario)
create (Example_Context)-[:Bug]->(scenario)
create (Feature_As_user)-[:Bug]->(scenario)
create (reset_example_context_objects)-[:Improvement]->(scenario)
create (is_in_Second_scenario_description)-[:Improvement]->(scenario)
create (Create_feature_with_two_normal_scenarios)-[:Improvement]->(scenario)
create (reset_example_context_example_context_example_context_objects_context_objects_prevents_re_prevents_re__re__re_usage__usage_usage_from_steps_steps_with_default_default_retention_default_retention_level_retention_level_retention_level_example_level_example_using_normal_scenarios_normal_scenarios_Create_a_feature_Create_a_feature_normal_scenarios_using_default_using_default_retention_default_retention_default_retention_level_retention_level_retention_level_example_level_example_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Given_a_system_Given_a_system_system_state_different_state_scenario_description_Given_a_system_Given_a_system_system_state_different_state_)-[:Bug]->(scenario)
create (Example_Context)-[:Bug]->(Context)
create (Feature_As_user)-[:Bug]->(Context)
create (reset_example_context_objects)-[:Improvement]->(Context)
create (is_in_Second_scenario_description)-[:Improvement]->(Context)
create (Create_feature_with_two_normal_scenarios)-[:Improvement]->(Context)
create (reset_example_context_example_context_example_context_objects_context_objects_prevents_re_prevents_re__re__re_usage__usage_usage_from_steps_steps_with_default_default_retention_default_retention_level_retention_level_retention_level_example_level_example_using_normal_scenarios_normal_scenarios_Create_a_feature_Create_a_feature_normal_scenarios_using_default_using_default_retention_default_retention_default_retention_level_retention_level_retention_level_example_level_example_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Given_a_system_Given_a_system_system_state_different_state_scenario_description_Given_a_system_Given_a_system_system_state_different_state_)-[:Bug]->(Context)
create (step_level:issue {name:'step level'}) create (step_level)-[:Bug]->(configuration)
create (goal_of_ticket:issue {name:'goal of ticket'}) create (goal_of_ticket)-[:Bug]->(configuration)
create (Provide_single_configuration_point:issue {name:'Provide single configuration point'}) create (Provide_single_configuration_point)-[:Improvement]->(configuration)
create (provide_one_single_configuration_point_of_TableTransformers:issue {name:'provide one single configuration point of TableTransformers'}) create (provide_one_single_configuration_point_of_TableTransformers)-[:Improvement]->(configuration)
create (Provide_single_configuration_single_configuration_single_configuration_point_configuration_point_is_an_ability_is_an_ability_set_custom_different_components_is_no_way_is_no_way_single_configuration_single_configuration_point_configuration_point_parsing_both_scenario_scenario_and_step_scenario_and_step_level_step_level_:issue {name:'Provide single configuration - single configuration - single configuration point - configuration point - is an ability - is an ability - set custom - different components - is no way - is no way - single configuration - single configuration point - configuration point - parsing both scenario - scenario and step - scenario and step level - step level - '}) create (Provide_single_configuration_single_configuration_single_configuration_point_configuration_point_is_an_ability_is_an_ability_set_custom_different_components_is_no_way_is_no_way_single_configuration_single_configuration_point_configuration_point_parsing_both_scenario_scenario_and_step_scenario_and_step_level_step_level_)-[:Improvement]->(configuration)
create (step_level)-[:Bug]->(scenario)
create (goal_of_ticket)-[:Bug]->(scenario)
create (Provide_single_configuration_point)-[:Improvement]->(scenario)
create (provide_one_single_configuration_point_of_TableTransformers)-[:Improvement]->(scenario)
create (Provide_single_configuration_single_configuration_single_configuration_point_configuration_point_is_an_ability_is_an_ability_set_custom_different_components_is_no_way_is_no_way_single_configuration_single_configuration_point_configuration_point_parsing_both_scenario_scenario_and_step_scenario_and_step_level_step_level_)-[:Improvement]->(scenario)
create (step_level)-[:Bug]->(scenario)
create (goal_of_ticket)-[:Bug]->(scenario)
create (Provide_single_configuration_point)-[:Improvement]->(scenario)
create (provide_one_single_configuration_point_of_TableTransformers)-[:Improvement]->(scenario)
create (Provide_single_configuration_single_configuration_single_configuration_point_configuration_point_is_an_ability_is_an_ability_set_custom_different_components_is_no_way_is_no_way_single_configuration_single_configuration_point_configuration_point_parsing_both_scenario_scenario_and_step_scenario_and_step_level_step_level_)-[:Improvement]->(scenario)
create (step_level)-[:Bug]->(ExamplesTable)
create (goal_of_ticket)-[:Bug]->(ExamplesTable)
create (Provide_single_configuration_point)-[:Improvement]->(ExamplesTable)
create (provide_one_single_configuration_point_of_TableTransformers)-[:Improvement]->(ExamplesTable)
create (Provide_single_configuration_single_configuration_single_configuration_point_configuration_point_is_an_ability_is_an_ability_set_custom_different_components_is_no_way_is_no_way_single_configuration_single_configuration_point_configuration_point_parsing_both_scenario_scenario_and_step_scenario_and_step_level_step_level_)-[:Improvement]->(ExamplesTable)
create (same_name:issue {name:'same name'}) create (same_name)-[:Bug]->(org_jbehave_core)
create (Collision_at_ExamplesTable_values:issue {name:'Collision at ExamplesTable values'}) create (Collision_at_ExamplesTable_values)-[:Bug]->(org_jbehave_core)
create (do_something:issue {name:'do something'}) create (do_something)-[:Improvement]->(org_jbehave_core)
create (steps_with_named_parameters:issue {name:'steps with named parameters'}) create (steps_with_named_parameters)-[:Improvement]->(org_jbehave_core)
create (same_name)-[:Bug]->(org_jbehave_core_embedder)
create (Collision_at_ExamplesTable_values)-[:Bug]->(org_jbehave_core_embedder)
create (do_something)-[:Improvement]->(org_jbehave_core_embedder)
create (steps_with_named_parameters)-[:Improvement]->(org_jbehave_core_embedder)
create (same_name)-[:Bug]->(org_jbehave_core_steps)
create (Collision_at_ExamplesTable_values)-[:Bug]->(org_jbehave_core_steps)
create (do_something)-[:Improvement]->(org_jbehave_core_steps)
create (steps_with_named_parameters)-[:Improvement]->(org_jbehave_core_steps)
create (same_name)-[:Bug]->(core)
create (Collision_at_ExamplesTable_values)-[:Bug]->(core)
create (do_something)-[:Improvement]->(core)
create (steps_with_named_parameters)-[:Improvement]->(core)
create (same_name)-[:Bug]->(embedder)
create (Collision_at_ExamplesTable_values)-[:Bug]->(embedder)
create (do_something)-[:Improvement]->(embedder)
create (steps_with_named_parameters)-[:Improvement]->(embedder)
create (same_name)-[:Bug]->(scenario)
create (Collision_at_ExamplesTable_values)-[:Bug]->(scenario)
create (do_something)-[:Improvement]->(scenario)
create (steps_with_named_parameters)-[:Improvement]->(scenario)
create (same_name)-[:Bug]->(scenario)
create (Collision_at_ExamplesTable_values)-[:Bug]->(scenario)
create (do_something)-[:Improvement]->(scenario)
create (steps_with_named_parameters)-[:Improvement]->(scenario)
create (same_name)-[:Bug]->(ExamplesTable)
create (Collision_at_ExamplesTable_values)-[:Bug]->(ExamplesTable)
create (do_something)-[:Improvement]->(ExamplesTable)
create (steps_with_named_parameters)-[:Improvement]->(ExamplesTable)
create (travis_corebuilds:issue {name:'travis corebuilds'}) create (travis_corebuilds)-[:Bug]->(org_jbehave_core)
create (change_value:issue {name:'change value'}) create (change_value)-[:Improvement]->(org_jbehave_core)
create (fails_with_errors:issue {name:'fails with errors'}) create (fails_with_errors)-[:Improvement]->(org_jbehave_core)
create (change_value_of_shared_variable:issue {name:'change value of shared variable'}) create (change_value_of_shared_variable)-[:Improvement]->(org_jbehave_core)
create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_:issue {name:'caused by invalid initialization - invalid initialization - race condition - multiple threads - change value - shared variable - time to time - '}) create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_)-[:Bug]->(org_jbehave_core)
create (travis_corebuilds)-[:Bug]->(org_jbehave_core_embedder)
create (change_value)-[:Improvement]->(org_jbehave_core_embedder)
create (fails_with_errors)-[:Improvement]->(org_jbehave_core_embedder)
create (change_value_of_shared_variable)-[:Improvement]->(org_jbehave_core_embedder)
create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_)-[:Bug]->(org_jbehave_core_embedder)
create (travis_corebuilds)-[:Bug]->(org_jbehave_core_model)
create (change_value)-[:Improvement]->(org_jbehave_core_model)
create (fails_with_errors)-[:Improvement]->(org_jbehave_core_model)
create (change_value_of_shared_variable)-[:Improvement]->(org_jbehave_core_model)
create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_)-[:Bug]->(org_jbehave_core_model)
create (travis_corebuilds)-[:Bug]->(org_jbehave_core_steps)
create (change_value)-[:Improvement]->(org_jbehave_core_steps)
create (fails_with_errors)-[:Improvement]->(org_jbehave_core_steps)
create (change_value_of_shared_variable)-[:Improvement]->(org_jbehave_core_steps)
create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_)-[:Bug]->(org_jbehave_core_steps)
create (travis_corebuilds)-[:Bug]->(core)
create (change_value)-[:Improvement]->(core)
create (fails_with_errors)-[:Improvement]->(core)
create (change_value_of_shared_variable)-[:Improvement]->(core)
create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_)-[:Bug]->(core)
create (travis_corebuilds)-[:Bug]->(embedder)
create (change_value)-[:Improvement]->(embedder)
create (fails_with_errors)-[:Improvement]->(embedder)
create (change_value_of_shared_variable)-[:Improvement]->(embedder)
create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_)-[:Bug]->(embedder)
create (travis_corebuilds)-[:Bug]->(ExamplesTable)
create (change_value)-[:Improvement]->(ExamplesTable)
create (fails_with_errors)-[:Improvement]->(ExamplesTable)
create (change_value_of_shared_variable)-[:Improvement]->(ExamplesTable)
create (caused_by_invalid_initialization_invalid_initialization_race_condition_multiple_threads_change_value_shared_variable_time_to_time_)-[:Bug]->(ExamplesTable)
create (missing_dependencies:issue {name:'missing dependencies'}) create (missing_dependencies)-[:Bug]->(maven)
create (missing_dependencies)-[:Bug]->(maven)
create (compile_in_version:issue {name:'compile in version'}) create (compile_in_version)-[:Improvement]->(maven)
create (missing_dependencies)-[:Bug]->(LocalizedKeywords)
create (missing_dependencies)-[:Bug]->(LocalizedKeywords)
create (compile_in_version)-[:Improvement]->(LocalizedKeywords)
create (missing_dependencies)-[:Bug]->(LoadFromClasspath)
create (missing_dependencies)-[:Bug]->(LoadFromClasspath)
create (compile_in_version)-[:Improvement]->(LoadFromClasspath)
create (missing_dependencies)-[:Bug]->(ExamplesTable)
create (missing_dependencies)-[:Bug]->(ExamplesTable)
create (compile_in_version)-[:Improvement]->(ExamplesTable)
create (jbehave_core_:issue {name:'jbehave core-'}) create (jbehave_core_)-[:Bug]->(core)
create (part_of_GivenStories:issue {name:'part of GivenStories'}) create (part_of_GivenStories)-[:Bug]->(core)
create (have_Scenario:issue {name:'have Scenario'}) create (have_Scenario)-[:Improvement]->(core)
create (parse_with_german_keywords:issue {name:'parse with german keywords'}) create (parse_with_german_keywords)-[:Improvement]->(core)
create (jbehave_core_)-[:Bug]->(keywords)
create (part_of_GivenStories)-[:Bug]->(keywords)
create (have_Scenario)-[:Improvement]->(keywords)
create (parse_with_german_keywords)-[:Improvement]->(keywords)
create (jbehave_core_)-[:Bug]->(meta)
create (part_of_GivenStories)-[:Bug]->(meta)
create (have_Scenario)-[:Improvement]->(meta)
create (parse_with_german_keywords)-[:Improvement]->(meta)
create (jbehave_core_)-[:Bug]->(meta)
create (part_of_GivenStories)-[:Bug]->(meta)
create (have_Scenario)-[:Improvement]->(meta)
create (parse_with_german_keywords)-[:Improvement]->(meta)
create (jbehave_core_)-[:Bug]->(scenario)
create (part_of_GivenStories)-[:Bug]->(scenario)
create (have_Scenario)-[:Improvement]->(scenario)
create (parse_with_german_keywords)-[:Improvement]->(scenario)
create (startingWord:class {name:'startingWord', favoritecolor: 'green'}) create (jbehave_core_)-[:Bug]->(startingWord)
create (part_of_GivenStories)-[:Bug]->(startingWord)
create (have_Scenario)-[:Improvement]->(startingWord)
create (parse_with_german_keywords)-[:Improvement]->(startingWord)
create (jbehave_core_)-[:Bug]->(startingWord)
create (part_of_GivenStories)-[:Bug]->(startingWord)
create (have_Scenario)-[:Improvement]->(startingWord)
create (parse_with_german_keywords)-[:Improvement]->(startingWord)
create (startingWords :class {name:'startingWords ', favoritecolor: 'green'}) create (jbehave_core_)-[:Bug]->(startingWords)
create (part_of_GivenStories)-[:Bug]->(startingWords)
create (have_Scenario)-[:Improvement]->(startingWords)
create (parse_with_german_keywords)-[:Improvement]->(startingWords)
create (jbehave_core_)-[:Bug]->(scenario)
create (part_of_GivenStories)-[:Bug]->(scenario)
create (have_Scenario)-[:Improvement]->(scenario)
create (parse_with_german_keywords)-[:Improvement]->(scenario)
create (jbehave_core_)-[:Bug]->(startingWord)
create (part_of_GivenStories)-[:Bug]->(startingWord)
create (have_Scenario)-[:Improvement]->(startingWord)
create (parse_with_german_keywords)-[:Improvement]->(startingWord)
create (jbehave_core_)-[:Bug]->(keywords)
create (part_of_GivenStories)-[:Bug]->(keywords)
create (have_Scenario)-[:Improvement]->(keywords)
create (parse_with_german_keywords)-[:Improvement]->(keywords)
create (jbehave_core_)-[:Bug]->(LocalizedKeywords)
create (part_of_GivenStories)-[:Bug]->(LocalizedKeywords)
create (have_Scenario)-[:Improvement]->(LocalizedKeywords)
create (parse_with_german_keywords)-[:Improvement]->(LocalizedKeywords)
create (jbehave_core_)-[:Bug]->(GivenStories)
create (part_of_GivenStories)-[:Bug]->(GivenStories)
create (have_Scenario)-[:Improvement]->(GivenStories)
create (parse_with_german_keywords)-[:Improvement]->(GivenStories)
create (executing_FreeMarker_template_error:issue {name:'executing FreeMarker template error'}) create (executing_FreeMarker_template_error)-[:Improvement]->(ViewGenerator)
create (Composite_steps:issue {name:'Composite steps'}) create (composite:class {name:'composite', favoritecolor: 'green'}) create (Composite_steps)-[:Bug]->(composite)
create (using_JBehave)-[:Bug]->(composite)
create (happens_to_one_test:issue {name:'happens to one test'}) create (happens_to_one_test)-[:Improvement]->(composite)
create (Composite_steps_experiencing_an_intermittent_problem_intermittent_problem_composite_steps_run_the_next_step_next_step_composite_steps_login_steps_outputs_any_logging_outputs_any_logging_run_those_steps_run_those_steps_other_information_:issue {name:'Composite steps - experiencing an intermittent problem - intermittent problem - composite steps - run the next step - next step - composite steps - login steps - outputs any logging - outputs any logging - run those steps - run those steps - other information - '}) create (Composite_steps_experiencing_an_intermittent_problem_intermittent_problem_composite_steps_run_the_next_step_next_step_composite_steps_login_steps_outputs_any_logging_outputs_any_logging_run_those_steps_run_those_steps_other_information_)-[:Improvement]->(composite)
create (Composite_steps)-[:Bug]->(composite)
create (using_JBehave)-[:Bug]->(composite)
create (happens_to_one_test)-[:Improvement]->(composite)
create (Composite_steps_experiencing_an_intermittent_problem_intermittent_problem_composite_steps_run_the_next_step_next_step_composite_steps_login_steps_outputs_any_logging_outputs_any_logging_run_those_steps_run_those_steps_other_information_)-[:Improvement]->(composite)
create (Composite_steps)-[:Bug]->(Composite)
create (using_JBehave)-[:Bug]->(Composite)
create (happens_to_one_test)-[:Improvement]->(Composite)
create (Composite_steps_experiencing_an_intermittent_problem_intermittent_problem_composite_steps_run_the_next_step_next_step_composite_steps_login_steps_outputs_any_logging_outputs_any_logging_run_those_steps_run_those_steps_other_information_)-[:Improvement]->(Composite)
create (HTML_output:issue {name:'HTML output'}) create (HTML_output)-[:Bug]->(outcome)
create (Boolean_outcome_Boolean_outcome_values_outcome_values_outcome_values_:issue {name:'Boolean outcome - Boolean outcome values - outcome values - outcome values - '}) create (Boolean_outcome_Boolean_outcome_values_outcome_values_outcome_values_)-[:Bug]->(outcome)
create (HTML_output)-[:Bug]->(outcome)
create (Boolean_outcome_Boolean_outcome_values_outcome_values_outcome_values_)-[:Bug]->(outcome)
create (preserve_column_order:issue {name:'preserve column order'}) create (preserve_column_order)-[:Bug]->(ExamplesTable)
create (using_HashMap_at_generation_new_data:issue {name:'using HashMap at generation new data'}) create (using_HashMap_at_generation_new_data)-[:Bug]->(ExamplesTable)
create (preserve_column_preserve_column_order_column_order_named_parameters_preserve_column_preserve_column_order_column_order_named_parameters_new_data_named_parameters_:issue {name:'preserve column - preserve column order - column order - named parameters - preserve column - preserve column order - column order - named parameters - new data - named parameters - '}) create (preserve_column_preserve_column_order_column_order_named_parameters_preserve_column_preserve_column_order_column_order_named_parameters_new_data_named_parameters_)-[:Improvement]->(ExamplesTable)
create (wm_jbehave:issue {name:'wm jbehave'}) create (wm_jbehave)-[:Bug]->(maven)
create (creating_test_jbehavewikiCreating_Maven:issue {name:'creating test jbehavewikiCreating Maven'}) create (creating_test_jbehavewikiCreating_Maven)-[:Bug]->(maven)
create (values_for_separators:issue {name:'values for separators'}) create (values_for_separators)-[:Bug]->(ExamplesTable)
create (provide_default_values:issue {name:'provide default values'}) create (provide_default_values)-[:Bug]->(ExamplesTable)
create (provide_default_values_for_separators_Instantiation:issue {name:'provide default values for separators Instantiation'}) create (provide_default_values_for_separators_Instantiation)-[:Improvement]->(ExamplesTable)
create (provide_default_provide_default_values_default_values_values_for_separators_ensure_values_ensure_values_for_separators_values_for_separators_:issue {name:'provide default - provide default values - default values - values for separators - ensure values - ensure values for separators - values for separators - '}) create (provide_default_provide_default_values_default_values_values_for_separators_ensure_values_ensure_values_for_separators_values_for_separators_)-[:Improvement]->(ExamplesTable)
create (jbehave_maven:issue {name:'jbehave maven'}) create (jbehave_maven)-[:Bug]->(maven)
create (recognise_plugin_failures:issue {name:'recognise plugin failures'}) create (recognise_plugin_failures)-[:Bug]->(maven)
create (have_jbehave_story_with_scenarios:issue {name:'have jbehave story with scenarios'}) create (have_jbehave_story_with_scenarios)-[:Improvement]->(maven)
create (recognise_jbehave_plugin_failures_have_a_jbehave_have_a_jbehave_jbehave_story_succeeds_surefire_recognise_the_failure_recognise_the_failure_reports_success_succeeds_surefire_reports_the_failure_reports_the_failure_recognised_a_failure_recognised_a_failure_tested_jbehave_has_this_issue_has_this_issue_plugin_without_success_:issue {name:'recognise jbehave - plugin failures - have a jbehave - have a jbehave - jbehave story - succeeds surefire - recognise the failure - recognise the failure - reports success - succeeds surefire - reports the failure - reports the failure - recognised a failure - recognised a failure - tested jbehave - has this issue - has this issue - plugin without success - '}) create (recognise_jbehave_plugin_failures_have_a_jbehave_have_a_jbehave_jbehave_story_succeeds_surefire_recognise_the_failure_recognise_the_failure_reports_success_succeeds_surefire_reports_the_failure_reports_the_failure_recognised_a_failure_recognised_a_failure_tested_jbehave_has_this_issue_has_this_issue_plugin_without_success_)-[:Improvement]->(maven)
create (jbehave_maven)-[:Bug]->(scenario)
create (recognise_plugin_failures)-[:Bug]->(scenario)
create (have_jbehave_story_with_scenarios)-[:Improvement]->(scenario)
create (recognise_jbehave_plugin_failures_have_a_jbehave_have_a_jbehave_jbehave_story_succeeds_surefire_recognise_the_failure_recognise_the_failure_reports_success_succeeds_surefire_reports_the_failure_reports_the_failure_recognised_a_failure_recognised_a_failure_tested_jbehave_has_this_issue_has_this_issue_plugin_without_success_)-[:Improvement]->(scenario)
create (jbehave_maven)-[:Bug]->(scenario)
create (recognise_plugin_failures)-[:Bug]->(scenario)
create (have_jbehave_story_with_scenarios)-[:Improvement]->(scenario)
create (recognise_jbehave_plugin_failures_have_a_jbehave_have_a_jbehave_jbehave_story_succeeds_surefire_recognise_the_failure_recognise_the_failure_reports_success_succeeds_surefire_reports_the_failure_reports_the_failure_recognised_a_failure_recognised_a_failure_tested_jbehave_has_this_issue_has_this_issue_plugin_without_success_)-[:Improvement]->(scenario)
create (official_way:issue {name:'official way'}) create (official_way)-[:Bug]->(close)
create (close_stories_on_project:issue {name:'close stories on project'}) create (close_stories_on_project)-[:Bug]->(close)
create (set_ordering:issue {name:'set ordering'}) create (set_ordering)-[:Improvement]->(close)
create (Ordering_of_running_stories:issue {name:'Ordering of running stories'}) create (Ordering_of_running_stories)-[:Improvement]->(close)
create (set_ordering_of_running_stories:issue {name:'set ordering of running stories'}) create (set_ordering_of_running_stories)-[:Improvement]->(close)
create (running_stories_running_stories_have_some_initial_stories_initial_stories_close_stories_stories_on_project_like_that_way_like_that_way_:issue {name:'running stories - running stories - have some initial stories - initial stories - close stories - stories on project - like that way - like that way - '}) create (running_stories_running_stories_have_some_initial_stories_initial_stories_close_stories_stories_on_project_like_that_way_like_that_way_)-[:Bug]->(close)
create (Russian_locale:issue {name:'Russian locale'}) create (Russian_locale)-[:Bug]->(keywords)
create (Add_support)-[:Bug]->(keywords)
create (Add_support_for_locale_Add_support:issue {name:'Add support for locale Add support'}) create (Add_support_for_locale_Add_support)-[:Improvement]->(keywords)
create (Russian_locale)-[:Bug]->(keywords)
create (Add_support)-[:Bug]->(keywords)
create (Add_support_for_locale_Add_support)-[:Improvement]->(keywords)
create (Parent_story:issue {name:'Parent story'}) create (Parent_story)-[:Bug]->(org_jbehave_core)
create (Scenario_Before_Scenario:issue {name:'Scenario Before Scenario'}) create (Scenario_Before_Scenario)-[:Bug]->(org_jbehave_core)
create (reproduce_:issue {name:'reproduce '}) create (reproduce_)-[:Improvement]->(org_jbehave_core)
create (is_After_Scenario:issue {name:'is After Scenario'}) create (is_After_Scenario)-[:Improvement]->(org_jbehave_core)
create (using_GivenStories_at_story_level:issue {name:'using GivenStories at story level'}) create (using_GivenStories_at_story_level)-[:Improvement]->(org_jbehave_core)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_:issue {name:'Parent story - given stories - reproduce - Check log - Running story - story level - parametrised by meta properties - meta properties - theme parametrisation - Given the asset - Given the asset - asset class - asset class assetClass - class assetClass - Given a stock - Given a stock - stock of symbol - failed outcome - failed outcome with theme - outcome with theme - given stories - theme parametrisation - alert status - failed outcome - failed outcome with theme - outcome with theme - Story with theme - Actual result - Actual result - result - parent story - given story - meta from parent - parent story - given story - Failed build - '}) create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(org_jbehave_core)
create (Parent_story)-[:Bug]->(org_jbehave_core_embedder)
create (Scenario_Before_Scenario)-[:Bug]->(org_jbehave_core_embedder)
create (reproduce_)-[:Improvement]->(org_jbehave_core_embedder)
create (is_After_Scenario)-[:Improvement]->(org_jbehave_core_embedder)
create (using_GivenStories_at_story_level)-[:Improvement]->(org_jbehave_core_embedder)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(org_jbehave_core_embedder)
create (Parent_story)-[:Bug]->(org_jbehave_core_steps)
create (Scenario_Before_Scenario)-[:Bug]->(org_jbehave_core_steps)
create (reproduce_)-[:Improvement]->(org_jbehave_core_steps)
create (is_After_Scenario)-[:Improvement]->(org_jbehave_core_steps)
create (using_GivenStories_at_story_level)-[:Improvement]->(org_jbehave_core_steps)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(org_jbehave_core_steps)
create (Parent_story)-[:Bug]->(core)
create (Scenario_Before_Scenario)-[:Bug]->(core)
create (reproduce_)-[:Improvement]->(core)
create (is_After_Scenario)-[:Improvement]->(core)
create (using_GivenStories_at_story_level)-[:Improvement]->(core)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(core)
create (Parent_story)-[:Bug]->(rest)
create (Scenario_Before_Scenario)-[:Bug]->(rest)
create (reproduce_)-[:Improvement]->(rest)
create (is_After_Scenario)-[:Improvement]->(rest)
create (using_GivenStories_at_story_level)-[:Improvement]->(rest)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(rest)
create (Parent_story)-[:Bug]->(embedder)
create (Scenario_Before_Scenario)-[:Bug]->(embedder)
create (reproduce_)-[:Improvement]->(embedder)
create (is_After_Scenario)-[:Improvement]->(embedder)
create (using_GivenStories_at_story_level)-[:Improvement]->(embedder)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(embedder)
create (Parent_story)-[:Bug]->(failed)
create (Scenario_Before_Scenario)-[:Bug]->(failed)
create (reproduce_)-[:Improvement]->(failed)
create (is_After_Scenario)-[:Improvement]->(failed)
create (using_GivenStories_at_story_level)-[:Improvement]->(failed)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(failed)
create (Parent_story)-[:Bug]->(given)
create (Scenario_Before_Scenario)-[:Bug]->(given)
create (reproduce_)-[:Improvement]->(given)
create (is_After_Scenario)-[:Improvement]->(given)
create (using_GivenStories_at_story_level)-[:Improvement]->(given)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(given)
create (Parent_story)-[:Bug]->(meta)
create (Scenario_Before_Scenario)-[:Bug]->(meta)
create (reproduce_)-[:Improvement]->(meta)
create (is_After_Scenario)-[:Improvement]->(meta)
create (using_GivenStories_at_story_level)-[:Improvement]->(meta)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(meta)
create (Parent_story)-[:Bug]->(outcome)
create (Scenario_Before_Scenario)-[:Bug]->(outcome)
create (reproduce_)-[:Improvement]->(outcome)
create (is_After_Scenario)-[:Improvement]->(outcome)
create (using_GivenStories_at_story_level)-[:Improvement]->(outcome)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(outcome)
create (Parent_story)-[:Bug]->(after)
create (Scenario_Before_Scenario)-[:Bug]->(after)
create (reproduce_)-[:Improvement]->(after)
create (is_After_Scenario)-[:Improvement]->(after)
create (using_GivenStories_at_story_level)-[:Improvement]->(after)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(after)
create (Parent_story)-[:Bug]->(meta)
create (Scenario_Before_Scenario)-[:Bug]->(meta)
create (reproduce_)-[:Improvement]->(meta)
create (is_After_Scenario)-[:Improvement]->(meta)
create (using_GivenStories_at_story_level)-[:Improvement]->(meta)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(meta)
create (Parent_story)-[:Bug]->(outcome)
create (Scenario_Before_Scenario)-[:Bug]->(outcome)
create (reproduce_)-[:Improvement]->(outcome)
create (is_After_Scenario)-[:Improvement]->(outcome)
create (using_GivenStories_at_story_level)-[:Improvement]->(outcome)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(outcome)
create (Parent_story)-[:Bug]->(scenario)
create (Scenario_Before_Scenario)-[:Bug]->(scenario)
create (reproduce_)-[:Improvement]->(scenario)
create (is_After_Scenario)-[:Improvement]->(scenario)
create (using_GivenStories_at_story_level)-[:Improvement]->(scenario)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(scenario)
create (Parent_story)-[:Bug]->(scenario)
create (Scenario_Before_Scenario)-[:Bug]->(scenario)
create (reproduce_)-[:Improvement]->(scenario)
create (is_After_Scenario)-[:Improvement]->(scenario)
create (using_GivenStories_at_story_level)-[:Improvement]->(scenario)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(scenario)
create (Parent_story)-[:Bug]->(GivenStories)
create (Scenario_Before_Scenario)-[:Bug]->(GivenStories)
create (reproduce_)-[:Improvement]->(GivenStories)
create (is_After_Scenario)-[:Improvement]->(GivenStories)
create (using_GivenStories_at_story_level)-[:Improvement]->(GivenStories)
create (Parent_story_given_stories_reproduce_Check_log_Running_story_story_level_parametrised_by_meta_properties_meta_properties_theme_parametrisation_Given_the_asset_Given_the_asset_asset_class_asset_class_assetClass_class_assetClass_Given_a_stock_Given_a_stock_stock_of_symbol_failed_outcome_failed_outcome_with_theme_outcome_with_theme_given_stories_theme_parametrisation_alert_status_failed_outcome_failed_outcome_with_theme_outcome_with_theme_Story_with_theme_Actual_result_Actual_result_result_parent_story_given_story_meta_from_parent_parent_story_given_story_Failed_build_)-[:Bug]->(GivenStories)
create (MetaFilter_MetaFilter:issue {name:'MetaFilter MetaFilter'}) create (MetaFilter_MetaFilter)-[:Bug]->(scenario)
create (output_from_MetaFilter:issue {name:'output from MetaFilter'}) create (output_from_MetaFilter)-[:Bug]->(scenario)
create (using_EmbedderMonitor:issue {name:'using EmbedderMonitor'}) create (using_EmbedderMonitor)-[:Improvement]->(scenario)
create (be_to_standard_output:issue {name:'be to standard output'}) create (be_to_standard_output)-[:Improvement]->(scenario)
create (logging_messages_in_standard_output:issue {name:'logging messages in standard output'}) create (logging_messages_in_standard_output)-[:Improvement]->(scenario)
create (MetaFilter_MetaFilter)-[:Bug]->(scenario)
create (output_from_MetaFilter)-[:Bug]->(scenario)
create (using_EmbedderMonitor)-[:Improvement]->(scenario)
create (be_to_standard_output)-[:Improvement]->(scenario)
create (logging_messages_in_standard_output)-[:Improvement]->(scenario)
create (GivenStories_declaration:issue {name:'GivenStories declaration'}) create (GivenStories_declaration)-[:Bug]->(GivenStories)
create (Comma_in_end:issue {name:'Comma in end'}) create (Comma_in_end)-[:Bug]->(GivenStories)
create (put_comma:issue {name:'put comma'}) create (put_comma)-[:Improvement]->(GivenStories)
create (leads_to_creation:issue {name:'leads to creation'}) create (leads_to_creation)-[:Improvement]->(GivenStories)
create (put_comma_in_end:issue {name:'put comma in end'}) create (put_comma_in_end)-[:Improvement]->(GivenStories)
create (put_comma_empty_path_cause_issues_cause_issues_at_story_issues_at_story_story_executions_:issue {name:'put comma - empty path - cause issues - cause issues at story - issues at story - story executions - '}) create (put_comma_empty_path_cause_issues_cause_issues_at_story_issues_at_story_story_executions_)-[:Bug]->(GivenStories)
create (GivenStories_declaration)-[:Bug]->(GivenStory)
create (Comma_in_end)-[:Bug]->(GivenStory)
create (put_comma)-[:Improvement]->(GivenStory)
create (leads_to_creation)-[:Improvement]->(GivenStory)
create (put_comma_in_end)-[:Improvement]->(GivenStory)
create (put_comma_empty_path_cause_issues_cause_issues_at_story_issues_at_story_story_executions_)-[:Bug]->(GivenStory)
create (JUnitReportingRunner_NullPointerException:issue {name:'JUnitReportingRunner NullPointerException'}) create (JUnitReportingRunner_NullPointerException)-[:Bug]->(org_jbehave_core)
create (have_sample_story:issue {name:'have sample story'}) create (have_sample_story)-[:Improvement]->(org_jbehave_core)
create (are_in_Story:issue {name:'are in Story'}) create (are_in_Story)-[:Improvement]->(org_jbehave_core)
create (containing_scenarios_for_example:issue {name:'containing scenarios for example'}) create (containing_scenarios_for_example)-[:Improvement]->(org_jbehave_core)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_:issue {name:'have a sample - have a sample - sample story - sample story_ - story_ - story_ -_ -_ Inlandzahlung -  Inlandzahlung - sample story - includes different stories - different stories - given stories - scenarios for example - example  - start the JUnitStories - start the JUnitStories - first scenario - first story - public class - public class EFinanceStories - class EFinanceStories - extends JUnitStories - und ändern - und ändern eine - ändern eine - zu folgenden - folgenden Werten lösche - Werten lösche - run story - '}) create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(org_jbehave_core)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(org_jbehave_core_embedder)
create (have_sample_story)-[:Improvement]->(org_jbehave_core_embedder)
create (are_in_Story)-[:Improvement]->(org_jbehave_core_embedder)
create (containing_scenarios_for_example)-[:Improvement]->(org_jbehave_core_embedder)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(org_jbehave_core_embedder)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(org_jbehave_core_reporters)
create (have_sample_story)-[:Improvement]->(org_jbehave_core_reporters)
create (are_in_Story)-[:Improvement]->(org_jbehave_core_reporters)
create (containing_scenarios_for_example)-[:Improvement]->(org_jbehave_core_reporters)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(org_jbehave_core_reporters)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(core)
create (have_sample_story)-[:Improvement]->(core)
create (are_in_Story)-[:Improvement]->(core)
create (containing_scenarios_for_example)-[:Improvement]->(core)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(core)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(google)
create (have_sample_story)-[:Improvement]->(google)
create (are_in_Story)-[:Improvement]->(google)
create (containing_scenarios_for_example)-[:Improvement]->(google)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(google)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(configuredEmbedder)
create (have_sample_story)-[:Improvement]->(configuredEmbedder)
create (are_in_Story)-[:Improvement]->(configuredEmbedder)
create (containing_scenarios_for_example)-[:Improvement]->(configuredEmbedder)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(configuredEmbedder)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(embedder)
create (have_sample_story)-[:Improvement]->(embedder)
create (are_in_Story)-[:Improvement]->(embedder)
create (containing_scenarios_for_example)-[:Improvement]->(embedder)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(embedder)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(given)
create (have_sample_story)-[:Improvement]->(given)
create (are_in_Story)-[:Improvement]->(given)
create (containing_scenarios_for_example)-[:Improvement]->(given)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(given)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(after)
create (have_sample_story)-[:Improvement]->(after)
create (are_in_Story)-[:Improvement]->(after)
create (containing_scenarios_for_example)-[:Improvement]->(after)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(after)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(scenario)
create (have_sample_story)-[:Improvement]->(scenario)
create (are_in_Story)-[:Improvement]->(scenario)
create (containing_scenarios_for_example)-[:Improvement]->(scenario)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(scenario)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(scenario)
create (have_sample_story)-[:Improvement]->(scenario)
create (are_in_Story)-[:Improvement]->(scenario)
create (containing_scenarios_for_example)-[:Improvement]->(scenario)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(scenario)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(DirectExecutorService)
create (have_sample_story)-[:Improvement]->(DirectExecutorService)
create (are_in_Story)-[:Improvement]->(DirectExecutorService)
create (containing_scenarios_for_example)-[:Improvement]->(DirectExecutorService)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(DirectExecutorService)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(JUnitStories)
create (have_sample_story)-[:Improvement]->(JUnitStories)
create (are_in_Story)-[:Improvement]->(JUnitStories)
create (containing_scenarios_for_example)-[:Improvement]->(JUnitStories)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(JUnitStories)
create (JUnitReportingRunner_NullPointerException)-[:Bug]->(GivenStories)
create (have_sample_story)-[:Improvement]->(GivenStories)
create (are_in_Story)-[:Improvement]->(GivenStories)
create (containing_scenarios_for_example)-[:Improvement]->(GivenStories)
create (have_a_sample_have_a_sample_sample_story_sample_story___story___story_____Inlandzahlung__Inlandzahlung_sample_story_includes_different_stories_different_stories_given_stories_scenarios_for_example_example__start_the_JUnitStories_start_the_JUnitStories_first_scenario_first_story_public_class_public_class_EFinanceStories_class_EFinanceStories_extends_JUnitStories_und_ändern_und_ändern_eine_ändern_eine_zu_folgenden_folgenden_Werten_lösche_Werten_lösche_run_story_)-[:Bug]->(GivenStories)
create (stored_collections:issue {name:'stored collections'}) create (stored_collections)-[:Bug]->(outcome)
create (value_into_Context:issue {name:'value into Context'}) create (value_into_Context)-[:Bug]->(outcome)
create (Create_Context:issue {name:'Create Context'}) create (Create_Context)-[:Improvement]->(outcome)
create (make_For_example:issue {name:'make For example'}) create (make_For_example)-[:Improvement]->(outcome)
create (using_value_of_annotation:issue {name:'using value of annotation'}) create (using_value_of_annotation)-[:Improvement]->(outcome)
create (stored_collections)-[:Bug]->(after)
create (value_into_Context)-[:Bug]->(after)
create (Create_Context)-[:Improvement]->(after)
create (make_For_example)-[:Improvement]->(after)
create (using_value_of_annotation)-[:Improvement]->(after)
create (stored_collections)-[:Bug]->(outcome)
create (value_into_Context)-[:Bug]->(outcome)
create (Create_Context)-[:Improvement]->(outcome)
create (make_For_example)-[:Improvement]->(outcome)
create (using_value_of_annotation)-[:Improvement]->(outcome)
create (stored_collections)-[:Bug]->(scenario)
create (value_into_Context)-[:Bug]->(scenario)
create (Create_Context)-[:Improvement]->(scenario)
create (make_For_example)-[:Improvement]->(scenario)
create (using_value_of_annotation)-[:Improvement]->(scenario)
create (stored_collections)-[:Bug]->(scenario)
create (value_into_Context)-[:Bug]->(scenario)
create (Create_Context)-[:Improvement]->(scenario)
create (make_For_example)-[:Improvement]->(scenario)
create (using_value_of_annotation)-[:Improvement]->(scenario)
create (stored_collections)-[:Bug]->(Context)
create (value_into_Context)-[:Bug]->(Context)
create (Create_Context)-[:Improvement]->(Context)
create (make_For_example)-[:Improvement]->(Context)
create (using_value_of_annotation)-[:Improvement]->(Context)
create (parameter_matching:issue {name:'parameter matching'}) create (parameter_matching)-[:Bug]->(org_jbehave_core)
create (parameter_matching)-[:Bug]->(org_jbehave_core_embedder)
create (parameter_matching)-[:Bug]->(org_jbehave_core_steps)
create (parameter_matching)-[:Bug]->(core)
create (parameter_matching)-[:Bug]->(embedder)
create (parameter_matching)-[:Bug]->(pending)
create (parameter_matching)-[:Bug]->(pending)
create (FailingUponPendingStep:class {name:'FailingUponPendingStep', favoritecolor: 'green'}) create (parameter_matching)-[:Bug]->(FailingUponPendingStep)
create (empty_PerformableScenario:issue {name:'empty PerformableScenario'}) create (empty_PerformableScenario)-[:Bug]->(scenario)
create (adding_PerformableScenario_instances:issue {name:'adding PerformableScenario instances'}) create (adding_PerformableScenario_instances)-[:Bug]->(scenario)
create (empty_PerformableScenario)-[:Bug]->(scenario)
create (adding_PerformableScenario_instances)-[:Bug]->(scenario)
create (parametric_types:issue {name:'parametric types'}) create (parametric_types)-[:Bug]->(given)
create (bit_of_context:issue {name:'bit of context'}) create (bit_of_context)-[:Bug]->(given)
create (extending_ExamplesTable:issue {name:'extending ExamplesTable'}) create (extending_ExamplesTable)-[:Improvement]->(given)
create (works_with_ParameterizedTypes:issue {name:'works with ParameterizedTypes'}) create (works_with_ParameterizedTypes)-[:Improvement]->(given)
create (inferring_column_names_from_field_names:issue {name:'inferring column names from field names'}) create (inferring_column_names_from_field_names)-[:Improvement]->(given)
create (parametric_types)-[:Bug]->(ExamplesTable)
create (bit_of_context)-[:Bug]->(ExamplesTable)
create (extending_ExamplesTable)-[:Improvement]->(ExamplesTable)
create (works_with_ParameterizedTypes)-[:Improvement]->(ExamplesTable)
create (inferring_column_names_from_field_names)-[:Improvement]->(ExamplesTable)
create (example_table:issue {name:'example table'}) create (example_table)-[:Bug]->(core)
create (creates_javaw_task:issue {name:'creates javaw task'}) create (creates_javaw_task)-[:Bug]->(core)
create (using_Example_table_in_Jbehave_story:issue {name:'using Example table in Jbehave story'}) create (using_Example_table_in_Jbehave_story)-[:Improvement]->(core)
create (example_table)-[:Bug]->(after)
create (creates_javaw_task)-[:Bug]->(after)
create (using_Example_table_in_Jbehave_story)-[:Improvement]->(after)
create (JBehave_Jenkins:issue {name:'JBehave Jenkins'}) create (JBehave_Jenkins)-[:Bug]->(groovy)
create (results_of_need:issue {name:'results of need'}) create (results_of_need)-[:Bug]->(groovy)
create (generate_correct_groovy_script:issue {name:'generate correct groovy script'}) create (generate_correct_groovy_script)-[:Improvement]->(groovy)
create (use_JBehave_with_pipelines:issue {name:'use JBehave with pipelines'}) create (use_JBehave_with_pipelines)-[:Improvement]->(groovy)
create (jenkins:class {name:'jenkins', favoritecolor: 'green'}) create (JBehave_Jenkins)-[:Bug]->(jenkins)
create (results_of_need)-[:Bug]->(jenkins)
create (generate_correct_groovy_script)-[:Improvement]->(jenkins)
create (use_JBehave_with_pipelines)-[:Improvement]->(jenkins)
create (specified_delegate_resolver:issue {name:'specified delegate resolver'}) create (specified_delegate_resolver)-[:Bug]->(core)
create (Add_StoryNameResolver:issue {name:'Add StoryNameResolver'}) create (Add_StoryNameResolver)-[:Bug]->(core)
create (iterates_through_configurable_number:issue {name:'iterates through configurable number'}) create (iterates_through_configurable_number)-[:Improvement]->(core)
create (Add_AncestorDelegatingResolver_configurable_number_number_of_path_path_ancestors_specified_delegate_specified_delegate_resolver_delegate_resolver_:issue {name:'Add AncestorDelegatingResolver - configurable number - number of path - path ancestors - specified delegate - specified delegate resolver - delegate resolver - '}) create (Add_AncestorDelegatingResolver_configurable_number_number_of_path_path_ancestors_specified_delegate_specified_delegate_resolver_delegate_resolver_)-[:Improvement]->(core)
create (AncestorDelegatingResolver:class {name:'AncestorDelegatingResolver', favoritecolor: 'green'}) create (specified_delegate_resolver)-[:Bug]->(AncestorDelegatingResolver)
create (Add_StoryNameResolver)-[:Bug]->(AncestorDelegatingResolver)
create (iterates_through_configurable_number)-[:Improvement]->(AncestorDelegatingResolver)
create (Add_AncestorDelegatingResolver_configurable_number_number_of_path_path_ancestors_specified_delegate_specified_delegate_resolver_delegate_resolver_)-[:Improvement]->(AncestorDelegatingResolver)
create (specified_delegate_resolver)-[:Bug]->(UnderscoredToCapitalized)
create (Add_StoryNameResolver)-[:Bug]->(UnderscoredToCapitalized)
create (iterates_through_configurable_number)-[:Improvement]->(UnderscoredToCapitalized)
create (Add_AncestorDelegatingResolver_configurable_number_number_of_path_path_ancestors_specified_delegate_specified_delegate_resolver_delegate_resolver_)-[:Improvement]->(UnderscoredToCapitalized)
create (Hello_JBehave:issue {name:'Hello JBehave'}) create (Hello_JBehave)-[:Bug]->(core)
create (Implementation_of_team:issue {name:'Implementation of team'}) create (Implementation_of_team)-[:Bug]->(core)
create (implement__:issue {name:'implement_'}) create (implement__)-[:Improvement]->(core)
create (accept_method_of_ParameterConverter:issue {name:'accept_ method of ParameterConverter'}) create (accept_method_of_ParameterConverter)-[:Improvement]->(core)
create (Hello_JBehave)-[:Bug]->(ant)
create (Implementation_of_team)-[:Bug]->(ant)
create (implement__)-[:Improvement]->(ant)
create (accept_method_of_ParameterConverter)-[:Improvement]->(ant)
create (cast_value:issue {name:'cast value'}) create (cast_value)-[:Bug]->(org_jbehave_core)
create (fails_with_exception_code:issue {name:'fails with exception code'}) create (fails_with_exception_code)-[:Bug]->(org_jbehave_core)
create (cast_value_from_ExamplesTable:issue {name:'cast value from ExamplesTable'}) create (cast_value_from_ExamplesTable)-[:Improvement]->(org_jbehave_core)
create (cast_value_primitive_types_boolean_replaceNamedParameters_int_trades_:issue {name:'cast value - primitive types - boolean replaceNamedParameters - int trades - '}) create (cast_value_primitive_types_boolean_replaceNamedParameters_int_trades_)-[:Improvement]->(org_jbehave_core)
create (cast_value)-[:Bug]->(org_jbehave_core_steps)
create (fails_with_exception_code)-[:Bug]->(org_jbehave_core_steps)
create (cast_value_from_ExamplesTable)-[:Improvement]->(org_jbehave_core_steps)
create (cast_value_primitive_types_boolean_replaceNamedParameters_int_trades_)-[:Improvement]->(org_jbehave_core_steps)
create (cast_value)-[:Bug]->(core)
create (fails_with_exception_code)-[:Bug]->(core)
create (cast_value_from_ExamplesTable)-[:Improvement]->(core)
create (cast_value_primitive_types_boolean_replaceNamedParameters_int_trades_)-[:Improvement]->(core)
create (cast_value)-[:Bug]->(ExamplesTable)
create (fails_with_exception_code)-[:Bug]->(ExamplesTable)
create (cast_value_from_ExamplesTable)-[:Improvement]->(ExamplesTable)
create (cast_value_primitive_types_boolean_replaceNamedParameters_int_trades_)-[:Improvement]->(ExamplesTable)
create (White_space:issue {name:'White space'}) create (White_space)-[:Bug]->(core)
create (display_excess_white_space:issue {name:'display excess white space'}) create (display_excess_white_space)-[:Improvement]->(core)
create (White_space_failed_outcomes_excess_white_space_white_space_expected_string_excess_white_space_white_space_Proposed_changes_pre__border_px_space_pre_space_pre__pre__table_th_align_center_right_px_left_px_space_pre_space_pre__pre__:issue {name:'White space - failed outcomes - excess white space - white space - expected string - excess white space - white space - Proposed changes - pre- - border px - space pre - space pre- - pre- - table th - align center - right px - left px - space pre - space pre- - pre- - '}) create (White_space_failed_outcomes_excess_white_space_white_space_expected_string_excess_white_space_white_space_Proposed_changes_pre__border_px_space_pre_space_pre__pre__table_th_align_center_right_px_left_px_space_pre_space_pre__pre__)-[:Improvement]->(core)
create (White_space)-[:Bug]->(failed)
create (display_excess_white_space)-[:Improvement]->(failed)
create (White_space_failed_outcomes_excess_white_space_white_space_expected_string_excess_white_space_white_space_Proposed_changes_pre__border_px_space_pre_space_pre__pre__table_th_align_center_right_px_left_px_space_pre_space_pre__pre__)-[:Improvement]->(failed)
create (White_space)-[:Bug]->(outcome)
create (display_excess_white_space)-[:Improvement]->(outcome)
create (White_space_failed_outcomes_excess_white_space_white_space_expected_string_excess_white_space_white_space_Proposed_changes_pre__border_px_space_pre_space_pre__pre__table_th_align_center_right_px_left_px_space_pre_space_pre__pre__)-[:Improvement]->(outcome)
create (White_space)-[:Bug]->(outcome)
create (display_excess_white_space)-[:Improvement]->(outcome)
create (White_space_failed_outcomes_excess_white_space_white_space_expected_string_excess_white_space_white_space_Proposed_changes_pre__border_px_space_pre_space_pre__pre__table_th_align_center_right_px_left_px_space_pre_space_pre__pre__)-[:Improvement]->(outcome)
create (constructors_coreblobmasterjbehave:issue {name:'constructors coreblobmasterjbehave'}) create (constructors_coreblobmasterjbehave)-[:Bug]->(core)
create (default_resource_loader_in_ExamplesTableFactory:issue {name:'default resource loader in ExamplesTableFactory'}) create (default_resource_loader_in_ExamplesTableFactory)-[:Bug]->(core)
create (take_look:issue {name:'take look'}) create (take_look)-[:Improvement]->(core)
create (take_a_look_take_a_look_define_default_define_default_resource_default_resource_default_resource_loaders_resource_loaders_defines_own_resource_own_resource_own_resource_loader_resource_loader_loader_for_stories_default_resource_default_resource_loader_resource_loader_unexpected_behavior_:issue {name:'take a look - take a look - define default - define default resource - default resource - default resource loaders - resource loaders - defines own resource - own resource - own resource loader - resource loader - loader for stories - default resource - default resource loader - resource loader - unexpected behavior - '}) create (take_a_look_take_a_look_define_default_define_default_resource_default_resource_default_resource_loaders_resource_loaders_defines_own_resource_own_resource_own_resource_loader_resource_loader_loader_for_stories_default_resource_default_resource_loader_resource_loader_unexpected_behavior_)-[:Improvement]->(core)
create (constructors_coreblobmasterjbehave)-[:Bug]->(LoadFromClasspath)
create (default_resource_loader_in_ExamplesTableFactory)-[:Bug]->(LoadFromClasspath)
create (take_look)-[:Improvement]->(LoadFromClasspath)
create (take_a_look_take_a_look_define_default_define_default_resource_default_resource_default_resource_loaders_resource_loaders_defines_own_resource_own_resource_own_resource_loader_resource_loader_loader_for_stories_default_resource_default_resource_loader_resource_loader_unexpected_behavior_)-[:Improvement]->(LoadFromClasspath)
create (constructors_coreblobmasterjbehave)-[:Bug]->(ExamplesTable)
create (default_resource_loader_in_ExamplesTableFactory)-[:Bug]->(ExamplesTable)
create (take_look)-[:Improvement]->(ExamplesTable)
create (take_a_look_take_a_look_define_default_define_default_resource_default_resource_default_resource_loaders_resource_loaders_defines_own_resource_own_resource_own_resource_loader_resource_loader_loader_for_stories_default_resource_default_resource_loader_resource_loader_unexpected_behavior_)-[:Improvement]->(ExamplesTable)
create (Test_suite:issue {name:'Test suite'}) create (Test_suite)-[:Bug]->(after)
create (have_steps:issue {name:'have steps'}) create (have_steps)-[:Bug]->(after)
create (have_around_scenarios:issue {name:'have around scenarios'}) create (have_around_scenarios)-[:Improvement]->(after)
create (identify_test_as_failure:issue {name:'identify test as failure'}) create (identify_test_as_failure)-[:Improvement]->(after)
create (batch_execution_is_a_NullPointerException_is_a_NullPointerException_suite_background_story_files_build_tool_throw_all_exceptions_throw_all_exceptions_steps_definitions_identify_the_test_identify_the_test_executing_a_story_executing_a_story_executing_the_batch_executing_the_batch_attached_log_attached_log_file_log_file_containing_different_logs_different_logs_observe_this_issue_observe_this_issue_different_situations_:issue {name:'batch execution - is a NullPointerException - is a NullPointerException - suite background - story files - build tool - throw all exceptions - throw all exceptions - steps definitions - identify the test - identify the test - executing a story - executing a story - executing the batch - executing the batch - attached log - attached log file - log file - containing different logs - different logs - observe this issue - observe this issue - different situations - '}) create (batch_execution_is_a_NullPointerException_is_a_NullPointerException_suite_background_story_files_build_tool_throw_all_exceptions_throw_all_exceptions_steps_definitions_identify_the_test_identify_the_test_executing_a_story_executing_a_story_executing_the_batch_executing_the_batch_attached_log_attached_log_file_log_file_containing_different_logs_different_logs_observe_this_issue_observe_this_issue_different_situations_)-[:Improvement]->(after)
create (Test_suite)-[:Bug]->(scenario)
create (have_steps)-[:Bug]->(scenario)
create (have_around_scenarios)-[:Improvement]->(scenario)
create (identify_test_as_failure)-[:Improvement]->(scenario)
create (batch_execution_is_a_NullPointerException_is_a_NullPointerException_suite_background_story_files_build_tool_throw_all_exceptions_throw_all_exceptions_steps_definitions_identify_the_test_identify_the_test_executing_a_story_executing_a_story_executing_the_batch_executing_the_batch_attached_log_attached_log_file_log_file_containing_different_logs_different_logs_observe_this_issue_observe_this_issue_different_situations_)-[:Improvement]->(scenario)
create (Test_suite)-[:Bug]->(scenario)
create (have_steps)-[:Bug]->(scenario)
create (have_around_scenarios)-[:Improvement]->(scenario)
create (identify_test_as_failure)-[:Improvement]->(scenario)
create (batch_execution_is_a_NullPointerException_is_a_NullPointerException_suite_background_story_files_build_tool_throw_all_exceptions_throw_all_exceptions_steps_definitions_identify_the_test_identify_the_test_executing_a_story_executing_a_story_executing_the_batch_executing_the_batch_attached_log_attached_log_file_log_file_containing_different_logs_different_logs_observe_this_issue_observe_this_issue_different_situations_)-[:Improvement]->(scenario)
create (whole_scenario:issue {name:'whole scenario'}) create (whole_scenario)-[:Bug]->(meta)
create (Allow_filtering)-[:Bug]->(meta)
create (filter_on_single_parametrised_example_scenarios:issue {name:'filter on single parametrised example scenarios'}) create (filter_on_single_parametrised_example_scenarios)-[:Improvement]->(meta)
create (Allow_filtering_on_meta:issue {name:'Allow filtering on meta'}) create (Allow_filtering_on_meta)-[:Improvement]->(meta)
create (Allow_filtering_Allow_filtering_on_meta_filtering_on_meta_meta_by_row_parametrised_example_parametrised_example_scenarios_example_scenarios_parametrised_example_parametrised_example_scenarios_example_scenarios_entire_example_entire_example_scenario_example_scenario_scenario_level_whole_scenario_have_a_value_have_a_value_created_with_more_details_more_details_:issue {name:'Allow filtering - Allow filtering on meta - filtering on meta - meta by row - parametrised example - parametrised example scenarios - example scenarios - parametrised example - parametrised example scenarios - example scenarios - entire example - entire example scenario - example scenario - scenario level - whole scenario - have a value - have a value - created with more details - more details - '}) create (Allow_filtering_Allow_filtering_on_meta_filtering_on_meta_meta_by_row_parametrised_example_parametrised_example_scenarios_example_scenarios_parametrised_example_parametrised_example_scenarios_example_scenarios_entire_example_entire_example_scenario_example_scenario_scenario_level_whole_scenario_have_a_value_have_a_value_created_with_more_details_more_details_)-[:Improvement]->(meta)
create (whole_scenario)-[:Bug]->(meta)
create (Allow_filtering)-[:Bug]->(meta)
create (filter_on_single_parametrised_example_scenarios)-[:Improvement]->(meta)
create (Allow_filtering_on_meta)-[:Improvement]->(meta)
create (Allow_filtering_Allow_filtering_on_meta_filtering_on_meta_meta_by_row_parametrised_example_parametrised_example_scenarios_example_scenarios_parametrised_example_parametrised_example_scenarios_example_scenarios_entire_example_entire_example_scenario_example_scenario_scenario_level_whole_scenario_have_a_value_have_a_value_created_with_more_details_more_details_)-[:Improvement]->(meta)
create (whole_scenario)-[:Bug]->(scenario)
create (Allow_filtering)-[:Bug]->(scenario)
create (filter_on_single_parametrised_example_scenarios)-[:Improvement]->(scenario)
create (Allow_filtering_on_meta)-[:Improvement]->(scenario)
create (Allow_filtering_Allow_filtering_on_meta_filtering_on_meta_meta_by_row_parametrised_example_parametrised_example_scenarios_example_scenarios_parametrised_example_parametrised_example_scenarios_example_scenarios_entire_example_entire_example_scenario_example_scenario_scenario_level_whole_scenario_have_a_value_have_a_value_created_with_more_details_more_details_)-[:Improvement]->(scenario)
create (whole_scenario)-[:Bug]->(scenario)
create (Allow_filtering)-[:Bug]->(scenario)
create (filter_on_single_parametrised_example_scenarios)-[:Improvement]->(scenario)
create (Allow_filtering_on_meta)-[:Improvement]->(scenario)
create (Allow_filtering_Allow_filtering_on_meta_filtering_on_meta_meta_by_row_parametrised_example_parametrised_example_scenarios_example_scenarios_parametrised_example_parametrised_example_scenarios_example_scenarios_entire_example_entire_example_scenario_example_scenario_scenario_level_whole_scenario_have_a_value_have_a_value_created_with_more_details_more_details_)-[:Improvement]->(scenario)
create (operator_between_metas:issue {name:'operator between metas'}) create (operator_between_metas)-[:Bug]->(ant)
create (start_discussion:issue {name:'start discussion'}) create (start_discussion)-[:Improvement]->(ant)
create (results_in_operator:issue {name:'results in operator'}) create (results_in_operator)-[:Improvement]->(ant)
create (using_defult_syntax_for_filtering:issue {name:'using defult syntax for filtering'}) create (using_defult_syntax_for_filtering)-[:Improvement]->(ant)
create (operator_between_metas)-[:Bug]->(meta)
create (start_discussion)-[:Improvement]->(meta)
create (results_in_operator)-[:Improvement]->(meta)
create (using_defult_syntax_for_filtering)-[:Improvement]->(meta)
create (operator_between_metas)-[:Bug]->(meta)
create (start_discussion)-[:Improvement]->(meta)
create (results_in_operator)-[:Improvement]->(meta)
create (using_defult_syntax_for_filtering)-[:Improvement]->(meta)
create (one_scenario:issue {name:'one scenario'}) create (one_scenario)-[:Bug]->(org_jbehave_core)
create (use_parametrised_steps:issue {name:'use parametrised steps'}) create (use_parametrised_steps)-[:Improvement]->(org_jbehave_core)
create (fails_at_first_step:issue {name:'fails at first step'}) create (fails_at_first_step)-[:Improvement]->(org_jbehave_core)
create (Changing_scenario_to_code:issue {name:'Changing scenario to code'}) create (Changing_scenario_to_code)-[:Improvement]->(org_jbehave_core)
create (one_scenario)-[:Bug]->(org_jbehave_core_steps)
create (use_parametrised_steps)-[:Improvement]->(org_jbehave_core_steps)
create (fails_at_first_step)-[:Improvement]->(org_jbehave_core_steps)
create (Changing_scenario_to_code)-[:Improvement]->(org_jbehave_core_steps)
create (one_scenario)-[:Bug]->(core)
create (use_parametrised_steps)-[:Improvement]->(core)
create (fails_at_first_step)-[:Improvement]->(core)
create (Changing_scenario_to_code)-[:Improvement]->(core)
create (one_scenario)-[:Bug]->(scenario)
create (use_parametrised_steps)-[:Improvement]->(scenario)
create (fails_at_first_step)-[:Improvement]->(scenario)
create (Changing_scenario_to_code)-[:Improvement]->(scenario)
create (one_scenario)-[:Bug]->(scenario)
create (use_parametrised_steps)-[:Improvement]->(scenario)
create (fails_at_first_step)-[:Improvement]->(scenario)
create (Changing_scenario_to_code)-[:Improvement]->(scenario)
create (one_scenario)-[:Bug]->(print)
create (use_parametrised_steps)-[:Improvement]->(print)
create (fails_at_first_step)-[:Improvement]->(print)
create (Changing_scenario_to_code)-[:Improvement]->(print)
create (one_scenario)-[:Bug]->(ExamplesTable)
create (use_parametrised_steps)-[:Improvement]->(ExamplesTable)
create (fails_at_first_step)-[:Improvement]->(ExamplesTable)
create (Changing_scenario_to_code)-[:Improvement]->(ExamplesTable)
create (cycle_keyword:issue {name:'cycle keyword'}) create (cycle_keyword)-[:Bug]->(keywords)
create (set_of_scenarios_Story:issue {name:'set of scenarios Story'}) create (set_of_scenarios_Story)-[:Bug]->(keywords)
create (parse_meta_information:issue {name:'parse meta information'}) create (parse_meta_information)-[:Improvement]->(keywords)
create (be_By_grammar:issue {name:'be By grammar'}) create (be_By_grammar)-[:Improvement]->(keywords)
create (use_Lifecycle_keyword_after_Meta_keyword:issue {name:'use Lifecycle keyword after Meta keyword'}) create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(keywords)
create (cycle_keyword)-[:Bug]->(given)
create (set_of_scenarios_Story)-[:Bug]->(given)
create (parse_meta_information)-[:Improvement]->(given)
create (be_By_grammar)-[:Improvement]->(given)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(given)
create (cycle_keyword)-[:Bug]->(givenStories)
create (set_of_scenarios_Story)-[:Bug]->(givenStories)
create (parse_meta_information)-[:Improvement]->(givenStories)
create (be_By_grammar)-[:Improvement]->(givenStories)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(givenStories)
create (cycle_keyword)-[:Bug]->(meta)
create (set_of_scenarios_Story)-[:Bug]->(meta)
create (parse_meta_information)-[:Improvement]->(meta)
create (be_By_grammar)-[:Improvement]->(meta)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(meta)
create (cycle_keyword)-[:Bug]->(narrative)
create (set_of_scenarios_Story)-[:Bug]->(narrative)
create (parse_meta_information)-[:Improvement]->(narrative)
create (be_By_grammar)-[:Improvement]->(narrative)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(narrative)
create (cycle_keyword)-[:Bug]->(after)
create (set_of_scenarios_Story)-[:Bug]->(after)
create (parse_meta_information)-[:Improvement]->(after)
create (be_By_grammar)-[:Improvement]->(after)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(after)
create (cycle_keyword)-[:Bug]->(givenStories)
create (set_of_scenarios_Story)-[:Bug]->(givenStories)
create (parse_meta_information)-[:Improvement]->(givenStories)
create (be_By_grammar)-[:Improvement]->(givenStories)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(givenStories)
create (cycle_keyword)-[:Bug]->(meta)
create (set_of_scenarios_Story)-[:Bug]->(meta)
create (parse_meta_information)-[:Improvement]->(meta)
create (be_By_grammar)-[:Improvement]->(meta)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(meta)
create (cycle_keyword)-[:Bug]->(narrative)
create (set_of_scenarios_Story)-[:Bug]->(narrative)
create (parse_meta_information)-[:Improvement]->(narrative)
create (be_By_grammar)-[:Improvement]->(narrative)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(narrative)
create (cycle_keyword)-[:Bug]->(scenario)
create (set_of_scenarios_Story)-[:Bug]->(scenario)
create (parse_meta_information)-[:Improvement]->(scenario)
create (be_By_grammar)-[:Improvement]->(scenario)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(scenario)
create (cycle_keyword)-[:Bug]->(scenario)
create (set_of_scenarios_Story)-[:Bug]->(scenario)
create (parse_meta_information)-[:Improvement]->(scenario)
create (be_By_grammar)-[:Improvement]->(scenario)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(scenario)
create (cycle_keyword)-[:Bug]->(keywords)
create (set_of_scenarios_Story)-[:Bug]->(keywords)
create (parse_meta_information)-[:Improvement]->(keywords)
create (be_By_grammar)-[:Improvement]->(keywords)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(keywords)
create (cycle_keyword)-[:Bug]->(GivenStories)
create (set_of_scenarios_Story)-[:Bug]->(GivenStories)
create (parse_meta_information)-[:Improvement]->(GivenStories)
create (be_By_grammar)-[:Improvement]->(GivenStories)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(GivenStories)
create (cycle_keyword)-[:Bug]->(Lifecycle)
create (set_of_scenarios_Story)-[:Bug]->(Lifecycle)
create (parse_meta_information)-[:Improvement]->(Lifecycle)
create (be_By_grammar)-[:Improvement]->(Lifecycle)
create (use_Lifecycle_keyword_after_Meta_keyword)-[:Improvement]->(Lifecycle)
create (Examples_table:issue {name:'Examples table'}) create (Examples_table)-[:Bug]->(org_jbehave_core)
create (executing_scenario:issue {name:'executing scenario'}) create (executing_scenario)-[:Improvement]->(org_jbehave_core)
create (am_on_page_PageLink_PageLink_code_Metafilter:issue {name:'am on page |PageLink| |PageLink| code Metafilter'}) create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(org_jbehave_core)
create (executing_scenario_with_table_jbehave_core:issue {name:'executing scenario with table jbehave core'}) create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(org_jbehave_core)
create (Examples_table)-[:Bug]->(org_jbehave_core_embedder)
create (executing_scenario)-[:Improvement]->(org_jbehave_core_embedder)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(org_jbehave_core_embedder)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(org_jbehave_core_embedder)
create (Examples_table)-[:Bug]->(core)
create (executing_scenario)-[:Improvement]->(core)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(core)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(core)
create (Examples_table)-[:Bug]->(groovy)
create (executing_scenario)-[:Improvement]->(groovy)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(groovy)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(groovy)
create (Examples_table)-[:Bug]->(embedder)
create (executing_scenario)-[:Improvement]->(embedder)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(embedder)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(embedder)
create (asA:class {name:'asA', favoritecolor: 'green'}) create (Examples_table)-[:Bug]->(asA)
create (executing_scenario)-[:Improvement]->(asA)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(asA)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(asA)
create (inOrderTo:class {name:'inOrderTo', favoritecolor: 'green'}) create (Examples_table)-[:Bug]->(inOrderTo)
create (executing_scenario)-[:Improvement]->(inOrderTo)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(inOrderTo)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(inOrderTo)
create (iWantTo:class {name:'iWantTo', favoritecolor: 'green'}) create (Examples_table)-[:Bug]->(iWantTo)
create (executing_scenario)-[:Improvement]->(iWantTo)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(iWantTo)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(iWantTo)
create (Examples_table)-[:Bug]->(lifecycle)
create (executing_scenario)-[:Improvement]->(lifecycle)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(lifecycle)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(lifecycle)
create (Examples_table)-[:Bug]->(meta)
create (executing_scenario)-[:Improvement]->(meta)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(meta)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(meta)
create (Examples_table)-[:Bug]->(metaFilter)
create (executing_scenario)-[:Improvement]->(metaFilter)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(metaFilter)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(metaFilter)
create (Examples_table)-[:Bug]->(narrative)
create (executing_scenario)-[:Improvement]->(narrative)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(narrative)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(narrative)
create (Examples_table)-[:Bug]->(asA)
create (executing_scenario)-[:Improvement]->(asA)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(asA)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(asA)
create (Examples_table)-[:Bug]->(inOrderTo)
create (executing_scenario)-[:Improvement]->(inOrderTo)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(inOrderTo)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(inOrderTo)
create (Examples_table)-[:Bug]->(iWantTo)
create (executing_scenario)-[:Improvement]->(iWantTo)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(iWantTo)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(iWantTo)
create (Examples_table)-[:Bug]->(lifecycle)
create (executing_scenario)-[:Improvement]->(lifecycle)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(lifecycle)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(lifecycle)
create (Examples_table)-[:Bug]->(meta)
create (executing_scenario)-[:Improvement]->(meta)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(meta)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(meta)
create (Examples_table)-[:Bug]->(metaFilter)
create (executing_scenario)-[:Improvement]->(metaFilter)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(metaFilter)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(metaFilter)
create (Examples_table)-[:Bug]->(narrative)
create (executing_scenario)-[:Improvement]->(narrative)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(narrative)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(narrative)
create (Examples_table)-[:Bug]->(scenario)
create (executing_scenario)-[:Improvement]->(scenario)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(scenario)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(scenario)
create (soThat:class {name:'soThat', favoritecolor: 'green'}) create (Examples_table)-[:Bug]->(soThat)
create (executing_scenario)-[:Improvement]->(soThat)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(soThat)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(soThat)
create (Examples_table)-[:Bug]->(scenario)
create (executing_scenario)-[:Improvement]->(scenario)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(scenario)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(scenario)
create (Examples_table)-[:Bug]->(soThat)
create (executing_scenario)-[:Improvement]->(soThat)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(soThat)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(soThat)
create (Examples_table)-[:Bug]->(initialize)
create (executing_scenario)-[:Improvement]->(initialize)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(initialize)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(initialize)
create (Examples_table)-[:Bug]->(ExamplesTable)
create (executing_scenario)-[:Improvement]->(ExamplesTable)
create (am_on_page_PageLink_PageLink_code_Metafilter)-[:Improvement]->(ExamplesTable)
create (executing_scenario_with_table_jbehave_core)-[:Improvement]->(ExamplesTable)
create (consecutive_parameters:issue {name:'consecutive parameters'}) create (consecutive_parameters)-[:Bug]->(given)
create (consecutive_parameters_in_string:issue {name:'consecutive parameters in string'}) create (consecutive_parameters_in_string)-[:Bug]->(given)
create (using_ordered_parameters:issue {name:'using ordered parameters'}) create (using_ordered_parameters)-[:Improvement]->(given)
create (is_For_example:issue {name:'is For example'}) create (is_For_example)-[:Improvement]->(given)
create (consecutive_parameters_parameters_in_string_ordered_parameters_ordered_parameters_breaks_parameters_breaks_using_a_string_using_a_string_running_the_step_running_the_step_break_every_time_break_every_time_second_parameter_first_parameter_open_some_text_open_some_text_limit_parameter_method_signature_someMethodString_limit_String_status_running_the_test_running_the_test_multiple_times_:issue {name:'consecutive parameters - parameters in string - ordered parameters - ordered parameters breaks - parameters breaks - using a string - using a string - running the step - running the step - break every time - break every time - second parameter - first parameter - open some text - open some text - limit parameter - method signature - someMethodString limit - String status - running the test - running the test - multiple times - '}) create (consecutive_parameters_parameters_in_string_ordered_parameters_ordered_parameters_breaks_parameters_breaks_using_a_string_using_a_string_running_the_step_running_the_step_break_every_time_break_every_time_second_parameter_first_parameter_open_some_text_open_some_text_limit_parameter_method_signature_someMethodString_limit_String_status_running_the_test_running_the_test_multiple_times_)-[:Improvement]->(given)
create (Reports_view:issue {name:'Reports view'}) create (Reports_view)-[:Bug]->(org_jbehave_core)
create (stories_in_log_string:issue {name:'stories in log string'}) create (stories_in_log_string)-[:Bug]->(org_jbehave_core)
create (contains_files:issue {name:'contains files'}) create (contains_files)-[:Improvement]->(org_jbehave_core)
create (showes_In_AfterStories:issue {name:'showes In AfterStories'}) create (showes_In_AfterStories)-[:Improvement]->(org_jbehave_core)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_:issue {name:'log string - Reports view - X stories - showes wrong number - wrong number - reports stats - more story - log string - '}) create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(org_jbehave_core)
create (Reports_view)-[:Bug]->(org_jbehave_core_reporters)
create (stories_in_log_string)-[:Bug]->(org_jbehave_core_reporters)
create (contains_files)-[:Improvement]->(org_jbehave_core_reporters)
create (showes_In_AfterStories)-[:Improvement]->(org_jbehave_core_reporters)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(org_jbehave_core_reporters)
create (Reports_view)-[:Bug]->(core)
create (stories_in_log_string)-[:Bug]->(core)
create (contains_files)-[:Improvement]->(core)
create (showes_In_AfterStories)-[:Improvement]->(core)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(core)
create (Reports_view)-[:Bug]->(pending)
create (stories_in_log_string)-[:Bug]->(pending)
create (contains_files)-[:Improvement]->(pending)
create (showes_In_AfterStories)-[:Improvement]->(pending)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(pending)
create (Reports_view)-[:Bug]->(scenario)
create (stories_in_log_string)-[:Bug]->(scenario)
create (contains_files)-[:Improvement]->(scenario)
create (showes_In_AfterStories)-[:Improvement]->(scenario)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(scenario)
create (Reports_view)-[:Bug]->(pending)
create (stories_in_log_string)-[:Bug]->(pending)
create (contains_files)-[:Improvement]->(pending)
create (showes_In_AfterStories)-[:Improvement]->(pending)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(pending)
create (Reports_view)-[:Bug]->(scenario)
create (stories_in_log_string)-[:Bug]->(scenario)
create (contains_files)-[:Improvement]->(scenario)
create (showes_In_AfterStories)-[:Improvement]->(scenario)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(scenario)
create (Reports_view)-[:Bug]->(show)
create (stories_in_log_string)-[:Bug]->(show)
create (contains_files)-[:Improvement]->(show)
create (showes_In_AfterStories)-[:Improvement]->(show)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(show)
create (Reports_view)-[:Bug]->(ViewGenerator)
create (stories_in_log_string)-[:Bug]->(ViewGenerator)
create (contains_files)-[:Improvement]->(ViewGenerator)
create (showes_In_AfterStories)-[:Improvement]->(ViewGenerator)
create (log_string_Reports_view_X_stories_showes_wrong_number_wrong_number_reports_stats_more_story_log_string_)-[:Improvement]->(ViewGenerator)
create (Custom_StoryReporter:issue {name:'Custom StoryReporter'}) create (Custom_StoryReporter)-[:Bug]->(google)
create (create_StoryReporter:issue {name:'create StoryReporter'}) create (create_StoryReporter)-[:Bug]->(google)
create (More_information_example_project_reproducing_this_issue_reproducing_this_issue_:issue {name:'More information - example project - reproducing this issue - reproducing this issue - '}) create (More_information_example_project_reproducing_this_issue_reproducing_this_issue_)-[:Improvement]->(google)
create (custom_separator:issue {name:'custom separator'}) create (custom_separator)-[:Bug]->(org_jbehave_core)
create (values_of_example:issue {name:'values of example'}) create (values_of_example)-[:Bug]->(org_jbehave_core)
create (executing_jbehave_story:issue {name:'executing jbehave story'}) create (executing_jbehave_story)-[:Improvement]->(org_jbehave_core)
create (have_spaces_at_sides:issue {name:'have spaces at sides'}) create (have_spaces_at_sides)-[:Improvement]->(org_jbehave_core)
create (example_table_is_a_custom_is_a_custom_custom_separator_found_this_bug_found_this_bug_executing_a_jbehave_executing_a_jbehave_jbehave_story_example_table_Given_an_example_Given_an_example_example_table_had_this_error_had_this_error_error_message_running_stories_found_several_workarounds_several_workarounds_delete_the_space_delete_the_space_delete_the_space_delete_the_space_define_a_custom_define_a_custom_custom_separator_use_the_default_use_the_default_default_separator_use_a_custom_use_a_custom_custom_separator_have_spaces_use_the_jbehave_use_the_jbehave_jbehave_core_:issue {name:'example table - is a custom - is a custom - custom separator - found this bug - found this bug - executing a jbehave - executing a jbehave - jbehave story - example table - Given an example - Given an example - example table - had this error - had this error - error message - running stories - found several workarounds - several workarounds - delete the space - delete the space - delete the space - delete the space - define a custom - define a custom - custom separator - use the default - use the default - default separator - use a custom - use a custom - custom separator - have spaces - use the jbehave - use the jbehave - jbehave core - '}) create (example_table_is_a_custom_is_a_custom_custom_separator_found_this_bug_found_this_bug_executing_a_jbehave_executing_a_jbehave_jbehave_story_example_table_Given_an_example_Given_an_example_example_table_had_this_error_had_this_error_error_message_running_stories_found_several_workarounds_several_workarounds_delete_the_space_delete_the_space_delete_the_space_delete_the_space_define_a_custom_define_a_custom_custom_separator_use_the_default_use_the_default_default_separator_use_a_custom_use_a_custom_custom_separator_have_spaces_use_the_jbehave_use_the_jbehave_jbehave_core_)-[:Improvement]->(org_jbehave_core)
create (custom_separator)-[:Bug]->(org_jbehave_core_embedder)
create (values_of_example)-[:Bug]->(org_jbehave_core_embedder)
create (executing_jbehave_story)-[:Improvement]->(org_jbehave_core_embedder)
create (have_spaces_at_sides)-[:Improvement]->(org_jbehave_core_embedder)
create (example_table_is_a_custom_is_a_custom_custom_separator_found_this_bug_found_this_bug_executing_a_jbehave_executing_a_jbehave_jbehave_story_example_table_Given_an_example_Given_an_example_example_table_had_this_error_had_this_error_error_message_running_stories_found_several_workarounds_several_workarounds_delete_the_space_delete_the_space_delete_the_space_delete_the_space_define_a_custom_define_a_custom_custom_separator_use_the_default_use_the_default_default_separator_use_a_custom_use_a_custom_custom_separator_have_spaces_use_the_jbehave_use_the_jbehave_jbehave_core_)-[:Improvement]->(org_jbehave_core_embedder)
create (custom_separator)-[:Bug]->(core)
create (values_of_example)-[:Bug]->(core)
create (executing_jbehave_story)-[:Improvement]->(core)
create (have_spaces_at_sides)-[:Improvement]->(core)
create (example_table_is_a_custom_is_a_custom_custom_separator_found_this_bug_found_this_bug_executing_a_jbehave_executing_a_jbehave_jbehave_story_example_table_Given_an_example_Given_an_example_example_table_had_this_error_had_this_error_error_message_running_stories_found_several_workarounds_several_workarounds_delete_the_space_delete_the_space_delete_the_space_delete_the_space_define_a_custom_define_a_custom_custom_separator_use_the_default_use_the_default_default_separator_use_a_custom_use_a_custom_custom_separator_have_spaces_use_the_jbehave_use_the_jbehave_jbehave_core_)-[:Improvement]->(core)
create (custom_separator)-[:Bug]->(embedder)
create (values_of_example)-[:Bug]->(embedder)
create (executing_jbehave_story)-[:Improvement]->(embedder)
create (have_spaces_at_sides)-[:Improvement]->(embedder)
create (example_table_is_a_custom_is_a_custom_custom_separator_found_this_bug_found_this_bug_executing_a_jbehave_executing_a_jbehave_jbehave_story_example_table_Given_an_example_Given_an_example_example_table_had_this_error_had_this_error_error_message_running_stories_found_several_workarounds_several_workarounds_delete_the_space_delete_the_space_delete_the_space_delete_the_space_define_a_custom_define_a_custom_custom_separator_use_the_default_use_the_default_default_separator_use_a_custom_use_a_custom_custom_separator_have_spaces_use_the_jbehave_use_the_jbehave_jbehave_core_)-[:Improvement]->(embedder)
create (custom_separator)-[:Bug]->(after)
create (values_of_example)-[:Bug]->(after)
create (executing_jbehave_story)-[:Improvement]->(after)
create (have_spaces_at_sides)-[:Improvement]->(after)
create (example_table_is_a_custom_is_a_custom_custom_separator_found_this_bug_found_this_bug_executing_a_jbehave_executing_a_jbehave_jbehave_story_example_table_Given_an_example_Given_an_example_example_table_had_this_error_had_this_error_error_message_running_stories_found_several_workarounds_several_workarounds_delete_the_space_delete_the_space_delete_the_space_delete_the_space_define_a_custom_define_a_custom_custom_separator_use_the_default_use_the_default_default_separator_use_a_custom_use_a_custom_custom_separator_have_spaces_use_the_jbehave_use_the_jbehave_jbehave_core_)-[:Improvement]->(after)
create (story_level:issue {name:'story level'}) create (story_level)-[:Bug]->(scenario)
create (Run_level_Given_stories:issue {name:'Run level Given stories'}) create (Run_level_Given_stories)-[:Bug]->(scenario)
create (Run_story_Given_stories_contains_scenarios_contains_scenarios_Story_scenarios_Story_Given_stories_contains_scenarios_:issue {name:'Run story - Given stories - contains scenarios - contains scenarios Story - scenarios Story - Given stories - contains scenarios - '}) create (Run_story_Given_stories_contains_scenarios_contains_scenarios_Story_scenarios_Story_Given_stories_contains_scenarios_)-[:Improvement]->(scenario)
create (story_level)-[:Bug]->(scenario)
create (Run_level_Given_stories)-[:Bug]->(scenario)
create (Run_story_Given_stories_contains_scenarios_contains_scenarios_Story_scenarios_Story_Given_stories_contains_scenarios_)-[:Improvement]->(scenario)
create (RestartingScenarioFailure_exception:issue {name:'RestartingScenarioFailure exception'}) create (RestartingScenarioFailure_exception)-[:Bug]->(maven)
create (reproduces_issue_restart_JBehave:issue {name:'reproduces issue restart JBehave'}) create (reproduces_issue_restart_JBehave)-[:Bug]->(maven)
create (RestartingScenarioFailure_exception)-[:Bug]->(given)
create (reproduces_issue_restart_JBehave)-[:Bug]->(given)
create (RestartingScenarioFailure_exception)-[:Bug]->(after)
create (reproduces_issue_restart_JBehave)-[:Bug]->(after)
create (RestartingScenarioFailure_exception)-[:Bug]->(scenario)
create (reproduces_issue_restart_JBehave)-[:Bug]->(scenario)
create (RestartingScenarioFailure_exception)-[:Bug]->(scenario)
create (reproduces_issue_restart_JBehave)-[:Bug]->(scenario)
create (afterStory_notification:issue {name:'afterStory notification'}) create (afterStory_notification)-[:Bug]->(meta)
create (generating_reports:issue {name:'generating reports'}) create (generating_reports)-[:Bug]->(meta)
create (affects_among_others_Serenity:issue {name:'affects among others Serenity'}) create (affects_among_others_Serenity)-[:Improvement]->(meta)
create (generating_reports_in_step_bddserenity_jbehaveissues:issue {name:'generating reports in step bddserenity jbehaveissues'}) create (generating_reports_in_step_bddserenity_jbehaveissues)-[:Improvement]->(meta)
create (afterStory_notification)-[:Bug]->(after)
create (generating_reports)-[:Bug]->(after)
create (affects_among_others_Serenity)-[:Improvement]->(after)
create (generating_reports_in_step_bddserenity_jbehaveissues)-[:Improvement]->(after)
create (afterStory_notification)-[:Bug]->(meta)
create (generating_reports)-[:Bug]->(meta)
create (affects_among_others_Serenity)-[:Improvement]->(meta)
create (generating_reports_in_step_bddserenity_jbehaveissues)-[:Improvement]->(meta)
create (Story_Meta:issue {name:'Story Meta'}) create (Story_Meta)-[:Bug]->(Lifecycle)
create (close_storyDurations:issue {name:'close storyDurations'}) create (close_storyDurations)-[:Bug]->(after)
create (close_storyDurations_:issue {name:'close storyDurations - '}) create (close_storyDurations_)-[:Bug]->(after)
create (close_storyDurations)-[:Bug]->(close)
create (close_storyDurations_)-[:Bug]->(close)
create (close_storyDurations)-[:Bug]->(ViewGenerator)
create (close_storyDurations_)-[:Bug]->(ViewGenerator)
create (following_error:issue {name:'following error'}) create (following_error)-[:Bug]->(core)
create (following_error)-[:Bug]->(hudson)
create (following_error)-[:Bug]->(jenkins)
create (following_error)-[:Bug]->(failed)
create (following_ones:issue {name:'following ones'}) create (following_ones)-[:Bug]->(given)
create (Allow_next_Steps:issue {name:'Allow next Steps'}) create (Allow_next_Steps)-[:Bug]->(given)
create (avoid_of_execution:issue {name:'avoid of execution'}) create (avoid_of_execution)-[:Improvement]->(given)
create (Allow_next_Steps_next_Steps_Skipped_Under_certain_circumstances_certain_circumstances_given_step_failing_the_tests_failing_the_tests_Following_the_same_approach_same_approach_following_ones_:issue {name:'Allow next Steps - next Steps - Skipped Under certain circumstances - certain circumstances - given step - failing the tests - failing the tests - Following the same approach - same approach - following ones - '}) create (Allow_next_Steps_next_Steps_Skipped_Under_certain_circumstances_certain_circumstances_given_step_failing_the_tests_failing_the_tests_Following_the_same_approach_same_approach_following_ones_)-[:Improvement]->(given)
create (_story:issue {name:' story'}) create (_story)-[:Bug]->(JUnitStory)
create (run_multiple_stories:issue {name:'run multiple stories'}) create (run_multiple_stories)-[:Bug]->(JUnitStory)
create (failing_with_RejectedExecutionException:issue {name:'failing with RejectedExecutionException'}) create (failing_with_RejectedExecutionException)-[:Improvement]->(JUnitStory)
create (run_multiple_stories_with_Maven_plugin:issue {name:'run multiple stories with Maven plugin'}) create (run_multiple_stories_with_Maven_plugin)-[:Improvement]->(JUnitStory)
create (run_multiple_stories_multiple_stories_run_stories_local_debug_local_debug_port_debug_port_attach_a_breakpoint_attach_a_breakpoint_shutdownNow_method_executor_service_shutdownExecutorService_method_story_classes_extends_JUnitStory_completes_JUnitStory_completes_terminated_thread_terminated_thread_pool_thread_pool_blocking_issue_most_people_using_JUnitStory_cause_builds_application_developers_:issue {name:'run multiple stories - multiple stories - run stories - local debug - local debug port - debug port - attach a breakpoint - attach a breakpoint - shutdownNow method - executor service - shutdownExecutorService method - story classes - extends JUnitStory completes - JUnitStory completes - terminated thread - terminated thread pool - thread pool - blocking issue - most people - using JUnitStory - cause builds - application developers - '}) create (run_multiple_stories_multiple_stories_run_stories_local_debug_local_debug_port_debug_port_attach_a_breakpoint_attach_a_breakpoint_shutdownNow_method_executor_service_shutdownExecutorService_method_story_classes_extends_JUnitStory_completes_JUnitStory_completes_terminated_thread_terminated_thread_pool_thread_pool_blocking_issue_most_people_using_JUnitStory_cause_builds_application_developers_)-[:Improvement]->(JUnitStory)
create (UTF__Projects:issue {name:'UTF- Projects'}) create (UTF__Projects)-[:Bug]->(LoadFromClasspath)
create (clients_of_codejava_LoadFromClasspath:issue {name:'clients of codejava LoadFromClasspath'}) create (clients_of_codejava_LoadFromClasspath)-[:Bug]->(LoadFromClasspath)
create (having_stories:issue {name:'having stories'}) create (having_stories)-[:Improvement]->(LoadFromClasspath)
create (having_stories_in_classpath:issue {name:'having stories in classpath'}) create (having_stories_in_classpath)-[:Improvement]->(LoadFromClasspath)
create (having_stories_having_stories_in_classpath_stories_in_classpath_UTF__Projects_have_different_encodings_different_encodings_different_encodings_sources_encodings_sources_sources_and_resources_allows_clients_define_their_stories_maintaining_UTF__maintaining_UTF__as_default_UTF__as_default_:issue {name:'having stories - having stories in classpath - stories in classpath - UTF- Projects - have different encodings - different encodings - different encodings sources - encodings sources - sources and resources - allows clients - define their stories - maintaining UTF- - maintaining UTF- as default - UTF- as default - '}) create (having_stories_having_stories_in_classpath_stories_in_classpath_UTF__Projects_have_different_encodings_different_encodings_different_encodings_sources_encodings_sources_sources_and_resources_allows_clients_define_their_stories_maintaining_UTF__maintaining_UTF__as_default_UTF__as_default_)-[:Improvement]->(LoadFromClasspath)
create (Test_Story:issue {name:'Test Story'}) create (Test_Story)-[:Bug]->(core)
create (resolves_names:issue {name:'resolves names'}) create (resolves_names)-[:Bug]->(core)
create (resolves_names_Correct_behavior_Given_story_Given_story_files_story_files_UnderscoredToCapitalized_resolver_UnderscoredToCapitalized_resolver_attempts_resolver_attempts_resolve_the_name_resolve_the_name_Current_behavior_:issue {name:'resolves names - Correct behavior - Given story - Given story files - story files - UnderscoredToCapitalized resolver - UnderscoredToCapitalized resolver attempts - resolver attempts - resolve the name - resolve the name - Current behavior - '}) create (resolves_names_Correct_behavior_Given_story_Given_story_files_story_files_UnderscoredToCapitalized_resolver_UnderscoredToCapitalized_resolver_attempts_resolver_attempts_resolve_the_name_resolve_the_name_Current_behavior_)-[:Improvement]->(core)
create (Test_Story)-[:Bug]->(UnderscoredToCapitalized)
create (resolves_names)-[:Bug]->(UnderscoredToCapitalized)
create (resolves_names_Correct_behavior_Given_story_Given_story_files_story_files_UnderscoredToCapitalized_resolver_UnderscoredToCapitalized_resolver_attempts_resolver_attempts_resolve_the_name_resolve_the_name_Current_behavior_)-[:Improvement]->(UnderscoredToCapitalized)
create (Support_partial:issue {name:'Support partial'}) create (Support_partial)-[:Bug]->(scenario)
create (have_implemented_step_codejava:issue {name:'have implemented step codejava'}) create (have_implemented_step_codejava)-[:Bug]->(scenario)
create (do_something_with_Examples_middle_code:issue {name:'do something with Examples |middle| code'}) create (do_something_with_Examples_middle_code)-[:Improvement]->(scenario)
create (Support_partial)-[:Bug]->(scenario)
create (have_implemented_step_codejava)-[:Bug]->(scenario)
create (do_something_with_Examples_middle_code)-[:Improvement]->(scenario)
create (Total_report:issue {name:'Total report'}) create (Total_report)-[:Bug]->(org_jbehave_core)
create (count_correcty:issue {name:'count correcty'}) create (count_correcty)-[:Bug]->(org_jbehave_core)
create (write_in_file:issue {name:'write in file'}) create (write_in_file)-[:Improvement]->(org_jbehave_core)
create (count_correcty_for_scenario:issue {name:'count correcty for scenario'}) create (count_correcty_for_scenario)-[:Improvement]->(org_jbehave_core)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_:issue {name:'Total report - count correcty - count correcty for scenario - correcty for scenario - given scenario - reproduce - first scenario - second scenario - previous scenario - close output - close output file - output file - file with stats - Actual result - next results - Total report - show real log - real log - '}) create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(org_jbehave_core)
create (Total_report)-[:Bug]->(org_jbehave_core_reporters)
create (count_correcty)-[:Bug]->(org_jbehave_core_reporters)
create (write_in_file)-[:Improvement]->(org_jbehave_core_reporters)
create (count_correcty_for_scenario)-[:Improvement]->(org_jbehave_core_reporters)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(org_jbehave_core_reporters)
create (Total_report)-[:Bug]->(core)
create (count_correcty)-[:Bug]->(core)
create (write_in_file)-[:Improvement]->(core)
create (count_correcty_for_scenario)-[:Improvement]->(core)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(core)
create (Total_report)-[:Bug]->(failed)
create (count_correcty)-[:Bug]->(failed)
create (write_in_file)-[:Improvement]->(failed)
create (count_correcty_for_scenario)-[:Improvement]->(failed)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(failed)
create (Total_report)-[:Bug]->(given)
create (count_correcty)-[:Bug]->(given)
create (write_in_file)-[:Improvement]->(given)
create (count_correcty_for_scenario)-[:Improvement]->(given)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(given)
create (Total_report)-[:Bug]->(givenStories)
create (count_correcty)-[:Bug]->(givenStories)
create (write_in_file)-[:Improvement]->(givenStories)
create (count_correcty_for_scenario)-[:Improvement]->(givenStories)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(givenStories)
create (Total_report)-[:Bug]->(givenStories)
create (count_correcty)-[:Bug]->(givenStories)
create (write_in_file)-[:Improvement]->(givenStories)
create (count_correcty_for_scenario)-[:Improvement]->(givenStories)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(givenStories)
create (Total_report)-[:Bug]->(scenario)
create (count_correcty)-[:Bug]->(scenario)
create (write_in_file)-[:Improvement]->(scenario)
create (count_correcty_for_scenario)-[:Improvement]->(scenario)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(scenario)
create (Total_report)-[:Bug]->(scenario)
create (count_correcty)-[:Bug]->(scenario)
create (write_in_file)-[:Improvement]->(scenario)
create (count_correcty_for_scenario)-[:Improvement]->(scenario)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(scenario)
create (Total_report)-[:Bug]->(close)
create (count_correcty)-[:Bug]->(close)
create (write_in_file)-[:Improvement]->(close)
create (count_correcty_for_scenario)-[:Improvement]->(close)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(close)
create (Total_report)-[:Bug]->(show)
create (count_correcty)-[:Bug]->(show)
create (write_in_file)-[:Improvement]->(show)
create (count_correcty_for_scenario)-[:Improvement]->(show)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(show)
create (Total_report)-[:Bug]->(GivenStory)
create (count_correcty)-[:Bug]->(GivenStory)
create (write_in_file)-[:Improvement]->(GivenStory)
create (count_correcty_for_scenario)-[:Improvement]->(GivenStory)
create (Total_report_count_correcty_count_correcty_for_scenario_correcty_for_scenario_given_scenario_reproduce_first_scenario_second_scenario_previous_scenario_close_output_close_output_file_output_file_file_with_stats_Actual_result_next_results_Total_report_show_real_log_real_log_)-[:Improvement]->(GivenStory)
create (Running_Jbehave:issue {name:'Running Jbehave'}) create (Running_Jbehave)-[:Improvement]->(org_jbehave_core)
create (Running_Jbehave_as_Junit_Test:issue {name:'Running Jbehave as Junit Test'}) create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(org_jbehave_core)
create (Running_Jbehave)-[:Improvement]->(org_jbehave_core_configuration)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(org_jbehave_core_configuration)
create (Running_Jbehave)-[:Improvement]->(org_jbehave_core_embedder)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(org_jbehave_core_embedder)
create (Running_Jbehave)-[:Improvement]->(org_jbehave_core_io)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(org_jbehave_core_io)
create (org_jbehave_core_junit:package {name:'org_jbehave_core_junit', favoritecolor: 'orange'}) create (Running_Jbehave)-[:Improvement]->(org_jbehave_core_junit)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(org_jbehave_core_junit)
create (Running_Jbehave)-[:Improvement]->(org_jbehave_core_reporters)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(org_jbehave_core_reporters)
create (Running_Jbehave)-[:Improvement]->(org_jbehave_core_steps)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(org_jbehave_core_steps)
create (Running_Jbehave)-[:Improvement]->(core)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(core)
create (Running_Jbehave)-[:Improvement]->(candidateSteps)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(candidateSteps)
create (Running_Jbehave)-[:Improvement]->(configuration)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(configuration)
create (Running_Jbehave)-[:Improvement]->(embedder)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(embedder)
create (Running_Jbehave)-[:Improvement]->(StoryReporterBuilder)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(StoryReporterBuilder)
create (Running_Jbehave)-[:Improvement]->(useStoryLoader)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(useStoryLoader)
create (Running_Jbehave)-[:Improvement]->(useStoryReporterBuilder)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(useStoryReporterBuilder)
create (Running_Jbehave)-[:Improvement]->(StoryReporterBuilder)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(StoryReporterBuilder)
create (Running_Jbehave)-[:Improvement]->(StoryReporterBuilder)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(StoryReporterBuilder)
create (Running_Jbehave)-[:Improvement]->(useStoryLoader)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(useStoryLoader)
create (Running_Jbehave)-[:Improvement]->(useStoryReporterBuilder)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(useStoryReporterBuilder)
create (Running_Jbehave)-[:Improvement]->(LoadFromClasspath)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(LoadFromClasspath)
create (Running_Jbehave)-[:Improvement]->(JUnitStories)
create (Running_Jbehave_as_Junit_Test)-[:Improvement]->(JUnitStories)
create (actual_problem:issue {name:'actual problem'}) create (actual_problem)-[:Bug]->(core)
create (block_of_code:issue {name:'block of code'}) create (block_of_code)-[:Bug]->(embedder)
create (Finding_documentation:issue {name:'Finding documentation'}) create (Finding_documentation)-[:Bug]->(embedder)
create (public_void:issue {name:'public void'}) create (public_void)-[:Bug]->(composite)
create (issue_in_version:issue {name:'issue in version'}) create (issue_in_version)-[:Bug]->(composite)
create (using_JBehave)-[:Improvement]->(composite)
create (tries_in_composite_step:issue {name:'tries in composite step'}) create (tries_in_composite_step)-[:Improvement]->(composite)
create (using_JBehave_with_Java_v:issue {name:'using JBehave with Java v'}) create (using_JBehave_with_Java_v)-[:Improvement]->(composite)
create (used_in_composite_steps_composite_steps_steps_Hey_guys_composite_step_following_scenario_execute_step_public_void_execute_step_one_void_execute_step_one_execute_step_public_void_execute_void_execute_void_execute_step_execute_step_execute_step_execute_step_execute_step_public_void_public_void_execute_step_one_and_two_void_execute_step_one_and_two_match_the_composite_match_the_composite_execute_step_change_the_composite_change_the_composite_execute_step_latest_version_previous_step_:issue {name:'used in composite steps - composite steps - steps Hey guys - composite step - following scenario - execute step - public void execute_step_one - void execute_step_one - execute step - public void execute - void execute - void execute step - execute step - execute step - execute step - execute step - public void - public void execute_step_one_and_two - void execute_step_one_and_two - match the composite - match the composite - execute step - change the composite - change the composite - execute step - latest version - previous step - '}) create (used_in_composite_steps_composite_steps_steps_Hey_guys_composite_step_following_scenario_execute_step_public_void_execute_step_one_void_execute_step_one_execute_step_public_void_execute_void_execute_void_execute_step_execute_step_execute_step_execute_step_execute_step_public_void_public_void_execute_step_one_and_two_void_execute_step_one_and_two_match_the_composite_match_the_composite_execute_step_change_the_composite_change_the_composite_execute_step_latest_version_previous_step_)-[:Bug]->(composite)
create (public_void)-[:Bug]->(composite)
create (issue_in_version)-[:Bug]->(composite)
create (using_JBehave)-[:Improvement]->(composite)
create (tries_in_composite_step)-[:Improvement]->(composite)
create (using_JBehave_with_Java_v)-[:Improvement]->(composite)
create (used_in_composite_steps_composite_steps_steps_Hey_guys_composite_step_following_scenario_execute_step_public_void_execute_step_one_void_execute_step_one_execute_step_public_void_execute_void_execute_void_execute_step_execute_step_execute_step_execute_step_execute_step_public_void_public_void_execute_step_one_and_two_void_execute_step_one_and_two_match_the_composite_match_the_composite_execute_step_change_the_composite_change_the_composite_execute_step_latest_version_previous_step_)-[:Bug]->(composite)
create (public_void)-[:Bug]->(scenario)
create (issue_in_version)-[:Bug]->(scenario)
create (using_JBehave)-[:Improvement]->(scenario)
create (tries_in_composite_step)-[:Improvement]->(scenario)
create (using_JBehave_with_Java_v)-[:Improvement]->(scenario)
create (used_in_composite_steps_composite_steps_steps_Hey_guys_composite_step_following_scenario_execute_step_public_void_execute_step_one_void_execute_step_one_execute_step_public_void_execute_void_execute_void_execute_step_execute_step_execute_step_execute_step_execute_step_public_void_public_void_execute_step_one_and_two_void_execute_step_one_and_two_match_the_composite_match_the_composite_execute_step_change_the_composite_change_the_composite_execute_step_latest_version_previous_step_)-[:Bug]->(scenario)
create (public_void)-[:Bug]->(scenario)
create (issue_in_version)-[:Bug]->(scenario)
create (using_JBehave)-[:Improvement]->(scenario)
create (tries_in_composite_step)-[:Improvement]->(scenario)
create (using_JBehave_with_Java_v)-[:Improvement]->(scenario)
create (used_in_composite_steps_composite_steps_steps_Hey_guys_composite_step_following_scenario_execute_step_public_void_execute_step_one_void_execute_step_one_execute_step_public_void_execute_void_execute_void_execute_step_execute_step_execute_step_execute_step_execute_step_public_void_public_void_execute_step_one_and_two_void_execute_step_one_and_two_match_the_composite_match_the_composite_execute_step_change_the_composite_change_the_composite_execute_step_latest_version_previous_step_)-[:Bug]->(scenario)
create (public_void)-[:Bug]->(Composite)
create (issue_in_version)-[:Bug]->(Composite)
create (using_JBehave)-[:Improvement]->(Composite)
create (tries_in_composite_step)-[:Improvement]->(Composite)
create (using_JBehave_with_Java_v)-[:Improvement]->(Composite)
create (used_in_composite_steps_composite_steps_steps_Hey_guys_composite_step_following_scenario_execute_step_public_void_execute_step_one_void_execute_step_one_execute_step_public_void_execute_void_execute_void_execute_step_execute_step_execute_step_execute_step_execute_step_public_void_public_void_execute_step_one_and_two_void_execute_step_one_and_two_match_the_composite_match_the_composite_execute_step_change_the_composite_change_the_composite_execute_step_latest_version_previous_step_)-[:Bug]->(Composite)
create (Example_Table:issue {name:'Example Table'}) create (Example_Table)-[:Bug]->(scenario)
create (user_searches_by_author:issue {name:'user searches by author'}) create (user_searches_by_author)-[:Bug]->(scenario)
create (take_preference:issue {name:'take preference'}) create (take_preference)-[:Improvement]->(scenario)
create (leads_into_rjimgal:issue {name:'leads into rjimgal'}) create (leads_into_rjimgal)-[:Improvement]->(scenario)
create (take_preference_over_Meta_parameters:issue {name:'take preference over Meta parameters'}) create (take_preference_over_Meta_parameters)-[:Improvement]->(scenario)
create (Example_Table_Example_Table_parameters_Table_parameters_take_preference_following_scenario_list_books_list_books_by_author_books_by_author_Given_an_author_Given_an_author_author_author_user_searches_searches_by_author_are_books_existing_ExamplesTable_parameters_ExamplesTable_parameters_Given_an_author_Given_an_author_author_author_think_examples_think_examples_table_examples_table_examples_table_value_table_value_take_preference_more_sense_have_any_value_have_any_value_empty_string_:issue {name:'Example Table - Example Table parameters - Table parameters - take preference - following scenario - list books - list books by author - books by author - Given an author - Given an author - author author - user searches - searches by author - are books - existing ExamplesTable parameters - ExamplesTable parameters - Given an author - Given an author - author author - think examples - think examples table - examples table - examples table value - table value - take preference - more sense - have any value - have any value - empty string - '}) create (Example_Table_Example_Table_parameters_Table_parameters_take_preference_following_scenario_list_books_list_books_by_author_books_by_author_Given_an_author_Given_an_author_author_author_user_searches_searches_by_author_are_books_existing_ExamplesTable_parameters_ExamplesTable_parameters_Given_an_author_Given_an_author_author_author_think_examples_think_examples_table_examples_table_examples_table_value_table_value_take_preference_more_sense_have_any_value_have_any_value_empty_string_)-[:Bug]->(scenario)
create (Example_Table)-[:Bug]->(scenario)
create (user_searches_by_author)-[:Bug]->(scenario)
create (take_preference)-[:Improvement]->(scenario)
create (leads_into_rjimgal)-[:Improvement]->(scenario)
create (take_preference_over_Meta_parameters)-[:Improvement]->(scenario)
create (Example_Table_Example_Table_parameters_Table_parameters_take_preference_following_scenario_list_books_list_books_by_author_books_by_author_Given_an_author_Given_an_author_author_author_user_searches_searches_by_author_are_books_existing_ExamplesTable_parameters_ExamplesTable_parameters_Given_an_author_Given_an_author_author_author_think_examples_think_examples_table_examples_table_examples_table_value_table_value_take_preference_more_sense_have_any_value_have_any_value_empty_string_)-[:Bug]->(scenario)
create (Example_Table)-[:Bug]->(ExamplesTable)
create (user_searches_by_author)-[:Bug]->(ExamplesTable)
create (take_preference)-[:Improvement]->(ExamplesTable)
create (leads_into_rjimgal)-[:Improvement]->(ExamplesTable)
create (take_preference_over_Meta_parameters)-[:Improvement]->(ExamplesTable)
create (Example_Table_Example_Table_parameters_Table_parameters_take_preference_following_scenario_list_books_list_books_by_author_books_by_author_Given_an_author_Given_an_author_author_author_user_searches_searches_by_author_are_books_existing_ExamplesTable_parameters_ExamplesTable_parameters_Given_an_author_Given_an_author_author_author_think_examples_think_examples_table_examples_table_examples_table_value_table_value_take_preference_more_sense_have_any_value_have_any_value_empty_string_)-[:Bug]->(ExamplesTable)
create (Gherkin_tags:issue {name:'Gherkin tags'}) create (Gherkin_tags)-[:Bug]->(narrative)
create (result_of_transformation:issue {name:'result of transformation'}) create (result_of_transformation)-[:Bug]->(narrative)
create (Background_something:issue {name:'Background something'}) create (Background_something)-[:Improvement]->(narrative)
create (has_value_As_result:issue {name:'has value As result'}) create (has_value_As_result)-[:Improvement]->(narrative)
create (Gherkin_tags_tagged_feature_tagged_feature_has_a_value_has_a_value_empty_string_:issue {name:'Gherkin tags - tagged feature - tagged feature - has a value - has a value - empty string - '}) create (Gherkin_tags_tagged_feature_tagged_feature_has_a_value_has_a_value_empty_string_)-[:Improvement]->(narrative)
create (Gherkin_tags)-[:Bug]->(narrative)
create (result_of_transformation)-[:Bug]->(narrative)
create (Background_something)-[:Improvement]->(narrative)
create (has_value_As_result)-[:Improvement]->(narrative)
create (Gherkin_tags_tagged_feature_tagged_feature_has_a_value_has_a_value_empty_string_)-[:Improvement]->(narrative)
create (Gherkin_tags)-[:Bug]->(scenario)
create (result_of_transformation)-[:Bug]->(scenario)
create (Background_something)-[:Improvement]->(scenario)
create (has_value_As_result)-[:Improvement]->(scenario)
create (Gherkin_tags_tagged_feature_tagged_feature_has_a_value_has_a_value_empty_string_)-[:Improvement]->(scenario)
create (Gherkin_tags)-[:Bug]->(scenario)
create (result_of_transformation)-[:Bug]->(scenario)
create (Background_something)-[:Improvement]->(scenario)
create (has_value_As_result)-[:Improvement]->(scenario)
create (Gherkin_tags_tagged_feature_tagged_feature_has_a_value_has_a_value_empty_string_)-[:Improvement]->(scenario)
create (Gherkin_tags)-[:Bug]->(Lifecycle)
create (result_of_transformation)-[:Bug]->(Lifecycle)
create (Background_something)-[:Improvement]->(Lifecycle)
create (has_value_As_result)-[:Improvement]->(Lifecycle)
create (Gherkin_tags_tagged_feature_tagged_feature_has_a_value_has_a_value_empty_string_)-[:Improvement]->(Lifecycle)
create (JBehave_TestNG:issue {name:'JBehave TestNG'}) create (JBehave_TestNG)-[:Bug]->(ant)
create (feature_in_JBehave:issue {name:'feature in JBehave'}) create (feature_in_JBehave)-[:Bug]->(ant)
create (using_single_jbehave_story_file:issue {name:'using single jbehave story file'}) create (using_single_jbehave_story_file)-[:Improvement]->(ant)
create (integrate_with_TestNG_grid:issue {name:'integrate with TestNG grid'}) create (integrate_with_TestNG_grid)-[:Improvement]->(ant)
create (have_separate_report_for_node:issue {name:'have separate report for node'}) create (have_separate_report_for_node)-[:Improvement]->(ant)
create (JBehave_TestNG)-[:Bug]->(show)
create (feature_in_JBehave)-[:Bug]->(show)
create (using_single_jbehave_story_file)-[:Improvement]->(show)
create (integrate_with_TestNG_grid)-[:Improvement]->(show)
create (have_separate_report_for_node)-[:Improvement]->(show)
create (Use_local_Nexus:issue {name:'Use local Nexus'}) create (Use_local_Nexus)-[:Bug]->(jenkins)
create (deploying_releases_releases_and_snapshots_:issue {name:'deploying releases - releases and snapshots - '}) create (deploying_releases_releases_and_snapshots_)-[:Bug]->(jenkins)
create (NormalPerformableScenario_parent:issue {name:'NormalPerformableScenario parent'}) create (NormalPerformableScenario_parent)-[:Bug]->(core)
create (running_given_stories:issue {name:'running given stories'}) create (running_given_stories)-[:Bug]->(core)
create (NormalPerformableScenario_parent)-[:Bug]->(configuration)
create (running_given_stories)-[:Bug]->(configuration)
create (NormalPerformableScenario_parent)-[:Bug]->(embedder)
create (running_given_stories)-[:Bug]->(embedder)
create (storyControls:class {name:'storyControls', favoritecolor: 'green'}) create (NormalPerformableScenario_parent)-[:Bug]->(storyControls)
create (running_given_stories)-[:Bug]->(storyControls)
create (NormalPerformableScenario_parent)-[:Bug]->(given)
create (running_given_stories)-[:Bug]->(given)
create (NormalPerformableScenario_parent)-[:Bug]->(givenStories)
create (running_given_stories)-[:Bug]->(givenStories)
create (NormalPerformableScenario_parent)-[:Bug]->(after)
create (running_given_stories)-[:Bug]->(after)
create (NormalPerformableScenario_parent)-[:Bug]->(givenStories)
create (running_given_stories)-[:Bug]->(givenStories)
create (NormalPerformableScenario_parent)-[:Bug]->(scenario)
create (running_given_stories)-[:Bug]->(scenario)
create (NormalPerformableScenario_parent)-[:Bug]->(scenario)
create (running_given_stories)-[:Bug]->(scenario)
create (NormalPerformableScenario_parent)-[:Bug]->(storyControls)
create (running_given_stories)-[:Bug]->(storyControls)
create (NormalPerformableScenario_parent)-[:Bug]->(Context)
create (running_given_stories)-[:Bug]->(Context)
create (NormalPerformableScenario_parent)-[:Bug]->(GivenStories)
create (running_given_stories)-[:Bug]->(GivenStories)
create (NormalPerformableScenario_parent)-[:Bug]->(GivenStory)
create (running_given_stories)-[:Bug]->(GivenStory)
create (GivenStories_step:issue {name:'GivenStories step'}) create (GivenStories_step)-[:Bug]->(show)
create (Running_JBehave_Story:issue {name:'Running JBehave Story'}) create (Running_JBehave_Story)-[:Bug]->(show)
create (Specify_in_project:issue {name:'Specify in project'}) create (Specify_in_project)-[:Improvement]->(show)
create (Running_JBehave_Story_with_GivenStories:issue {name:'Running JBehave Story with GivenStories'}) create (Running_JBehave_Story_with_GivenStories)-[:Improvement]->(show)
create (lists_all_stories_lists_all_stories_lists_all_stories_lists_all_stories_excluded_column_Given_Stories_expected_behaviour_trigger_the_bug_trigger_the_bug_:issue {name:'lists all stories - lists all stories - lists all stories - lists all stories - excluded column - Given Stories - expected behaviour - trigger the bug - trigger the bug - '}) create (lists_all_stories_lists_all_stories_lists_all_stories_lists_all_stories_excluded_column_Given_Stories_expected_behaviour_trigger_the_bug_trigger_the_bug_)-[:Improvement]->(show)
create (GivenStories_step)-[:Bug]->(GivenStories)
create (Running_JBehave_Story)-[:Bug]->(GivenStories)
create (Specify_in_project)-[:Improvement]->(GivenStories)
create (Running_JBehave_Story_with_GivenStories)-[:Improvement]->(GivenStories)
create (lists_all_stories_lists_all_stories_lists_all_stories_lists_all_stories_excluded_column_Given_Stories_expected_behaviour_trigger_the_bug_trigger_the_bug_)-[:Improvement]->(GivenStories)
create (override_method:issue {name:'override method'}) create (parameterConverters:class {name:'parameterConverters', favoritecolor: 'green'}) create (override_method)-[:Bug]->(parameterConverters)
create (implementing_own_Reporter:issue {name:'implementing own Reporter'}) create (implementing_own_Reporter)-[:Improvement]->(parameterConverters)
create (is_For_example)-[:Improvement]->(parameterConverters)
create (extends_set_time_property_in_order:issue {name:'extends set time property in order'}) create (extends_set_time_property_in_order)-[:Improvement]->(parameterConverters)
create (override_method)-[:Bug]->(rest)
create (implementing_own_Reporter)-[:Improvement]->(rest)
create (is_For_example)-[:Improvement]->(rest)
create (extends_set_time_property_in_order)-[:Improvement]->(rest)
create (stepsFactory:class {name:'stepsFactory', favoritecolor: 'green'}) create (override_method)-[:Bug]->(stepsFactory)
create (implementing_own_Reporter)-[:Improvement]->(stepsFactory)
create (is_For_example)-[:Improvement]->(stepsFactory)
create (extends_set_time_property_in_order)-[:Improvement]->(stepsFactory)
create (override_method)-[:Bug]->(configuration)
create (implementing_own_Reporter)-[:Improvement]->(configuration)
create (is_For_example)-[:Improvement]->(configuration)
create (extends_set_time_property_in_order)-[:Improvement]->(configuration)
create (override_method)-[:Bug]->(configuredEmbedder)
create (implementing_own_Reporter)-[:Improvement]->(configuredEmbedder)
create (is_For_example)-[:Improvement]->(configuredEmbedder)
create (extends_set_time_property_in_order)-[:Improvement]->(configuredEmbedder)
create (override_method)-[:Bug]->(stepsFactory)
create (implementing_own_Reporter)-[:Improvement]->(stepsFactory)
create (is_For_example)-[:Improvement]->(stepsFactory)
create (extends_set_time_property_in_order)-[:Improvement]->(stepsFactory)
create (override_method)-[:Bug]->(embedder)
create (implementing_own_Reporter)-[:Improvement]->(embedder)
create (is_For_example)-[:Improvement]->(embedder)
create (extends_set_time_property_in_order)-[:Improvement]->(embedder)
create (override_method)-[:Bug]->(parameterConverters)
create (implementing_own_Reporter)-[:Improvement]->(parameterConverters)
create (is_For_example)-[:Improvement]->(parameterConverters)
create (extends_set_time_property_in_order)-[:Improvement]->(parameterConverters)
create (override_method)-[:Bug]->(StoryReporterBuilder)
create (implementing_own_Reporter)-[:Improvement]->(StoryReporterBuilder)
create (is_For_example)-[:Improvement]->(StoryReporterBuilder)
create (extends_set_time_property_in_order)-[:Improvement]->(StoryReporterBuilder)
create (override_method)-[:Bug]->(parameterConverters)
create (implementing_own_Reporter)-[:Improvement]->(parameterConverters)
create (is_For_example)-[:Improvement]->(parameterConverters)
create (extends_set_time_property_in_order)-[:Improvement]->(parameterConverters)
create (override_method)-[:Bug]->(storyReporter)
create (implementing_own_Reporter)-[:Improvement]->(storyReporter)
create (is_For_example)-[:Improvement]->(storyReporter)
create (extends_set_time_property_in_order)-[:Improvement]->(storyReporter)
create (useParameterConverters:class {name:'useParameterConverters', favoritecolor: 'green'}) create (override_method)-[:Bug]->(useParameterConverters)
create (implementing_own_Reporter)-[:Improvement]->(useParameterConverters)
create (is_For_example)-[:Improvement]->(useParameterConverters)
create (extends_set_time_property_in_order)-[:Improvement]->(useParameterConverters)
create (override_method)-[:Bug]->(useStoryControls)
create (implementing_own_Reporter)-[:Improvement]->(useStoryControls)
create (is_For_example)-[:Improvement]->(useStoryControls)
create (extends_set_time_property_in_order)-[:Improvement]->(useStoryControls)
create (override_method)-[:Bug]->(useStoryLoader)
create (implementing_own_Reporter)-[:Improvement]->(useStoryLoader)
create (is_For_example)-[:Improvement]->(useStoryLoader)
create (extends_set_time_property_in_order)-[:Improvement]->(useStoryLoader)
create (override_method)-[:Bug]->(useStoryReporterBuilder)
create (implementing_own_Reporter)-[:Improvement]->(useStoryReporterBuilder)
create (is_For_example)-[:Improvement]->(useStoryReporterBuilder)
create (extends_set_time_property_in_order)-[:Improvement]->(useStoryReporterBuilder)
create (override_method)-[:Bug]->(after)
create (implementing_own_Reporter)-[:Improvement]->(after)
create (is_For_example)-[:Improvement]->(after)
create (extends_set_time_property_in_order)-[:Improvement]->(after)
create (override_method)-[:Bug]->(pending)
create (implementing_own_Reporter)-[:Improvement]->(pending)
create (is_For_example)-[:Improvement]->(pending)
create (extends_set_time_property_in_order)-[:Improvement]->(pending)
create (override_method)-[:Bug]->(scenario)
create (implementing_own_Reporter)-[:Improvement]->(scenario)
create (is_For_example)-[:Improvement]->(scenario)
create (extends_set_time_property_in_order)-[:Improvement]->(scenario)
create (override_method)-[:Bug]->(pending)
create (implementing_own_Reporter)-[:Improvement]->(pending)
create (is_For_example)-[:Improvement]->(pending)
create (extends_set_time_property_in_order)-[:Improvement]->(pending)
create (override_method)-[:Bug]->(scenario)
create (implementing_own_Reporter)-[:Improvement]->(scenario)
create (is_For_example)-[:Improvement]->(scenario)
create (extends_set_time_property_in_order)-[:Improvement]->(scenario)
create (override_method)-[:Bug]->(StoryReporterBuilder)
create (implementing_own_Reporter)-[:Improvement]->(StoryReporterBuilder)
create (is_For_example)-[:Improvement]->(StoryReporterBuilder)
create (extends_set_time_property_in_order)-[:Improvement]->(StoryReporterBuilder)
create (override_method)-[:Bug]->(StoryReporterBuilder)
create (implementing_own_Reporter)-[:Improvement]->(StoryReporterBuilder)
create (is_For_example)-[:Improvement]->(StoryReporterBuilder)
create (extends_set_time_property_in_order)-[:Improvement]->(StoryReporterBuilder)
create (override_method)-[:Bug]->(parameterConverters)
create (implementing_own_Reporter)-[:Improvement]->(parameterConverters)
create (is_For_example)-[:Improvement]->(parameterConverters)
create (extends_set_time_property_in_order)-[:Improvement]->(parameterConverters)
create (override_method)-[:Bug]->(storyReporter)
create (implementing_own_Reporter)-[:Improvement]->(storyReporter)
create (is_For_example)-[:Improvement]->(storyReporter)
create (extends_set_time_property_in_order)-[:Improvement]->(storyReporter)
create (override_method)-[:Bug]->(useParameterConverters)
create (implementing_own_Reporter)-[:Improvement]->(useParameterConverters)
create (is_For_example)-[:Improvement]->(useParameterConverters)
create (extends_set_time_property_in_order)-[:Improvement]->(useParameterConverters)
create (override_method)-[:Bug]->(useStoryControls)
create (implementing_own_Reporter)-[:Improvement]->(useStoryControls)
create (is_For_example)-[:Improvement]->(useStoryControls)
create (extends_set_time_property_in_order)-[:Improvement]->(useStoryControls)
create (override_method)-[:Bug]->(useStoryLoader)
create (implementing_own_Reporter)-[:Improvement]->(useStoryLoader)
create (is_For_example)-[:Improvement]->(useStoryLoader)
create (extends_set_time_property_in_order)-[:Improvement]->(useStoryLoader)
create (override_method)-[:Bug]->(useStoryReporterBuilder)
create (implementing_own_Reporter)-[:Improvement]->(useStoryReporterBuilder)
create (is_For_example)-[:Improvement]->(useStoryReporterBuilder)
create (extends_set_time_property_in_order)-[:Improvement]->(useStoryReporterBuilder)
create (override_method)-[:Bug]->(LoadFromClasspath)
create (implementing_own_Reporter)-[:Improvement]->(LoadFromClasspath)
create (is_For_example)-[:Improvement]->(LoadFromClasspath)
create (extends_set_time_property_in_order)-[:Improvement]->(LoadFromClasspath)
create (override_method)-[:Bug]->(JUnitStories)
create (implementing_own_Reporter)-[:Improvement]->(JUnitStories)
create (is_For_example)-[:Improvement]->(JUnitStories)
create (extends_set_time_property_in_order)-[:Improvement]->(JUnitStories)
create (UsingSteps_packages:issue {name:'UsingSteps packages'}) create (buildStepsFactory:class {name:'buildStepsFactory', favoritecolor: 'green'}) create (UsingSteps_packages)-[:Bug]->(buildStepsFactory)
create (overrides_instances:issue {name:'overrides instances'}) create (overrides_instances)-[:Improvement]->(buildStepsFactory)
create (lies_in_AnnotationBuilderbuildStepsFactory:issue {name:'lies in AnnotationBuilderbuildStepsFactory'}) create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(buildStepsFactory)
create (UsingSteps_packages)-[:Bug]->(parameterConverters)
create (overrides_instances)-[:Improvement]->(parameterConverters)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(parameterConverters)
create (UsingSteps_packages)-[:Bug]->(configuration)
create (overrides_instances)-[:Improvement]->(configuration)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(configuration)
create (UsingSteps_packages)-[:Bug]->(buildStepsFactory)
create (overrides_instances)-[:Improvement]->(buildStepsFactory)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(buildStepsFactory)
create (finder:class {name:'finder', favoritecolor: 'green'}) create (UsingSteps_packages)-[:Bug]->(finder)
create (overrides_instances)-[:Improvement]->(finder)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(finder)
create (UsingSteps_packages)-[:Bug]->(parameterConverters)
create (overrides_instances)-[:Improvement]->(parameterConverters)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(parameterConverters)
create (getAnnotatedClasses:class {name:'getAnnotatedClasses', favoritecolor: 'green'}) create (UsingSteps_packages)-[:Bug]->(getAnnotatedClasses)
create (overrides_instances)-[:Improvement]->(getAnnotatedClasses)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(getAnnotatedClasses)
create (getAnnotatedValue:class {name:'getAnnotatedValue', favoritecolor: 'green'}) create (UsingSteps_packages)-[:Bug]->(getAnnotatedValue)
create (overrides_instances)-[:Improvement]->(getAnnotatedValue)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(getAnnotatedValue)
create (getAnnotatedValues:class {name:'getAnnotatedValues', favoritecolor: 'green'}) create (UsingSteps_packages)-[:Bug]->(getAnnotatedValues)
create (overrides_instances)-[:Improvement]->(getAnnotatedValues)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(getAnnotatedValues)
create (UsingSteps_packages)-[:Bug]->(parameterConverters)
create (overrides_instances)-[:Improvement]->(parameterConverters)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(parameterConverters)
create (UsingSteps_packages)-[:Bug]->(after)
create (overrides_instances)-[:Improvement]->(after)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(after)
create (UsingSteps_packages)-[:Bug]->(parameterConverters)
create (overrides_instances)-[:Improvement]->(parameterConverters)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(parameterConverters)
create (AnnotatedPathRunner:class {name:'AnnotatedPathRunner', favoritecolor: 'green'}) create (UsingSteps_packages)-[:Bug]->(AnnotatedPathRunner)
create (overrides_instances)-[:Improvement]->(AnnotatedPathRunner)
create (lies_in_AnnotationBuilderbuildStepsFactory)-[:Improvement]->(AnnotatedPathRunner)
create (unpredictable_amount:issue {name:'unpredictable amount'}) create (unpredictable_amount)-[:Bug]->(finder)
create (unpredictable_amount_of_stories:issue {name:'unpredictable amount of stories'}) create (unpredictable_amount_of_stories)-[:Bug]->(finder)
create (include_property:issue {name:'include property'}) create (include_property)-[:Improvement]->(finder)
create (have_For_large_amount:issue {name:'have For large amount'}) create (have_For_large_amount)-[:Improvement]->(finder)
create (execute_different_amount_of_stories:issue {name:'execute different amount of stories'}) create (execute_different_amount_of_stories)-[:Improvement]->(finder)
create (unpredictable_amount_amount_of_stories_same_story_same_story_finder_story_finder_include_property_large_amount_amount_of_story_story_files_test_runner_execute_different_amount_different_amount_amount_of_stories_large_amount_amount_of_stories_other_unpredictable_amount_unpredictable_amount_amount_of_tests_Test_runner_original_and_fixed_executes_all_stories_executes_all_stories_story_finder_:issue {name:'unpredictable amount - amount of stories - same story - same story finder - story finder - include property - large amount - amount of story - story files - test runner - execute different amount - different amount - amount of stories - large amount - amount of stories - other unpredictable amount - unpredictable amount - amount of tests - Test runner - original and fixed - executes all stories - executes all stories - story finder - '}) create (unpredictable_amount_amount_of_stories_same_story_same_story_finder_story_finder_include_property_large_amount_amount_of_story_story_files_test_runner_execute_different_amount_different_amount_amount_of_stories_large_amount_amount_of_stories_other_unpredictable_amount_unpredictable_amount_amount_of_tests_Test_runner_original_and_fixed_executes_all_stories_executes_all_stories_story_finder_)-[:Bug]->(finder)
create (digit_characters:issue {name:'digit characters'}) create (digit_characters)-[:Bug]->(pending)
create (converter_as_BigDecimal:issue {name:'converter as BigDecimal'}) create (converter_as_BigDecimal)-[:Bug]->(pending)
create (ignore_digit_characters:issue {name:'ignore digit characters'}) create (ignore_digit_characters)-[:Improvement]->(pending)
create (lead_into_wrong_data:issue {name:'lead into wrong data'}) create (lead_into_wrong_data)-[:Improvement]->(pending)
create (ignore_digit_characters_for_BigDecimal_type:issue {name:'ignore digit characters for BigDecimal type'}) create (ignore_digit_characters_for_BigDecimal_type)-[:Improvement]->(pending)
create (digit_characters_allow_values_lead_into_wrong_data_wrong_data_user_noticing_digit_characters_characters_like_dot_ease_reading_big_numbers_converter_project_support_hex_support_hex_inputs_hex_inputs_:issue {name:'digit characters - allow values - lead into wrong data - wrong data - user noticing - digit characters - characters like dot - ease reading - big numbers - converter project - support hex - support hex inputs - hex inputs - '}) create (digit_characters_allow_values_lead_into_wrong_data_wrong_data_user_noticing_digit_characters_characters_like_dot_ease_reading_big_numbers_converter_project_support_hex_support_hex_inputs_hex_inputs_)-[:Bug]->(pending)
create (digit_characters)-[:Bug]->(pending)
create (converter_as_BigDecimal)-[:Bug]->(pending)
create (ignore_digit_characters)-[:Improvement]->(pending)
create (lead_into_wrong_data)-[:Improvement]->(pending)
create (ignore_digit_characters_for_BigDecimal_type)-[:Improvement]->(pending)
create (digit_characters_allow_values_lead_into_wrong_data_wrong_data_user_noticing_digit_characters_characters_like_dot_ease_reading_big_numbers_converter_project_support_hex_support_hex_inputs_hex_inputs_)-[:Bug]->(pending)
create (meta_filters:issue {name:'meta filters'}) create (meta_filters)-[:Bug]->(meta)
create (Meta_of_Examples:issue {name:'Meta of Examples'}) create (Meta_of_Examples)-[:Bug]->(meta)
create (contains_meta_table:issue {name:'contains meta table'}) create (contains_meta_table)-[:Improvement]->(meta)
create (inherit_scenario_example_table_meta_and_meta_meta_filters_meta_matches_:issue {name:'inherit scenario - example table - meta and meta - meta filters - meta matches - '}) create (inherit_scenario_example_table_meta_and_meta_meta_filters_meta_matches_)-[:Improvement]->(meta)
create (meta_filters)-[:Bug]->(meta)
create (Meta_of_Examples)-[:Bug]->(meta)
create (contains_meta_table)-[:Improvement]->(meta)
create (inherit_scenario_example_table_meta_and_meta_meta_filters_meta_matches_)-[:Improvement]->(meta)
create (meta_filters)-[:Bug]->(scenario)
create (Meta_of_Examples)-[:Bug]->(scenario)
create (contains_meta_table)-[:Improvement]->(scenario)
create (inherit_scenario_example_table_meta_and_meta_meta_filters_meta_matches_)-[:Improvement]->(scenario)
create (meta_filters)-[:Bug]->(scenario)
create (Meta_of_Examples)-[:Bug]->(scenario)
create (contains_meta_table)-[:Improvement]->(scenario)
create (inherit_scenario_example_table_meta_and_meta_meta_filters_meta_matches_)-[:Improvement]->(scenario)
create (Allow_parameter_conversion:issue {name:'Allow parameter conversion'}) create (Allow_parameter_conversion)-[:Bug]->(core)
create (Allow_parameter_conversion_in_example_table:issue {name:'Allow parameter conversion in example table'}) create (Allow_parameter_conversion_in_example_table)-[:Improvement]->(core)
create (Allow_parameter_Allow_parameter_conversion_parameter_conversion_conversion_in_example_example_table_restrict_ability_:issue {name:'Allow parameter - Allow parameter conversion - parameter conversion - conversion in example - example table - restrict ability - '}) create (Allow_parameter_Allow_parameter_conversion_parameter_conversion_conversion_in_example_example_table_restrict_ability_)-[:Improvement]->(core)
create (Allow_parameter_conversion)-[:Bug]->(ExamplesTable)
create (Allow_parameter_conversion_in_example_table)-[:Improvement]->(ExamplesTable)
create (Allow_parameter_Allow_parameter_conversion_parameter_conversion_conversion_in_example_example_table_restrict_ability_)-[:Improvement]->(ExamplesTable)
create (Parameter_value:issue {name:'Parameter value'}) create (Parameter_value)-[:Bug]->(scenario)
create (Parameter_value)-[:Bug]->(scenario)
create (Parameter_value)-[:Bug]->(Composite)
create (comments_from_BDD_stories:issue {name:'comments from BDD stories'}) create (comments_from_BDD_stories)-[:Bug]->(keywords)
create (ignored_steps_comments_All_comments_comments_All_comments_ignored_steps_localized_keywords_ignored_steps_:issue {name:'ignored steps - comments All comments - comments All comments - ignored steps - localized keywords - ignored steps - '}) create (ignored_steps_comments_All_comments_comments_All_comments_ignored_steps_localized_keywords_ignored_steps_)-[:Improvement]->(keywords)
create (comments_from_BDD_stories)-[:Bug]->(keywords)
create (ignored_steps_comments_All_comments_comments_All_comments_ignored_steps_localized_keywords_ignored_steps_)-[:Improvement]->(keywords)
create (bug_Editing:issue {name:'bug Editing'}) create (bug_Editing)-[:Bug]->(configuration)
create (catch_failure:issue {name:'catch failure'}) create (catch_failure)-[:Bug]->(configuration)
create (bug_Editing)-[:Bug]->(failed)
create (catch_failure)-[:Bug]->(failed)
create (codejava_GivenStories:issue {name:'codejava GivenStories'}) create (codejava_GivenStories)-[:Bug]->(given)
create (GivenStories_at_story_level:issue {name:'GivenStories at story level'}) create (GivenStories_at_story_level)-[:Bug]->(given)
create (reproduce_)-[:Improvement]->(given)
create (Create_stories_like_GivenStories_Scenario_Scenario:issue {name:'Create stories like GivenStories Scenario Scenario'}) create (Create_stories_like_GivenStories_Scenario_Scenario)-[:Improvement]->(given)
create (GivenStories_at_story_story_level_reproduce_Create_some_stories_Create_some_stories_using_multiple_threads_multiple_threads_Actual_result_methods_beforeStory_beforeStory_and_afterStory_random_order_multiple_threads_Expected_result_multiple_threads_:issue {name:'GivenStories at story - story level - reproduce - Create some stories - Create some stories - using multiple threads - multiple threads - Actual result - methods beforeStory - beforeStory and afterStory - random order - multiple threads - Expected result - multiple threads - '}) create (GivenStories_at_story_story_level_reproduce_Create_some_stories_Create_some_stories_using_multiple_threads_multiple_threads_Actual_result_methods_beforeStory_beforeStory_and_afterStory_random_order_multiple_threads_Expected_result_multiple_threads_)-[:Improvement]->(given)
create (codejava_GivenStories)-[:Bug]->(after)
create (GivenStories_at_story_level)-[:Bug]->(after)
create (reproduce_)-[:Improvement]->(after)
create (Create_stories_like_GivenStories_Scenario_Scenario)-[:Improvement]->(after)
create (GivenStories_at_story_story_level_reproduce_Create_some_stories_Create_some_stories_using_multiple_threads_multiple_threads_Actual_result_methods_beforeStory_beforeStory_and_afterStory_random_order_multiple_threads_Expected_result_multiple_threads_)-[:Improvement]->(after)
create (codejava_GivenStories)-[:Bug]->(GivenStories)
create (GivenStories_at_story_level)-[:Bug]->(GivenStories)
create (reproduce_)-[:Improvement]->(GivenStories)
create (Create_stories_like_GivenStories_Scenario_Scenario)-[:Improvement]->(GivenStories)
create (GivenStories_at_story_story_level_reproduce_Create_some_stories_Create_some_stories_using_multiple_threads_multiple_threads_Actual_result_methods_beforeStory_beforeStory_and_afterStory_random_order_multiple_threads_Expected_result_multiple_threads_)-[:Improvement]->(GivenStories)
create (Custom_StepMonitor:issue {name:'Custom StepMonitor'}) create (Custom_StepMonitor)-[:Bug]->(configuration)
create (quoteScenario_scenario_with_steps_DEBUG_Monitor:issue {name:'quote}Scenario scenario with steps DEBUG Monitor'}) create (quoteScenario_scenario_with_steps_DEBUG_Monitor)-[:Bug]->(configuration)
create (return_new_MostUsefulConfiguration:issue {name:'return new MostUsefulConfiguration'}) create (return_new_MostUsefulConfiguration)-[:Improvement]->(configuration)
create (work_in_version:issue {name:'work in version'}) create (work_in_version)-[:Improvement]->(configuration)
create (dryRun:class {name:'dryRun', favoritecolor: 'green'}) create (Custom_StepMonitor)-[:Bug]->(dryRun)
create (quoteScenario_scenario_with_steps_DEBUG_Monitor)-[:Bug]->(dryRun)
create (return_new_MostUsefulConfiguration)-[:Improvement]->(dryRun)
create (work_in_version)-[:Improvement]->(dryRun)
create (Custom_StepMonitor)-[:Bug]->(useStepMonitor)
create (quoteScenario_scenario_with_steps_DEBUG_Monitor)-[:Bug]->(useStepMonitor)
create (return_new_MostUsefulConfiguration)-[:Improvement]->(useStepMonitor)
create (work_in_version)-[:Improvement]->(useStepMonitor)
create (Broken_False_Positive_for_JBehave_team:issue {name:'Broken False Positive for JBehave team'}) create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(core)
create (using_maven_commands:issue {name:'using maven commands'}) create (using_maven_commands)-[:Improvement]->(core)
create (is_In_case:issue {name:'is In case'}) create (is_In_case)-[:Improvement]->(core)
create (Hi_JBehave)-[:Bug]->(ant)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(ant)
create (using_maven_commands)-[:Improvement]->(ant)
create (is_In_case)-[:Improvement]->(ant)
create (Hi_JBehave)-[:Bug]->(maven)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(maven)
create (using_maven_commands)-[:Improvement]->(maven)
create (is_In_case)-[:Improvement]->(maven)
create (usePendingStepStrategy:class {name:'usePendingStepStrategy', favoritecolor: 'green'}) create (Hi_JBehave)-[:Bug]->(usePendingStepStrategy)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(usePendingStepStrategy)
create (using_maven_commands)-[:Improvement]->(usePendingStepStrategy)
create (is_In_case)-[:Improvement]->(usePendingStepStrategy)
create (Hi_JBehave)-[:Bug]->(meta)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(meta)
create (using_maven_commands)-[:Improvement]->(meta)
create (is_In_case)-[:Improvement]->(meta)
create (Hi_JBehave)-[:Bug]->(meta)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(meta)
create (using_maven_commands)-[:Improvement]->(meta)
create (is_In_case)-[:Improvement]->(meta)
create (Hi_JBehave)-[:Bug]->(pending)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(pending)
create (using_maven_commands)-[:Improvement]->(pending)
create (is_In_case)-[:Improvement]->(pending)
create (Hi_JBehave)-[:Bug]->(pending)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(pending)
create (using_maven_commands)-[:Improvement]->(pending)
create (is_In_case)-[:Improvement]->(pending)
create (Hi_JBehave)-[:Bug]->(usePendingStepStrategy)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(usePendingStepStrategy)
create (using_maven_commands)-[:Improvement]->(usePendingStepStrategy)
create (is_In_case)-[:Improvement]->(usePendingStepStrategy)
create (Hi_JBehave)-[:Bug]->(PendingStepStrategy)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(PendingStepStrategy)
create (using_maven_commands)-[:Improvement]->(PendingStepStrategy)
create (is_In_case)-[:Improvement]->(PendingStepStrategy)
create (Hi_JBehave)-[:Bug]->(FailingUponPendingStep)
create (Broken_False_Positive_for_JBehave_team)-[:Bug]->(FailingUponPendingStep)
create (using_maven_commands)-[:Improvement]->(FailingUponPendingStep)
create (is_In_case)-[:Improvement]->(FailingUponPendingStep)
create (end_time:issue {name:'end time'}) create (end_time)-[:Bug]->(scenario)
create (end_times_of_stories:issue {name:'end times of stories'}) create (end_times_of_stories)-[:Bug]->(scenario)
create (end_time_step_in_cross_cross_reference_reference_In_cross_cross_reference_cross_reference_file_reference_file_see_the_start_see_the_start_end_times_end_times_of_stories_times_of_stories_scenarios_or_steps_cross_reference_tests_execution_:issue {name:'end time - step in cross - cross reference - reference In cross - cross reference - cross reference file - reference file - see the start - see the start - end times - end times of stories - times of stories - scenarios or steps - cross reference - tests execution - '}) create (end_time_step_in_cross_cross_reference_reference_In_cross_cross_reference_cross_reference_file_reference_file_see_the_start_see_the_start_end_times_end_times_of_stories_times_of_stories_scenarios_or_steps_cross_reference_tests_execution_)-[:Improvement]->(scenario)
create (end_time)-[:Bug]->(scenario)
create (end_times_of_stories)-[:Bug]->(scenario)
create (end_time_step_in_cross_cross_reference_reference_In_cross_cross_reference_cross_reference_file_reference_file_see_the_start_see_the_start_end_times_end_times_of_stories_times_of_stories_scenarios_or_steps_cross_reference_tests_execution_)-[:Improvement]->(scenario)
create (scenario_level:issue {name:'scenario level'}) create (scenario_level)-[:Bug]->(ant)
create (report_for_story:issue {name:'report for story'}) create (report_for_story)-[:Bug]->(ant)
create (using_level_GivenStories:issue {name:'using level GivenStories'}) create (using_level_GivenStories)-[:Improvement]->(ant)
create (leading_to_report:issue {name:'leading to report'}) create (leading_to_report)-[:Improvement]->(ant)
create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_:issue {name:'using scenario - using scenario level - scenario level - using scenario - using scenario level - scenario level - given stories - perform an action - perform an action - achieve a business - achieve a business - business goal - scenario description - Using a debugger - Using a debugger - placing a break - placing a break - break point - executing story - boolean parameter - boolean parameter givenStory - parameter givenStory - test project - reproduces the error - reproduces the error - jbehave output - jbehave output folder - output folder - '}) create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_)-[:Bug]->(ant)
create (scenario_level)-[:Bug]->(maven)
create (report_for_story)-[:Bug]->(maven)
create (using_level_GivenStories)-[:Improvement]->(maven)
create (leading_to_report)-[:Improvement]->(maven)
create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_)-[:Bug]->(maven)
create (scenario_level)-[:Bug]->(given)
create (report_for_story)-[:Bug]->(given)
create (using_level_GivenStories)-[:Improvement]->(given)
create (leading_to_report)-[:Improvement]->(given)
create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_)-[:Bug]->(given)
create (scenario_level)-[:Bug]->(after)
create (report_for_story)-[:Bug]->(after)
create (using_level_GivenStories)-[:Improvement]->(after)
create (leading_to_report)-[:Improvement]->(after)
create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_)-[:Bug]->(after)
create (scenario_level)-[:Bug]->(scenario)
create (report_for_story)-[:Bug]->(scenario)
create (using_level_GivenStories)-[:Improvement]->(scenario)
create (leading_to_report)-[:Improvement]->(scenario)
create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_)-[:Bug]->(scenario)
create (scenario_level)-[:Bug]->(scenario)
create (report_for_story)-[:Bug]->(scenario)
create (using_level_GivenStories)-[:Improvement]->(scenario)
create (leading_to_report)-[:Improvement]->(scenario)
create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_)-[:Bug]->(scenario)
create (scenario_level)-[:Bug]->(GivenStories)
create (report_for_story)-[:Bug]->(GivenStories)
create (using_level_GivenStories)-[:Improvement]->(GivenStories)
create (leading_to_report)-[:Improvement]->(GivenStories)
create (using_scenario_using_scenario_level_scenario_level_using_scenario_using_scenario_level_scenario_level_given_stories_perform_an_action_perform_an_action_achieve_a_business_achieve_a_business_business_goal_scenario_description_Using_a_debugger_Using_a_debugger_placing_a_break_placing_a_break_break_point_executing_story_boolean_parameter_boolean_parameter_givenStory_parameter_givenStory_test_project_reproduces_the_error_reproduces_the_error_jbehave_output_jbehave_output_folder_output_folder_)-[:Bug]->(GivenStories)
create (Scenario_Test:issue {name:'Scenario Test'}) create (Scenario_Test)-[:Bug]->(narrative)
create (generate_testcase_nodes:issue {name:'generate testcase nodes'}) create (generate_testcase_nodes)-[:Bug]->(narrative)
create (fails_For_story:issue {name:'fails For story'}) create (fails_For_story)-[:Improvement]->(narrative)
create (loses_results_of_test:issue {name:'loses results of test'}) create (loses_results_of_test)-[:Improvement]->(narrative)
create (generate_testcase_generate_testcase_nodes_testcase_nodes_Test_narrative_Given_report_using_data_using_data_source_data_source_data_source_dataSource_source_dataSource_dataSource_with_thread_thread_pool_thread_pool_size_pool_size_pool_size_threadPoolSize_size_threadPoolSize_item_count___XML_output_contain_any_testcase_contain_any_testcase_testcase_nodes_loses_the_results_loses_the_results_:issue {name:'generate testcase - generate testcase nodes - testcase nodes - Test narrative - Given report - using data - using data source - data source - data source dataSource - source dataSource - dataSource with thread - thread pool - thread pool size - pool size - pool size threadPoolSize - size threadPoolSize - item count - | | - XML output - contain any testcase - contain any testcase - testcase nodes - loses the results - loses the results - '}) create (generate_testcase_generate_testcase_nodes_testcase_nodes_Test_narrative_Given_report_using_data_using_data_source_data_source_data_source_dataSource_source_dataSource_dataSource_with_thread_thread_pool_thread_pool_size_pool_size_pool_size_threadPoolSize_size_threadPoolSize_item_count___XML_output_contain_any_testcase_contain_any_testcase_testcase_nodes_loses_the_results_loses_the_results_)-[:Improvement]->(narrative)
create (Scenario_Test)-[:Bug]->(narrative)
create (generate_testcase_nodes)-[:Bug]->(narrative)
create (fails_For_story)-[:Improvement]->(narrative)
create (loses_results_of_test)-[:Improvement]->(narrative)
create (generate_testcase_generate_testcase_nodes_testcase_nodes_Test_narrative_Given_report_using_data_using_data_source_data_source_data_source_dataSource_source_dataSource_dataSource_with_thread_thread_pool_thread_pool_size_pool_size_pool_size_threadPoolSize_size_threadPoolSize_item_count___XML_output_contain_any_testcase_contain_any_testcase_testcase_nodes_loses_the_results_loses_the_results_)-[:Improvement]->(narrative)
create (Scenario_Test)-[:Bug]->(scenario)
create (generate_testcase_nodes)-[:Bug]->(scenario)
create (fails_For_story)-[:Improvement]->(scenario)
create (loses_results_of_test)-[:Improvement]->(scenario)
create (generate_testcase_generate_testcase_nodes_testcase_nodes_Test_narrative_Given_report_using_data_using_data_source_data_source_data_source_dataSource_source_dataSource_dataSource_with_thread_thread_pool_thread_pool_size_pool_size_pool_size_threadPoolSize_size_threadPoolSize_item_count___XML_output_contain_any_testcase_contain_any_testcase_testcase_nodes_loses_the_results_loses_the_results_)-[:Improvement]->(scenario)
create (Scenario_Test)-[:Bug]->(scenario)
create (generate_testcase_nodes)-[:Bug]->(scenario)
create (fails_For_story)-[:Improvement]->(scenario)
create (loses_results_of_test)-[:Improvement]->(scenario)
create (generate_testcase_generate_testcase_nodes_testcase_nodes_Test_narrative_Given_report_using_data_using_data_source_data_source_data_source_dataSource_source_dataSource_dataSource_with_thread_thread_pool_thread_pool_size_pool_size_pool_size_threadPoolSize_size_threadPoolSize_item_count___XML_output_contain_any_testcase_contain_any_testcase_testcase_nodes_loses_the_results_loses_the_results_)-[:Improvement]->(scenario)
create (Examples_section:issue {name:'Examples section'}) create (Examples_section)-[:Bug]->(core)
create (make_amount_:issue {name:'make |amount| ||'}) create (make_amount_)-[:Bug]->(core)
create (working_with_parametrized_GivenStories:issue {name:'working with parametrized GivenStories'}) create (working_with_parametrized_GivenStories)-[:Improvement]->(core)
create (make_amount__in_transfers:issue {name:'make |amount| || in transfers'}) create (make_amount__in_transfers)-[:Improvement]->(core)
create (Following_code_Go_transfers_amount_amount_Go_transfers_amount_amount_Using_version_:issue {name:'Following code - Go transfers - amount amount - Go transfers - amount amount - Using version - '}) create (Following_code_Go_transfers_amount_amount_Go_transfers_amount_amount_Using_version_)-[:Improvement]->(core)
create (Examples_section)-[:Bug]->(GivenStories)
create (make_amount_)-[:Bug]->(GivenStories)
create (working_with_parametrized_GivenStories)-[:Improvement]->(GivenStories)
create (make_amount__in_transfers)-[:Improvement]->(GivenStories)
create (Following_code_Go_transfers_amount_amount_Go_transfers_amount_amount_Using_version_)-[:Improvement]->(GivenStories)
create (priority_project:issue {name:'priority project'}) create (priority_project)-[:Bug]->(ant)
create (adding_ExamplePerformableScenario:issue {name:'adding ExamplePerformableScenario'}) create (adding_ExamplePerformableScenario)-[:Bug]->(ant)
create (resulting_in_performance_degradation:issue {name:'resulting in performance degradation'}) create (resulting_in_performance_degradation)-[:Improvement]->(ant)
create (causes_significant_amount_of_calls:issue {name:'causes significant amount of calls'}) create (causes_significant_amount_of_calls)-[:Improvement]->(ant)
create (causes_a_significant_amount_significant_amount_amount_of_calls_performance_degradation_priority_project_:issue {name:'causes a significant amount - significant amount - amount of calls - performance degradation - priority project - '}) create (causes_a_significant_amount_significant_amount_amount_of_calls_performance_degradation_priority_project_)-[:Improvement]->(ant)
create (priority_project)-[:Bug]->(priority)
create (adding_ExamplePerformableScenario)-[:Bug]->(priority)
create (resulting_in_performance_degradation)-[:Improvement]->(priority)
create (causes_significant_amount_of_calls)-[:Improvement]->(priority)
create (causes_a_significant_amount_significant_amount_amount_of_calls_performance_degradation_priority_project_)-[:Improvement]->(priority)
create (priority_project)-[:Bug]->(priority)
create (adding_ExamplePerformableScenario)-[:Bug]->(priority)
create (resulting_in_performance_degradation)-[:Improvement]->(priority)
create (causes_significant_amount_of_calls)-[:Improvement]->(priority)
create (causes_a_significant_amount_significant_amount_amount_of_calls_performance_degradation_priority_project_)-[:Improvement]->(priority)
create (timing_for_test:issue {name:'timing for test'}) create (timing_for_test)-[:Bug]->(scenario)
create (Add_support)-[:Improvement]->(scenario)
create (Add_support_for_TeamCity:issue {name:'Add support for TeamCity'}) create (Add_support_for_TeamCity)-[:Improvement]->(scenario)
create (Add_support_build_script_build_script_interaction_script_interaction_Provide_support_build_script_build_script_interaction_script_interaction_scenarios_as_tests_providing_the_passfail_providing_the_passfail_passfail_status_:issue {name:'Add support - build script - build script interaction - script interaction - Provide support - build script - build script interaction - script interaction - scenarios as tests - providing the passfail - providing the passfail - passfail status - '}) create (Add_support_build_script_build_script_interaction_script_interaction_Provide_support_build_script_build_script_interaction_script_interaction_scenarios_as_tests_providing_the_passfail_providing_the_passfail_passfail_status_)-[:Improvement]->(scenario)
create (timing_for_test)-[:Bug]->(scenario)
create (Add_support)-[:Improvement]->(scenario)
create (Add_support_for_TeamCity)-[:Improvement]->(scenario)
create (Add_support_build_script_build_script_interaction_script_interaction_Provide_support_build_script_build_script_interaction_script_interaction_scenarios_as_tests_providing_the_passfail_providing_the_passfail_passfail_status_)-[:Improvement]->(scenario)
create (results_in_Closed_stream:issue {name:'results in Closed stream'}) create (results_in_Closed_stream)-[:Improvement]->(after)
create (results_in_Closed_stream)-[:Improvement]->(print)
create (results_in_Closed_stream)-[:Improvement]->(close)
create (Meta_data:issue {name:'Meta data'}) create (Meta_data)-[:Bug]->(org_jbehave_core)
create (StoryRunner_in_codejava_runCancellable_code_method:issue {name:'StoryRunner in codejava runCancellable code method'}) create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(org_jbehave_core)
create (declaring_meta_infos:issue {name:'declaring meta infos'}) create (declaring_meta_infos)-[:Improvement]->(org_jbehave_core)
create (appear_in_XML_report:issue {name:'appear in XML report'}) create (appear_in_XML_report)-[:Improvement]->(org_jbehave_core)
create (declaring_meta_infos_into_story:issue {name:'declaring meta infos into story'}) create (declaring_meta_infos_into_story)-[:Improvement]->(org_jbehave_core)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_:issue {name:'Meta data - scenario level - declaring meta - story level - story level_ - level_ - story level - meta informations - source code - see line - see line - is no more call - more call - See the joined sample - joined sample - reproduce the issue - reproduce the issue - more infos - '}) create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(org_jbehave_core)
create (Meta_data)-[:Bug]->(org_jbehave_core_embedder)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(org_jbehave_core_embedder)
create (declaring_meta_infos)-[:Improvement]->(org_jbehave_core_embedder)
create (appear_in_XML_report)-[:Improvement]->(org_jbehave_core_embedder)
create (declaring_meta_infos_into_story)-[:Improvement]->(org_jbehave_core_embedder)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(org_jbehave_core_embedder)
create (Meta_data)-[:Bug]->(core)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(core)
create (declaring_meta_infos)-[:Improvement]->(core)
create (appear_in_XML_report)-[:Improvement]->(core)
create (declaring_meta_infos_into_story)-[:Improvement]->(core)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(core)
create (Meta_data)-[:Bug]->(embedder)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(embedder)
create (declaring_meta_infos)-[:Improvement]->(embedder)
create (appear_in_XML_report)-[:Improvement]->(embedder)
create (declaring_meta_infos_into_story)-[:Improvement]->(embedder)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(embedder)
create (Meta_data)-[:Bug]->(meta)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(meta)
create (declaring_meta_infos)-[:Improvement]->(meta)
create (appear_in_XML_report)-[:Improvement]->(meta)
create (declaring_meta_infos_into_story)-[:Improvement]->(meta)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(meta)
create (Meta_data)-[:Bug]->(meta)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(meta)
create (declaring_meta_infos)-[:Improvement]->(meta)
create (appear_in_XML_report)-[:Improvement]->(meta)
create (declaring_meta_infos_into_story)-[:Improvement]->(meta)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(meta)
create (Meta_data)-[:Bug]->(scenario)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(scenario)
create (declaring_meta_infos)-[:Improvement]->(scenario)
create (appear_in_XML_report)-[:Improvement]->(scenario)
create (declaring_meta_infos_into_story)-[:Improvement]->(scenario)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(scenario)
create (Meta_data)-[:Bug]->(scenario)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(scenario)
create (declaring_meta_infos)-[:Improvement]->(scenario)
create (appear_in_XML_report)-[:Improvement]->(scenario)
create (declaring_meta_infos_into_story)-[:Improvement]->(scenario)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(scenario)
create (Meta_data)-[:Bug]->(Context)
create (StoryRunner_in_codejava_runCancellable_code_method)-[:Bug]->(Context)
create (declaring_meta_infos)-[:Improvement]->(Context)
create (appear_in_XML_report)-[:Improvement]->(Context)
create (declaring_meta_infos_into_story)-[:Improvement]->(Context)
create (Meta_data_scenario_level_declaring_meta_story_level_story_level__level__story_level_meta_informations_source_code_see_line_see_line_is_no_more_call_more_call_See_the_joined_sample_joined_sample_reproduce_the_issue_reproduce_the_issue_more_infos_)-[:Bug]->(Context)
create (Dynamic_data:issue {name:'Dynamic data'}) create (Dynamic_data)-[:Bug]->(scenario)
create (Dynamic_data_for_scenarios:issue {name:'Dynamic data for scenarios'}) create (Dynamic_data_for_scenarios)-[:Bug]->(scenario)
create (have_feature:issue {name:'have feature'}) create (have_feature)-[:Improvement]->(scenario)
create (parsing_stories_in_suite:issue {name:'parsing stories in suite'}) create (parsing_stories_in_suite)-[:Improvement]->(scenario)
create (Dynamic_data)-[:Bug]->(scenario)
create (Dynamic_data_for_scenarios)-[:Bug]->(scenario)
create (have_feature)-[:Improvement]->(scenario)
create (parsing_stories_in_suite)-[:Improvement]->(scenario)
create (Scenario_metadata)-[:Bug]->(meta)
create (contain_scenario_meta_information:issue {name:'contain scenario meta information'}) create (contain_scenario_meta_information)-[:Bug]->(meta)
create (contain_scenario_meta_information_As_consequence:issue {name:'contain scenario meta information As consequence'}) create (contain_scenario_meta_information_As_consequence)-[:Improvement]->(meta)
create (Scenario_metadata_story_reports_contain_scenario_meta_information_:issue {name:'Scenario metadata - story reports - contain scenario - meta information - '}) create (Scenario_metadata_story_reports_contain_scenario_meta_information_)-[:Improvement]->(meta)
create (Scenario_metadata)-[:Bug]->(after)
create (contain_scenario_meta_information)-[:Bug]->(after)
create (contain_scenario_meta_information_As_consequence)-[:Improvement]->(after)
create (Scenario_metadata_story_reports_contain_scenario_meta_information_)-[:Improvement]->(after)
create (Scenario_metadata)-[:Bug]->(meta)
create (contain_scenario_meta_information)-[:Bug]->(meta)
create (contain_scenario_meta_information_As_consequence)-[:Improvement]->(meta)
create (Scenario_metadata_story_reports_contain_scenario_meta_information_)-[:Improvement]->(meta)
create (Scenario_metadata)-[:Bug]->(scenario)
create (contain_scenario_meta_information)-[:Bug]->(scenario)
create (contain_scenario_meta_information_As_consequence)-[:Improvement]->(scenario)
create (Scenario_metadata_story_reports_contain_scenario_meta_information_)-[:Improvement]->(scenario)
create (Scenario_metadata)-[:Bug]->(scenario)
create (contain_scenario_meta_information)-[:Bug]->(scenario)
create (contain_scenario_meta_information_As_consequence)-[:Improvement]->(scenario)
create (Scenario_metadata_story_reports_contain_scenario_meta_information_)-[:Improvement]->(scenario)
create (Add_Flaky_status:issue {name:'Add Flaky status'}) create (Add_Flaky_status)-[:Bug]->(google)
create (test_results_:issue {name:'test results - '}) create (test_results_)-[:Bug]->(google)
create (Story_execution:issue {name:'Story execution'}) create (Story_execution)-[:Bug]->(given)
create (failure_in_GivenStory:issue {name:'failure in GivenStory'}) create (failure_in_GivenStory)-[:Bug]->(given)
create (executing_second_Given_story:issue {name:'executing second Given story'}) create (executing_second_Given_story)-[:Improvement]->(given)
create (continues_with_steps:issue {name:'continues with steps'}) create (continues_with_steps)-[:Improvement]->(given)
create (Story_execution_given_stories_is_a_failure_is_a_failure_Given_story_:issue {name:'Story execution - given stories - is a failure - is a failure - Given story - '}) create (Story_execution_given_stories_is_a_failure_is_a_failure_Given_story_)-[:Improvement]->(given)
create (Story_execution)-[:Bug]->(show)
create (failure_in_GivenStory)-[:Bug]->(show)
create (executing_second_Given_story)-[:Improvement]->(show)
create (continues_with_steps)-[:Improvement]->(show)
create (Story_execution_given_stories_is_a_failure_is_a_failure_Given_story_)-[:Improvement]->(show)
create (Story_execution)-[:Bug]->(GivenStory)
create (failure_in_GivenStory)-[:Bug]->(GivenStory)
create (executing_second_Given_story)-[:Improvement]->(GivenStory)
create (continues_with_steps)-[:Improvement]->(GivenStory)
create (Story_execution_given_stories_is_a_failure_is_a_failure_Given_story_)-[:Improvement]->(GivenStory)
create (BeforeStory_mechanism:issue {name:'BeforeStory mechanism'}) create (BeforeStory_mechanism)-[:Bug]->(lifecycle)
create (support_BeforeScenario_capability:issue {name:'support BeforeScenario capability'}) create (support_BeforeScenario_capability)-[:Bug]->(lifecycle)
create (have_capability_like_BeforeStory:issue {name:'have capability like BeforeStory'}) create (have_capability_like_BeforeStory)-[:Improvement]->(lifecycle)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_:issue {name:'BeforeStory mechanism - story lifecycle - BeforeStory mechanism - story lifecycle - have a capability - have a capability - story level - Steps classes - are multiple steps - multiple steps - multiple steps classes - steps classes - particular story - having a huge requirement - huge requirement - capability in story - story level - Given a step - Given a step - Given a step - Given a step - Given a step - Given a step - Given a step - Given a step - Given a step - Given a step - Given a step - Given a step - Outcome SUCCESS - '}) create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(lifecycle)
create (BeforeStory_mechanism)-[:Bug]->(outcome)
create (support_BeforeScenario_capability)-[:Bug]->(outcome)
create (have_capability_like_BeforeStory)-[:Improvement]->(outcome)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(outcome)
create (BeforeStory_mechanism)-[:Bug]->(after)
create (support_BeforeScenario_capability)-[:Bug]->(after)
create (have_capability_like_BeforeStory)-[:Improvement]->(after)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(after)
create (BeforeStory_mechanism)-[:Bug]->(lifecycle)
create (support_BeforeScenario_capability)-[:Bug]->(lifecycle)
create (have_capability_like_BeforeStory)-[:Improvement]->(lifecycle)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(lifecycle)
create (BeforeStory_mechanism)-[:Bug]->(outcome)
create (support_BeforeScenario_capability)-[:Bug]->(outcome)
create (have_capability_like_BeforeStory)-[:Improvement]->(outcome)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(outcome)
create (BeforeStory_mechanism)-[:Bug]->(scenario)
create (support_BeforeScenario_capability)-[:Bug]->(scenario)
create (have_capability_like_BeforeStory)-[:Improvement]->(scenario)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(scenario)
create (BeforeStory_mechanism)-[:Bug]->(scenario)
create (support_BeforeScenario_capability)-[:Bug]->(scenario)
create (have_capability_like_BeforeStory)-[:Improvement]->(scenario)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(scenario)
create (BeforeStory_mechanism)-[:Bug]->(show)
create (support_BeforeScenario_capability)-[:Bug]->(show)
create (have_capability_like_BeforeStory)-[:Improvement]->(show)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(show)
create (BeforeStory_mechanism)-[:Bug]->(Lifecycle)
create (support_BeforeScenario_capability)-[:Bug]->(Lifecycle)
create (have_capability_like_BeforeStory)-[:Improvement]->(Lifecycle)
create (BeforeStory_mechanism_story_lifecycle_BeforeStory_mechanism_story_lifecycle_have_a_capability_have_a_capability_story_level_Steps_classes_are_multiple_steps_multiple_steps_multiple_steps_classes_steps_classes_particular_story_having_a_huge_requirement_huge_requirement_capability_in_story_story_level_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Given_a_step_Outcome_SUCCESS_)-[:Improvement]->(Lifecycle)
create (multiple_JBehave:issue {name:'multiple JBehave'}) create (multiple_JBehave)-[:Bug]->(after)
create (threads_beforeStory_method:issue {name:'threads beforeStory method'}) create (threads_beforeStory_method)-[:Bug]->(after)
create (works_in_multithreaded_mode:issue {name:'works in multithreaded mode'}) create (works_in_multithreaded_mode)-[:Improvement]->(after)
create (threads_beforeStory_method_of_StoryReporter:issue {name:'threads beforeStory method of StoryReporter'}) create (threads_beforeStory_method_of_StoryReporter)-[:Improvement]->(after)
create (story_execution_threads_the_beforeStory_method_beforeStory_method_sample_project_threaded_mode_expose_information_executing_story_step_implementations_meaningful_logsscreenshot_file_logsscreenshot_file_logsscreenshot_file_names_file_names_other_way_access_the_Story_access_the_Story_Story_object_step_implementation_multithreaded_mode_:issue {name:'story execution - threads the beforeStory method - beforeStory method - sample project - threaded mode - expose information - executing story - step implementations - meaningful logsscreenshot file - logsscreenshot file - logsscreenshot file names - file names - other way - access the Story - access the Story - Story object - step implementation - multithreaded mode - '}) create (story_execution_threads_the_beforeStory_method_beforeStory_method_sample_project_threaded_mode_expose_information_executing_story_step_implementations_meaningful_logsscreenshot_file_logsscreenshot_file_logsscreenshot_file_names_file_names_other_way_access_the_Story_access_the_Story_Story_object_step_implementation_multithreaded_mode_)-[:Improvement]->(after)
create (step_error:issue {name:'step error'}) create (step_error)-[:Bug]->(org_jbehave_core)
create (running_stories:issue {name:'running stories'}) create (running_stories)-[:Improvement]->(org_jbehave_core)
create (has_issues:issue {name:'has issues'}) create (has_issues)-[:Bug]->(after)
create (clicks_on_reset_button:issue {name:'clicks on reset button'}) create (clicks_on_reset_button)-[:Improvement]->(after)
create (lose_track_of_current_scenario:issue {name:'lose track of current scenario'}) create (lose_track_of_current_scenario)-[:Improvement]->(after)
create (HTML_report:issue {name:'HTML report'}) create (HTML_report)-[:Bug]->(ant)
create (have_scenario_text_Scenario:issue {name:'have scenario text Scenario'}) create (have_scenario_text_Scenario)-[:Bug]->(ant)
create (appears_on_one_line:issue {name:'appears on one line'}) create (appears_on_one_line)-[:Improvement]->(ant)
create (scenario_title_have_a_scenario_have_a_scenario_scenario_text_Create_multiline_Create_multiline_description_multiline_description_multiple_line_:issue {name:'scenario title - have a scenario - have a scenario - scenario text - Create multiline - Create multiline description - multiline description - multiple line - '}) create (scenario_title_have_a_scenario_have_a_scenario_scenario_text_Create_multiline_Create_multiline_description_multiline_description_multiple_line_)-[:Improvement]->(ant)
create (HTML_report)-[:Bug]->(scenario)
create (have_scenario_text_Scenario)-[:Bug]->(scenario)
create (appears_on_one_line)-[:Improvement]->(scenario)
create (scenario_title_have_a_scenario_have_a_scenario_scenario_text_Create_multiline_Create_multiline_description_multiline_description_multiple_line_)-[:Improvement]->(scenario)
create (HTML_report)-[:Bug]->(scenario)
create (have_scenario_text_Scenario)-[:Bug]->(scenario)
create (appears_on_one_line)-[:Improvement]->(scenario)
create (scenario_title_have_a_scenario_have_a_scenario_scenario_text_Create_multiline_Create_multiline_description_multiline_description_multiple_line_)-[:Improvement]->(scenario)
create (HTML_report)-[:Bug]->(show)
create (have_scenario_text_Scenario)-[:Bug]->(show)
create (appears_on_one_line)-[:Improvement]->(show)
create (scenario_title_have_a_scenario_have_a_scenario_scenario_text_Create_multiline_Create_multiline_description_multiline_description_multiple_line_)-[:Improvement]->(show)
create (ParameterConverters_NumberFormatException:issue {name:'ParameterConverters NumberFormatException'}) create (ParameterConverters_NumberFormatException)-[:Bug]->(org_jbehave_core)
create (multiple_points_:issue {name:'multiple points - '}) create (multiple_points_)-[:Improvement]->(org_jbehave_core)
create (ParameterConverters_NumberFormatException)-[:Bug]->(org_jbehave_core_embedder)
create (multiple_points_)-[:Improvement]->(org_jbehave_core_embedder)
create (ParameterConverters_NumberFormatException)-[:Bug]->(org_jbehave_core_steps)
create (multiple_points_)-[:Improvement]->(org_jbehave_core_steps)
create (ParameterConverters_NumberFormatException)-[:Bug]->(core)
create (multiple_points_)-[:Improvement]->(core)
create (ParameterConverters_NumberFormatException)-[:Bug]->(embedder)
create (multiple_points_)-[:Improvement]->(embedder)
create (input_stream:issue {name:'input stream'}) create (input_stream)-[:Bug]->(core)
create (file_input_file_input_stream_input_stream_:issue {name:'file input - file input stream - input stream - '}) create (file_input_file_input_stream_input_stream_)-[:Bug]->(core)
create (input_stream)-[:Bug]->(after)
create (file_input_file_input_stream_input_stream_)-[:Bug]->(after)
create (code_location:issue {name:'code location'}) create (code_location)-[:Bug]->(spring)
create (contains_spaces:issue {name:'contains spaces'}) create (contains_spaces)-[:Bug]->(spring)
create (containing_spaces_in_name:issue {name:'containing spaces in name'}) create (containing_spaces_in_name)-[:Improvement]->(spring)
create (copy_depedencies:issue {name:'copy depedencies'}) create (copy_depedencies)-[:Bug]->(ant)
create (dependency_of_jbehave:issue {name:'dependency of jbehave'}) create (dependency_of_jbehave)-[:Bug]->(ant)
create (have_suggestions:issue {name:'have suggestions'}) create (have_suggestions)-[:Improvement]->(ant)
create (be_in_lib:issue {name:'be in lib'}) create (be_in_lib)-[:Improvement]->(ant)
create (have_suggestions_for_improvements:issue {name:'have suggestions for improvements'}) create (have_suggestions_for_improvements)-[:Improvement]->(ant)
create (depedencies_improvements_suggestions_for_improvements_ant_copy_dependencies_process_current_version_tasks_jar_dependency_of_jbehave_subdir_ant_binary_distribution_contain_any_binaries_contain_any_binaries_downloads_the_jbehave_downloads_the_jbehave_jbehave_jars_:issue {name:'depedencies improvements - suggestions for improvements - ant copy - dependencies process - current version - tasks jar - dependency of jbehave - subdir ant - binary distribution - contain any binaries - contain any binaries - downloads the jbehave - downloads the jbehave - jbehave jars - '}) create (depedencies_improvements_suggestions_for_improvements_ant_copy_dependencies_process_current_version_tasks_jar_dependency_of_jbehave_subdir_ant_binary_distribution_contain_any_binaries_contain_any_binaries_downloads_the_jbehave_downloads_the_jbehave_jbehave_jars_)-[:Bug]->(ant)
create (copy_depedencies)-[:Bug]->(maven)
create (dependency_of_jbehave)-[:Bug]->(maven)
create (have_suggestions)-[:Improvement]->(maven)
create (be_in_lib)-[:Improvement]->(maven)
create (have_suggestions_for_improvements)-[:Improvement]->(maven)
create (depedencies_improvements_suggestions_for_improvements_ant_copy_dependencies_process_current_version_tasks_jar_dependency_of_jbehave_subdir_ant_binary_distribution_contain_any_binaries_contain_any_binaries_downloads_the_jbehave_downloads_the_jbehave_jbehave_jars_)-[:Bug]->(maven)
create (distribution:class {name:'distribution', favoritecolor: 'green'}) create (copy_depedencies)-[:Bug]->(distribution)
create (dependency_of_jbehave)-[:Bug]->(distribution)
create (have_suggestions)-[:Improvement]->(distribution)
create (be_in_lib)-[:Improvement]->(distribution)
create (have_suggestions_for_improvements)-[:Improvement]->(distribution)
create (depedencies_improvements_suggestions_for_improvements_ant_copy_dependencies_process_current_version_tasks_jar_dependency_of_jbehave_subdir_ant_binary_distribution_contain_any_binaries_contain_any_binaries_downloads_the_jbehave_downloads_the_jbehave_jbehave_jars_)-[:Bug]->(distribution)
create (Scenario_title:issue {name:'Scenario title'}) create (Scenario_title)-[:Bug]->(scenario)
create (parse_scenario_title:issue {name:'parse scenario title'}) create (parse_scenario_title)-[:Bug]->(scenario)
create (works_on_other_platforms:issue {name:'works on other platforms'}) create (works_on_other_platforms)-[:Improvement]->(scenario)
create (Scenario_title_parse_the_scenario_parse_the_scenario_scenario_title_other_platforms_:issue {name:'Scenario title - parse the scenario - parse the scenario - scenario title - other platforms - '}) create (Scenario_title_parse_the_scenario_parse_the_scenario_scenario_title_other_platforms_)-[:Improvement]->(scenario)
create (Scenario_title)-[:Bug]->(scenario)
create (parse_scenario_title)-[:Bug]->(scenario)
create (works_on_other_platforms)-[:Improvement]->(scenario)
create (Scenario_title_parse_the_scenario_parse_the_scenario_scenario_title_other_platforms_)-[:Improvement]->(scenario)
create (jbehavexunit_display:issue {name:'jbehavexunit display'}) create (jbehavexunit_display)-[:Bug]->(show)
create (jbehavexunit_display_in_Jenkins:issue {name:'jbehavexunit display in Jenkins'}) create (jbehavexunit_display_in_Jenkins)-[:Bug]->(show)
create (run_story)-[:Improvement]->(show)
create (is_on_Home_page:issue {name:'is on Home page'}) create (is_on_Home_page)-[:Improvement]->(show)
create (has_comment_as_first_line:issue {name:'has comment as first line'}) create (has_comment_as_first_line)-[:Improvement]->(show)
create (package_name_run_a_story_run_a_story_has_a_comment_has_a_comment_first_line_jbehavexunit_display_takes_the_comment_takes_the_comment_comment_as_test_test_name_misses_the_story_misses_the_story_story_file_story_file_name_file_name_visits_home_visits_home_page_home_page_simple_test_Given_user_Home_page_resulting_path_commentUser_visits_commentUser_visits_home_visits_home_commentUser_visits_home_page_visits_home_page_home_page_:issue {name:'package name - run a story - run a story - has a comment - has a comment - first line - jbehavexunit display - takes the comment - takes the comment - comment as test - test name - misses the story - misses the story - story file - story file name - file name - visits home - visits home page - home page - simple test - Given user - Home page - resulting path - commentUser visits - commentUser visits home - visits home - commentUser visits home page - visits home page - home page - '}) create (package_name_run_a_story_run_a_story_has_a_comment_has_a_comment_first_line_jbehavexunit_display_takes_the_comment_takes_the_comment_comment_as_test_test_name_misses_the_story_misses_the_story_story_file_story_file_name_file_name_visits_home_visits_home_page_home_page_simple_test_Given_user_Home_page_resulting_path_commentUser_visits_commentUser_visits_home_visits_home_commentUser_visits_home_page_visits_home_page_home_page_)-[:Bug]->(show)
create (meta_filter:issue {name:'meta filter'}) create (meta_filter)-[:Bug]->(meta)
create (parsing_of_filter_condition:issue {name:'parsing of filter condition'}) create (parsing_of_filter_condition)-[:Bug]->(meta)
create (works_examples:issue {name:'works examples'}) create (works_examples)-[:Improvement]->(meta)
create (works_The_examples_works_The_examples_meta_filter_exclude_stories_filter_condition_:issue {name:'works The examples - works The examples - meta filter - exclude stories - filter condition - '}) create (works_The_examples_works_The_examples_meta_filter_exclude_stories_filter_condition_)-[:Improvement]->(meta)
create (meta_filter)-[:Bug]->(metaFilter)
create (parsing_of_filter_condition)-[:Bug]->(metaFilter)
create (works_examples)-[:Improvement]->(metaFilter)
create (works_The_examples_works_The_examples_meta_filter_exclude_stories_filter_condition_)-[:Improvement]->(metaFilter)
create (meta_filter)-[:Bug]->(meta)
create (parsing_of_filter_condition)-[:Bug]->(meta)
create (works_examples)-[:Improvement]->(meta)
create (works_The_examples_works_The_examples_meta_filter_exclude_stories_filter_condition_)-[:Improvement]->(meta)
create (meta_filter)-[:Bug]->(metaFilter)
create (parsing_of_filter_condition)-[:Bug]->(metaFilter)
create (works_examples)-[:Improvement]->(metaFilter)
create (works_The_examples_works_The_examples_meta_filter_exclude_stories_filter_condition_)-[:Improvement]->(metaFilter)
create (execution_monitoring:issue {name:'execution monitoring'}) create (execution_monitoring)-[:Bug]->(outcome)
create (manage_execution:issue {name:'manage execution'}) create (manage_execution)-[:Bug]->(outcome)
create (manage_execution_of_running_stories:issue {name:'manage execution of running stories'}) create (manage_execution_of_running_stories)-[:Improvement]->(outcome)
create (manage_execution_execution_and_outcomes_running_stories_concurrency_management_management_of_stories_concurrent_submission_running_stories_execution_monitoring_individual_stories_:issue {name:'manage execution - execution and outcomes - running stories - concurrency management - management of stories - concurrent submission - running stories - execution monitoring - individual stories - '}) create (manage_execution_execution_and_outcomes_running_stories_concurrency_management_management_of_stories_concurrent_submission_running_stories_execution_monitoring_individual_stories_)-[:Improvement]->(outcome)
create (execution_monitoring)-[:Bug]->(outcome)
create (manage_execution)-[:Bug]->(outcome)
create (manage_execution_of_running_stories)-[:Improvement]->(outcome)
create (manage_execution_execution_and_outcomes_running_stories_concurrency_management_management_of_stories_concurrent_submission_running_stories_execution_monitoring_individual_stories_)-[:Improvement]->(outcome)
create (Total_exclusion:issue {name:'Total exclusion'}) create (Total_exclusion)-[:Bug]->(groovy)
create (Browsing_around_site:issue {name:'Browsing around site'}) create (Browsing_around_site)-[:Bug]->(groovy)
create (remove_items_from_cart:issue {name:'remove items from cart'}) create (remove_items_from_cart)-[:Improvement]->(groovy)
create (Total_exclusion)-[:Bug]->(asA)
create (Browsing_around_site)-[:Bug]->(asA)
create (remove_items_from_cart)-[:Improvement]->(asA)
create (Total_exclusion)-[:Bug]->(examplesTable)
create (Browsing_around_site)-[:Bug]->(examplesTable)
create (remove_items_from_cart)-[:Improvement]->(examplesTable)
create (Total_exclusion)-[:Bug]->(given)
create (Browsing_around_site)-[:Bug]->(given)
create (remove_items_from_cart)-[:Improvement]->(given)
create (Total_exclusion)-[:Bug]->(givenStories)
create (Browsing_around_site)-[:Bug]->(givenStories)
create (remove_items_from_cart)-[:Improvement]->(givenStories)
create (Total_exclusion)-[:Bug]->(inOrderTo)
create (Browsing_around_site)-[:Bug]->(inOrderTo)
create (remove_items_from_cart)-[:Improvement]->(inOrderTo)
create (Total_exclusion)-[:Bug]->(iWantTo)
create (Browsing_around_site)-[:Bug]->(iWantTo)
create (remove_items_from_cart)-[:Improvement]->(iWantTo)
create (Total_exclusion)-[:Bug]->(meta)
create (Browsing_around_site)-[:Bug]->(meta)
create (remove_items_from_cart)-[:Improvement]->(meta)
create (Total_exclusion)-[:Bug]->(narrative)
create (Browsing_around_site)-[:Bug]->(narrative)
create (remove_items_from_cart)-[:Improvement]->(narrative)
create (Total_exclusion)-[:Bug]->(asA)
create (Browsing_around_site)-[:Bug]->(asA)
create (remove_items_from_cart)-[:Improvement]->(asA)
create (Total_exclusion)-[:Bug]->(examplesTable)
create (Browsing_around_site)-[:Bug]->(examplesTable)
create (remove_items_from_cart)-[:Improvement]->(examplesTable)
create (Total_exclusion)-[:Bug]->(givenStories)
create (Browsing_around_site)-[:Bug]->(givenStories)
create (remove_items_from_cart)-[:Improvement]->(givenStories)
create (Total_exclusion)-[:Bug]->(inOrderTo)
create (Browsing_around_site)-[:Bug]->(inOrderTo)
create (remove_items_from_cart)-[:Improvement]->(inOrderTo)
create (Total_exclusion)-[:Bug]->(iWantTo)
create (Browsing_around_site)-[:Bug]->(iWantTo)
create (remove_items_from_cart)-[:Improvement]->(iWantTo)
create (Total_exclusion)-[:Bug]->(meta)
create (Browsing_around_site)-[:Bug]->(meta)
create (remove_items_from_cart)-[:Improvement]->(meta)
create (Total_exclusion)-[:Bug]->(narrative)
create (Browsing_around_site)-[:Bug]->(narrative)
create (remove_items_from_cart)-[:Improvement]->(narrative)
create (Total_exclusion)-[:Bug]->(pending)
create (Browsing_around_site)-[:Bug]->(pending)
create (remove_items_from_cart)-[:Improvement]->(pending)
create (Total_exclusion)-[:Bug]->(pending)
create (Browsing_around_site)-[:Bug]->(pending)
create (remove_items_from_cart)-[:Improvement]->(pending)
create (Total_exclusion)-[:Bug]->(show)
create (Browsing_around_site)-[:Bug]->(show)
create (remove_items_from_cart)-[:Improvement]->(show)
create (left_buttons:issue {name:'left buttons'}) create (left_buttons)-[:Bug]->(composite)
create (resolve_to_Composite_steps:issue {name:'resolve to Composite steps'}) create (resolve_to_Composite_steps)-[:Improvement]->(composite)
create (left_buttons)-[:Bug]->(given)
create (resolve_to_Composite_steps)-[:Improvement]->(given)
create (left_buttons)-[:Bug]->(composite)
create (resolve_to_Composite_steps)-[:Improvement]->(composite)
create (left_buttons)-[:Bug]->(pending)
create (resolve_to_Composite_steps)-[:Improvement]->(pending)
create (left_buttons)-[:Bug]->(scenario)
create (resolve_to_Composite_steps)-[:Improvement]->(scenario)
create (left_buttons)-[:Bug]->(pending)
create (resolve_to_Composite_steps)-[:Improvement]->(pending)
create (left_buttons)-[:Bug]->(scenario)
create (resolve_to_Composite_steps)-[:Improvement]->(scenario)
create (left_buttons)-[:Bug]->(Composite)
create (resolve_to_Composite_steps)-[:Improvement]->(Composite)
create (unpack_view)-[:Bug]->(configuration)
create (Allow_configuration)-[:Bug]->(configuration)
create (be_In_cases:issue {name:'be In cases'}) create (be_In_cases)-[:Improvement]->(configuration)
create (Allow_configuration_of_view_directory:issue {name:'Allow configuration of view directory'}) create (Allow_configuration_of_view_directory)-[:Improvement]->(configuration)
create (Allow_configuration_Allow_configuration_of_view_configuration_of_view_view_directory_view_directory_story_reporter_story_reporter_builder_reporter_builder_set_the_view_set_the_view_view_directory_:issue {name:'Allow configuration - Allow configuration of view - configuration of view - view directory - view directory - story reporter - story reporter builder - reporter builder - set the view - set the view - view directory - '}) create (Allow_configuration_Allow_configuration_of_view_configuration_of_view_view_directory_view_directory_story_reporter_story_reporter_builder_reporter_builder_set_the_view_set_the_view_view_directory_)-[:Improvement]->(configuration)
create (WebDriver_JavascriptExecutor:issue {name:'WebDriver JavascriptExecutor'}) create (WebDriver_JavascriptExecutor)-[:Bug]->(scenario)
create (use_JavascriptExecutor_nature:issue {name:'use JavascriptExecutor nature'}) create (use_JavascriptExecutor_nature)-[:Bug]->(scenario)
create (send_current_scenario_current_scenario_current_scenario_context_scenario_context_:issue {name:'send current scenario - current scenario - current scenario context - scenario context - '}) create (send_current_scenario_current_scenario_current_scenario_context_scenario_context_)-[:Improvement]->(scenario)
create (WebDriver_JavascriptExecutor)-[:Bug]->(scenario)
create (use_JavascriptExecutor_nature)-[:Bug]->(scenario)
create (send_current_scenario_current_scenario_current_scenario_context_scenario_context_)-[:Improvement]->(scenario)
create (WebDriver_JavascriptExecutor)-[:Bug]->(Context)
create (use_JavascriptExecutor_nature)-[:Bug]->(Context)
create (send_current_scenario_current_scenario_current_scenario_context_scenario_context_)-[:Improvement]->(Context)
create (maven_repository:issue {name:'maven repository'}) create (maven_repository)-[:Bug]->(core)
create (core_from_codehaus:issue {name:'core from codehaus'}) create (core_from_codehaus)-[:Bug]->(core)
create (retrieve_JBehave_core:issue {name:'retrieve JBehave core'}) create (retrieve_JBehave_core)-[:Improvement]->(core)
create (retrieving_other_JBehave_related_artefacts_as_javaDoc:issue {name:'retrieving other JBehave related artefacts as javaDoc'}) create (retrieving_other_JBehave_related_artefacts_as_javaDoc)-[:Improvement]->(core)
create (repository_manager_matching_the_request_matching_the_request_related_artefacts_get_the_same_error_same_error_:issue {name:'repository manager - matching the request - matching the request - related artefacts - get the same error - same error - '}) create (repository_manager_matching_the_request_matching_the_request_related_artefacts_get_the_same_error_same_error_)-[:Improvement]->(core)
create (maven_repository)-[:Bug]->(maven)
create (core_from_codehaus)-[:Bug]->(maven)
create (retrieve_JBehave_core)-[:Improvement]->(maven)
create (retrieving_other_JBehave_related_artefacts_as_javaDoc)-[:Improvement]->(maven)
create (repository_manager_matching_the_request_matching_the_request_related_artefacts_get_the_same_error_same_error_)-[:Improvement]->(maven)
create (LoadFromJira__then:issue {name:'LoadFromJira -then'}) create (LoadFromJira__then)-[:Bug]->(google)
create (Something_like_LoadFromSecuredUrl:issue {name:'Something like LoadFromSecuredUrl'}) create (Something_like_LoadFromSecuredUrl)-[:Bug]->(google)
create (Integrate_JIRA:issue {name:'Integrate JIRA'}) create (Integrate_JIRA)-[:Improvement]->(google)
create (log_into_page:issue {name:'log into page'}) create (log_into_page)-[:Improvement]->(google)
create (integrate_story_files_from_JIRA:issue {name:'integrate story files from JIRA'}) create (integrate_story_files_from_JIRA)-[:Improvement]->(google)
create (organise_our_stories_integrate_the_story_integrate_the_story_story_files_write_the_acceptance_write_the_acceptance_acceptance_criteria__extend_the_LoadFromUrl__extend_the_LoadFromUrl_LoadFromUrl_class_add_the_functionality_add_the_functionality_write_a_parser_write_a_parser_extracts_the_fields_extracts_the_fields_plain_text_:issue {name:'organise our stories - integrate the story - integrate the story - story files - write the acceptance - write the acceptance - acceptance criteria - -extend the LoadFromUrl - -extend the LoadFromUrl - LoadFromUrl class - add the functionality - add the functionality - write a parser - write a parser - extracts the fields - extracts the fields - plain text - '}) create (organise_our_stories_integrate_the_story_integrate_the_story_story_files_write_the_acceptance_write_the_acceptance_acceptance_criteria__extend_the_LoadFromUrl__extend_the_LoadFromUrl_LoadFromUrl_class_add_the_functionality_add_the_functionality_write_a_parser_write_a_parser_extracts_the_fields_extracts_the_fields_plain_text_)-[:Bug]->(google)
create (Little_language:issue {name:'Little language'}) create (Little_language)-[:Bug]->(groovy)
create (support_meta_matching_logic:issue {name:'support meta matching logic'}) create (support_meta_matching_logic)-[:Bug]->(groovy)
create (allow_for_compatibility:issue {name:'allow for compatibility'}) create (allow_for_compatibility)-[:Improvement]->(groovy)
create (Little_language)-[:Bug]->(meta)
create (support_meta_matching_logic)-[:Bug]->(meta)
create (allow_for_compatibility)-[:Improvement]->(meta)
create (Little_language)-[:Bug]->(meta)
create (support_meta_matching_logic)-[:Bug]->(meta)
create (allow_for_compatibility)-[:Improvement]->(meta)
create (first_Given:issue {name:'first Given'}) create (first_Given)-[:Bug]->(scenario)
create (StackOverflowError_in_RegexStoryParser:issue {name:'StackOverflowError in RegexStoryParser'}) create (StackOverflowError_in_RegexStoryParser)-[:Bug]->(scenario)
create (use_JBehave:issue {name:'use JBehave'}) create (use_JBehave)-[:Improvement]->(scenario)
create (run_into_problem:issue {name:'run into problem'}) create (run_into_problem)-[:Improvement]->(scenario)
create (have_need_for_long_textual_descriptions:issue {name:'have need for long textual descriptions'}) create (have_need_for_long_textual_descriptions)-[:Improvement]->(scenario)
create (long_scenario_long_scenario_titles_scenario_titles_automate_our_systems_systems_testing_have_a_need_have_a_need_long_textual_descriptions_textual_descriptions_long_strings_known_bug_constructed_a_unit_constructed_a_unit_unit_test_reproduces_the_error_reproduces_the_error_found_a_simple_fix_simple_fix_performance_enhancement_:issue {name:'long scenario - long scenario titles - scenario titles - automate our systems - systems testing - have a need - have a need - long textual descriptions - textual descriptions - long strings - known bug - constructed a unit - constructed a unit - unit test - reproduces the error - reproduces the error - found a simple fix - simple fix - performance enhancement - '}) create (long_scenario_long_scenario_titles_scenario_titles_automate_our_systems_systems_testing_have_a_need_have_a_need_long_textual_descriptions_textual_descriptions_long_strings_known_bug_constructed_a_unit_constructed_a_unit_unit_test_reproduces_the_error_reproduces_the_error_found_a_simple_fix_simple_fix_performance_enhancement_)-[:Bug]->(scenario)
create (first_Given)-[:Bug]->(scenario)
create (StackOverflowError_in_RegexStoryParser)-[:Bug]->(scenario)
create (use_JBehave)-[:Improvement]->(scenario)
create (run_into_problem)-[:Improvement]->(scenario)
create (have_need_for_long_textual_descriptions)-[:Improvement]->(scenario)
create (long_scenario_long_scenario_titles_scenario_titles_automate_our_systems_systems_testing_have_a_need_have_a_need_long_textual_descriptions_textual_descriptions_long_strings_known_bug_constructed_a_unit_constructed_a_unit_unit_test_reproduces_the_error_reproduces_the_error_found_a_simple_fix_simple_fix_performance_enhancement_)-[:Bug]->(scenario)
create (throwing_ConcurrentModificationException:issue {name:'throwing ConcurrentModificationException'}) create (throwing_ConcurrentModificationException)-[:Bug]->(org_jbehave_core)
create (throwing_ConcurrentModificationException)-[:Bug]->(org_jbehave_core_embedder)
create (throwing_ConcurrentModificationException)-[:Bug]->(org_jbehave_core_steps)
create (throwing_ConcurrentModificationException)-[:Bug]->(core)
create (throwing_ConcurrentModificationException)-[:Bug]->(embedder)
create (Fix_typos:issue {name:'Fix typos'}) create (Fix_typos)-[:Bug]->(spring)
create (Fix_typos_in_archetypes:issue {name:'Fix typos in archetypes'}) create (Fix_typos_in_archetypes)-[:Bug]->(spring)
create (Hello_World:issue {name:'Hello World'}) create (Hello_World)-[:Bug]->(scenario)
create (rathen_than_Hello_World:issue {name:'rathen than Hello World'}) create (rathen_than_Hello_World)-[:Bug]->(scenario)
create (Ignore_full_stopperiodpunctation:issue {name:'Ignore full stopperiod|punctation'}) create (Ignore_full_stopperiodpunctation)-[:Improvement]->(scenario)
create (ending_with_punctation_characters:issue {name:'ending with punctation characters'}) create (ending_with_punctation_characters)-[:Improvement]->(scenario)
create (Ignore_full_stopperiodpunctation_at_end:issue {name:'Ignore full stopperiod|punctation at end'}) create (Ignore_full_stopperiodpunctation_at_end)-[:Improvement]->(scenario)
create (stopperiodpunctation_at_end_end_of_step_experienced_some_trouble_experienced_some_trouble_punctation_characters_see_the_message_see_the_message_require_a_step_require_a_step_step_definition_see_the_message_see_the_message_forget_the_period_forget_the_period_step_definition_common_mistake_prevents_the_step_prevents_the_step_step_definition_see_the_message_see_the_message_ignore_this_period_ignore_this_period_handle_scenarios_existing_tests_:issue {name:'stopperiod|punctation at end - end of step - experienced some trouble - experienced some trouble - punctation characters - see the message - see the message - require a step - require a step - step definition - see the message - see the message - forget the period - forget the period - step definition - common mistake - prevents the step - prevents the step - step definition - see the message - see the message - ignore this period - ignore this period - handle scenarios - existing tests - '}) create (stopperiodpunctation_at_end_end_of_step_experienced_some_trouble_experienced_some_trouble_punctation_characters_see_the_message_see_the_message_require_a_step_require_a_step_step_definition_see_the_message_see_the_message_forget_the_period_forget_the_period_step_definition_common_mistake_prevents_the_step_prevents_the_step_step_definition_see_the_message_see_the_message_ignore_this_period_ignore_this_period_handle_scenarios_existing_tests_)-[:Bug]->(scenario)
create (Hello_World)-[:Bug]->(scenario)
create (rathen_than_Hello_World)-[:Bug]->(scenario)
create (Ignore_full_stopperiodpunctation)-[:Improvement]->(scenario)
create (ending_with_punctation_characters)-[:Improvement]->(scenario)
create (Ignore_full_stopperiodpunctation_at_end)-[:Improvement]->(scenario)
create (stopperiodpunctation_at_end_end_of_step_experienced_some_trouble_experienced_some_trouble_punctation_characters_see_the_message_see_the_message_require_a_step_require_a_step_step_definition_see_the_message_see_the_message_forget_the_period_forget_the_period_step_definition_common_mistake_prevents_the_step_prevents_the_step_step_definition_see_the_message_see_the_message_ignore_this_period_ignore_this_period_handle_scenarios_existing_tests_)-[:Bug]->(scenario)
create (content_data:issue {name:'content data'}) create (content_data)-[:Bug]->(ant)
create (Allow_mutability:issue {name:'Allow mutability'}) create (Allow_mutability)-[:Bug]->(ant)
create (start_from_data_list:issue {name:'start from data list'}) create (start_from_data_list)-[:Improvement]->(ant)
create (Allow_mutability_of_ExamplesTable:issue {name:'Allow mutability of ExamplesTable'}) create (Allow_mutability_of_ExamplesTable)-[:Improvement]->(ant)
create (Allow_mutability_allow_additions_allow_additions_of_columns_additions_of_columns_given_row_express_a_result_express_a_result_result_value_given_row__affected_rows_affected_rows_given_default_blank_values_new_column_content_data_content_data_list_data_list_list_of_maps_create_a_new_table_new_table_modified_content_other_words_string_transformations_implementing_a_step_implementing_a_step_tabular_parameters_:issue {name:'Allow mutability - allow additions - allow additions of columns - additions of columns - given row - express a result - express a result - result value - given row - -affected rows - affected rows - given default - blank values - new column - content data - content data list - data list - list of maps - create a new table - new table - modified content - other words - string transformations - implementing a step - implementing a step - tabular parameters - '}) create (Allow_mutability_allow_additions_allow_additions_of_columns_additions_of_columns_given_row_express_a_result_express_a_result_result_value_given_row__affected_rows_affected_rows_given_default_blank_values_new_column_content_data_content_data_list_data_list_list_of_maps_create_a_new_table_new_table_modified_content_other_words_string_transformations_implementing_a_step_implementing_a_step_tabular_parameters_)-[:Improvement]->(ant)
create (content_data)-[:Bug]->(given)
create (Allow_mutability)-[:Bug]->(given)
create (start_from_data_list)-[:Improvement]->(given)
create (Allow_mutability_of_ExamplesTable)-[:Improvement]->(given)
create (Allow_mutability_allow_additions_allow_additions_of_columns_additions_of_columns_given_row_express_a_result_express_a_result_result_value_given_row__affected_rows_affected_rows_given_default_blank_values_new_column_content_data_content_data_list_data_list_list_of_maps_create_a_new_table_new_table_modified_content_other_words_string_transformations_implementing_a_step_implementing_a_step_tabular_parameters_)-[:Improvement]->(given)
create (content_data)-[:Bug]->(ExamplesTable)
create (Allow_mutability)-[:Bug]->(ExamplesTable)
create (start_from_data_list)-[:Improvement]->(ExamplesTable)
create (Allow_mutability_of_ExamplesTable)-[:Improvement]->(ExamplesTable)
create (Allow_mutability_allow_additions_allow_additions_of_columns_additions_of_columns_given_row_express_a_result_express_a_result_result_value_given_row__affected_rows_affected_rows_given_default_blank_values_new_column_content_data_content_data_list_data_list_list_of_maps_create_a_new_table_new_table_modified_content_other_words_string_transformations_implementing_a_step_implementing_a_step_tabular_parameters_)-[:Improvement]->(ExamplesTable)
create (FailingUponPendingStep_strategy:issue {name:'FailingUponPendingStep strategy'}) create (FailingUponPendingStep_strategy)-[:Bug]->(FailingUponPendingStep)
create (cause_build_failure:issue {name:'cause build failure'}) create (cause_build_failure)-[:Bug]->(FailingUponPendingStep)
create (cause_build_failure_in_view_generation:issue {name:'cause build failure in view generation'}) create (cause_build_failure_in_view_generation)-[:Improvement]->(FailingUponPendingStep)
create (Pending_step_Pending_step_failures_step_failures_view_generation_Pending_steps_cause_a_build_cause_a_build_build_failure_view_generation_FailingUponPendingStep_strategy_:issue {name:'Pending step - Pending step failures - step failures - view generation - Pending steps - cause a build - cause a build - build failure - view generation - FailingUponPendingStep strategy - '}) create (Pending_step_Pending_step_failures_step_failures_view_generation_Pending_steps_cause_a_build_cause_a_build_build_failure_view_generation_FailingUponPendingStep_strategy_)-[:Improvement]->(FailingUponPendingStep)
create (security_issue:issue {name:'security issue'}) create (security_issue)-[:Bug]->(Context)
create (constructing_html_string:issue {name:'constructing html string'}) create (constructing_html_string)-[:Bug]->(Context)
create (constructing_html_string_for_current_step:issue {name:'constructing html string for current step'}) create (constructing_html_string_for_current_step)-[:Improvement]->(Context)
create (security_issue_constructing_a_html_constructing_a_html_html_string_current_step_concatenating_the_strings_concatenating_the_strings_tags_or_javascript_tags_or_javascript_fragments_javascript_fragments_cause_any_real_issues_real_issues_makes_the_current_step_current_step_current_step_fail_step_fail_injection_error_web_application_writing_an_example_writing_an_example_example_xss_example_xss_story_xss_story_offending_steps_submit_a_patch_submit_a_patch_:issue {name:'security issue - constructing a html - constructing a html - html string - current step - concatenating the strings - concatenating the strings - tags or javascript - tags or javascript fragments - javascript fragments - cause any real issues - real issues - makes the current step - current step - current step fail - step fail - injection error - web application - writing an example - writing an example - example xss - example xss story - xss story - offending steps - submit a patch - submit a patch - '}) create (security_issue_constructing_a_html_constructing_a_html_html_string_current_step_concatenating_the_strings_concatenating_the_strings_tags_or_javascript_tags_or_javascript_fragments_javascript_fragments_cause_any_real_issues_real_issues_makes_the_current_step_current_step_current_step_fail_step_fail_injection_error_web_application_writing_an_example_writing_an_example_example_xss_example_xss_story_xss_story_offending_steps_submit_a_patch_submit_a_patch_)-[:Improvement]->(Context)
create (Expose_story:issue {name:'Expose story'}) create (Expose_story)-[:Bug]->(meta)
create (Expose_story_as_Meta:issue {name:'Expose story as Meta'}) create (Expose_story_as_Meta)-[:Bug]->(meta)
create (expose_story:issue {name:'expose story'}) create (expose_story)-[:Improvement]->(meta)
create (avoid_conflicts_with_defined_meta_properties:issue {name:'avoid conflicts with defined meta properties'}) create (avoid_conflicts_with_defined_meta_properties)-[:Improvement]->(meta)
create (Expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_back_of_JBEHAVE__expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_level_ones_excluding_the_user_excluding_the_user_defined_meta_properties_meta_properties_filtering_or_matching_decorator_method_model_classes_provide_a_namespace_provide_a_namespace_avoid_conflicts_avoid_conflicts_with_user_conflicts_with_user_defined_meta_properties_meta_properties_empty_string_:issue {name:'Expose story - story and scenario - story and scenario elements - scenario elements - back of JBEHAVE- - expose story - story and scenario - story and scenario elements - scenario elements - level ones - excluding the user - excluding the user - defined meta properties - meta properties - filtering or matching - decorator method - model classes - provide a namespace - provide a namespace - avoid conflicts - avoid conflicts with user - conflicts with user - defined meta properties - meta properties - empty string - '}) create (Expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_back_of_JBEHAVE__expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_level_ones_excluding_the_user_excluding_the_user_defined_meta_properties_meta_properties_filtering_or_matching_decorator_method_model_classes_provide_a_namespace_provide_a_namespace_avoid_conflicts_avoid_conflicts_with_user_conflicts_with_user_defined_meta_properties_meta_properties_empty_string_)-[:Improvement]->(meta)
create (Expose_story)-[:Bug]->(meta)
create (Expose_story_as_Meta)-[:Bug]->(meta)
create (expose_story)-[:Improvement]->(meta)
create (avoid_conflicts_with_defined_meta_properties)-[:Improvement]->(meta)
create (Expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_back_of_JBEHAVE__expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_level_ones_excluding_the_user_excluding_the_user_defined_meta_properties_meta_properties_filtering_or_matching_decorator_method_model_classes_provide_a_namespace_provide_a_namespace_avoid_conflicts_avoid_conflicts_with_user_conflicts_with_user_defined_meta_properties_meta_properties_empty_string_)-[:Improvement]->(meta)
create (Expose_story)-[:Bug]->(scenario)
create (Expose_story_as_Meta)-[:Bug]->(scenario)
create (expose_story)-[:Improvement]->(scenario)
create (avoid_conflicts_with_defined_meta_properties)-[:Improvement]->(scenario)
create (Expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_back_of_JBEHAVE__expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_level_ones_excluding_the_user_excluding_the_user_defined_meta_properties_meta_properties_filtering_or_matching_decorator_method_model_classes_provide_a_namespace_provide_a_namespace_avoid_conflicts_avoid_conflicts_with_user_conflicts_with_user_defined_meta_properties_meta_properties_empty_string_)-[:Improvement]->(scenario)
create (Expose_story)-[:Bug]->(scenario)
create (Expose_story_as_Meta)-[:Bug]->(scenario)
create (expose_story)-[:Improvement]->(scenario)
create (avoid_conflicts_with_defined_meta_properties)-[:Improvement]->(scenario)
create (Expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_back_of_JBEHAVE__expose_story_story_and_scenario_story_and_scenario_elements_scenario_elements_level_ones_excluding_the_user_excluding_the_user_defined_meta_properties_meta_properties_filtering_or_matching_decorator_method_model_classes_provide_a_namespace_provide_a_namespace_avoid_conflicts_avoid_conflicts_with_user_conflicts_with_user_defined_meta_properties_meta_properties_empty_string_)-[:Improvement]->(scenario)
create (story_cancellations:issue {name:'story cancellations'}) create (story_cancellations)-[:Bug]->(keywords)
create (Introduce_new_keywords:issue {name:'Introduce new keywords'}) create (Introduce_new_keywords)-[:Bug]->(keywords)
create (Add_in_keywords:issue {name:'Add in keywords'}) create (Add_in_keywords)-[:Improvement]->(keywords)
create (keywords_for_story_story_cancellation_cancellation_and_duration_story_cancellations_Introduce_new_keywords_new_keywords_describe_story_describe_story_cancellation_story_cancellation_cancellation_and_duration_:issue {name:'keywords for story - story cancellation - cancellation and duration - story cancellations - Introduce new keywords - new keywords - describe story - describe story cancellation - story cancellation - cancellation and duration - '}) create (keywords_for_story_story_cancellation_cancellation_and_duration_story_cancellations_Introduce_new_keywords_new_keywords_describe_story_describe_story_cancellation_story_cancellation_cancellation_and_duration_)-[:Improvement]->(keywords)
create (story_cancellations)-[:Bug]->(duration)
create (Introduce_new_keywords)-[:Bug]->(duration)
create (Add_in_keywords)-[:Improvement]->(duration)
create (keywords_for_story_story_cancellation_cancellation_and_duration_story_cancellations_Introduce_new_keywords_new_keywords_describe_story_describe_story_cancellation_story_cancellation_cancellation_and_duration_)-[:Improvement]->(duration)
create (story_cancellations)-[:Bug]->(keywords)
create (Introduce_new_keywords)-[:Bug]->(keywords)
create (Add_in_keywords)-[:Improvement]->(keywords)
create (keywords_for_story_story_cancellation_cancellation_and_duration_story_cancellations_Introduce_new_keywords_new_keywords_describe_story_describe_story_cancellation_story_cancellation_cancellation_and_duration_)-[:Improvement]->(keywords)
create (Support_AtomicInteger:issue {name:'Support AtomicInteger'}) create (Support_AtomicInteger)-[:Bug]->(scenario)
create (Support_AtomicInteger_variables_for_multi_threading_scenarios:issue {name:'Support AtomicInteger variables for multi - threading scenarios'}) create (Support_AtomicInteger_variables_for_multi_threading_scenarios)-[:Bug]->(scenario)
create (Atomic_variables__threading_scenarios_threading_scenarios_:issue {name:'Atomic variables - -threading scenarios - threading scenarios - '}) create (Atomic_variables__threading_scenarios_threading_scenarios_)-[:Improvement]->(scenario)
create (Support_AtomicInteger)-[:Bug]->(scenario)
create (Support_AtomicInteger_variables_for_multi_threading_scenarios)-[:Bug]->(scenario)
create (Atomic_variables__threading_scenarios_threading_scenarios_)-[:Improvement]->(scenario)
create (aid_debugging:issue {name:'aid debugging'}) create (aid_debugging)-[:Bug]->(failed)
create (aid_debugging_of_scripts:issue {name:'aid debugging of scripts'}) create (aid_debugging_of_scripts)-[:Bug]->(failed)
create (aid_debugging_aid_debugging_of_scripts_debugging_of_scripts_:issue {name:'aid debugging - aid debugging of scripts - debugging of scripts - '}) create (aid_debugging_aid_debugging_of_scripts_debugging_of_scripts_)-[:Improvement]->(failed)
create (aid_debugging)-[:Bug]->(after)
create (aid_debugging_of_scripts)-[:Bug]->(after)
create (aid_debugging_aid_debugging_of_scripts_debugging_of_scripts_)-[:Improvement]->(after)
create (aid_debugging)-[:Bug]->(scenario)
create (aid_debugging_of_scripts)-[:Bug]->(scenario)
create (aid_debugging_aid_debugging_of_scripts_debugging_of_scripts_)-[:Improvement]->(scenario)
create (aid_debugging)-[:Bug]->(scenario)
create (aid_debugging_of_scripts)-[:Bug]->(scenario)
create (aid_debugging_aid_debugging_of_scripts_debugging_of_scripts_)-[:Improvement]->(scenario)
create (named_parameters)-[:Bug]->(scenario)
create (values_Named_parameters:issue {name:'values Named parameters'}) create (values_Named_parameters)-[:Bug]->(scenario)
create (coming_from_examples_table:issue {name:'coming from examples table'}) create (coming_from_examples_table)-[:Improvement]->(scenario)
create (named_parameters)-[:Bug]->(scenario)
create (values_Named_parameters)-[:Bug]->(scenario)
create (coming_from_examples_table)-[:Improvement]->(scenario)
create (multiple_times:issue {name:'multiple times'}) create (multiple_times)-[:Bug]->(scenario)
create (use_same_step:issue {name:'use same step'}) create (use_same_step)-[:Bug]->(scenario)
create (use_same_step_in_scenario:issue {name:'use same step in scenario'}) create (use_same_step_in_scenario)-[:Improvement]->(scenario)
create (multiple_times)-[:Bug]->(scenario)
create (use_same_step)-[:Bug]->(scenario)
create (use_same_step_in_scenario)-[:Improvement]->(scenario)
create (dependencies_task:issue {name:'dependencies task'}) create (dependencies_task)-[:Bug]->(ant)
create (dependencies_task_for_bin_distribution:issue {name:'dependencies task for bin distribution'}) create (dependencies_task_for_bin_distribution)-[:Bug]->(ant)
create (run_dependencies_tasks:issue {name:'run dependencies tasks'}) create (run_dependencies_tasks)-[:Improvement]->(ant)
create (work_in_Windows:issue {name:'work in Windows'}) create (work_in_Windows)-[:Improvement]->(ant)
create (Copying_file_to_lib_directory:issue {name:'Copying file to lib directory'}) create (Copying_file_to_lib_directory)-[:Improvement]->(ant)
create (dependencies_task)-[:Bug]->(distribution)
create (dependencies_task_for_bin_distribution)-[:Bug]->(distribution)
create (run_dependencies_tasks)-[:Improvement]->(distribution)
create (work_in_Windows)-[:Improvement]->(distribution)
create (Copying_file_to_lib_directory)-[:Improvement]->(distribution)
create (first_curly_bracket:issue {name:'first curly bracket'}) create (first_curly_bracket)-[:Bug]->(pending)
create (first_curly_bracket_for_method_definition:issue {name:'first curly bracket for method definition'}) create (first_curly_bracket_for_method_definition)-[:Bug]->(pending)
create (put_space:issue {name:'put space'}) create (put_space)-[:Improvement]->(pending)
create (missing_between_opening_brace:issue {name:'missing between opening brace'}) create (missing_between_opening_brace)-[:Improvement]->(pending)
create (follow_convention_for_example_methods:issue {name:'follow convention for example methods'}) create (follow_convention_for_example_methods)-[:Improvement]->(pending)
create (put_a_space_put_a_space_pending_step_pending_step_methods_step_methods_opening_brace_first_curly_bracket_curly_bracket_method_definition_follow_the_convention_follow_the_convention_example_methods_:issue {name:'put a space - put a space - pending step - pending step methods - step methods - opening brace - first curly bracket - curly bracket - method definition - follow the convention - follow the convention - example methods - '}) create (put_a_space_put_a_space_pending_step_pending_step_methods_step_methods_opening_brace_first_curly_bracket_curly_bracket_method_definition_follow_the_convention_follow_the_convention_example_methods_)-[:Bug]->(pending)
create (first_curly_bracket)-[:Bug]->(pending)
create (first_curly_bracket_for_method_definition)-[:Bug]->(pending)
create (put_space)-[:Improvement]->(pending)
create (missing_between_opening_brace)-[:Improvement]->(pending)
create (follow_convention_for_example_methods)-[:Improvement]->(pending)
create (put_a_space_put_a_space_pending_step_pending_step_methods_step_methods_opening_brace_first_curly_bracket_curly_bracket_method_definition_follow_the_convention_follow_the_convention_example_methods_)-[:Bug]->(pending)
create (Misprint_in_class_nameHtmlTemplateOutput:issue {name:'Misprint in class nameHtmlTemplateOutput'}) create (Misprint_in_class_nameHtmlTemplateOutput)-[:Bug]->(core)
create (resulting_in_broken_link:issue {name:'resulting in broken link'}) create (resulting_in_broken_link)-[:Improvement]->(core)
create (Misprint_in_class_class_nameHtmlTemplateOutput_broken_link_HtmlTemplateOutput_link_:issue {name:'Misprint in class - class nameHtmlTemplateOutput - broken link - HtmlTemplateOutput link - '}) create (Misprint_in_class_class_nameHtmlTemplateOutput_broken_link_HtmlTemplateOutput_link_)-[:Improvement]->(core)
create (Misprint_in_class_nameHtmlTemplateOutput)-[:Bug]->(google)
create (resulting_in_broken_link)-[:Improvement]->(google)
create (Misprint_in_class_class_nameHtmlTemplateOutput_broken_link_HtmlTemplateOutput_link_)-[:Improvement]->(google)
create (Misprint_in_class_nameHtmlTemplateOutput)-[:Bug]->(print)
create (resulting_in_broken_link)-[:Improvement]->(print)
create (Misprint_in_class_class_nameHtmlTemplateOutput_broken_link_HtmlTemplateOutput_link_)-[:Improvement]->(print)
create (Runtime_exceptions:issue {name:'Runtime exceptions'}) create (Runtime_exceptions)-[:Bug]->(outcome)
create (Wrap_runtime_exceptions_as_MojoFailureException:issue {name:'Wrap runtime exceptions as MojoFailureException'}) create (Wrap_runtime_exceptions_as_MojoFailureException)-[:Bug]->(outcome)
create (avoid_FATAL_outcome:issue {name:'avoid FATAL outcome'}) create (avoid_FATAL_outcome)-[:Improvement]->(outcome)
create (play_with_CI_systems:issue {name:'play with CI systems'}) create (play_with_CI_systems)-[:Improvement]->(outcome)
create (report_outcome_as_FATAL_errors:issue {name:'report outcome as FATAL errors'}) create (report_outcome_as_FATAL_errors)-[:Improvement]->(outcome)
create (Wrap_runtime_Wrap_runtime_exceptions_runtime_exceptions_report_outcome_FATAL_errors_:issue {name:'Wrap runtime - Wrap runtime exceptions - runtime exceptions - report outcome - FATAL errors - '}) create (Wrap_runtime_Wrap_runtime_exceptions_runtime_exceptions_report_outcome_FATAL_errors_)-[:Bug]->(outcome)
create (Runtime_exceptions)-[:Bug]->(outcome)
create (Wrap_runtime_exceptions_as_MojoFailureException)-[:Bug]->(outcome)
create (avoid_FATAL_outcome)-[:Improvement]->(outcome)
create (play_with_CI_systems)-[:Improvement]->(outcome)
create (report_outcome_as_FATAL_errors)-[:Improvement]->(outcome)
create (Wrap_runtime_Wrap_runtime_exceptions_runtime_exceptions_report_outcome_FATAL_errors_)-[:Bug]->(outcome)
create (pluggable_Embedder:issue {name:'pluggable Embedder'}) create (pluggable_Embedder)-[:Bug]->(FailureStrategy)
create (Allow_Embedder_failure:issue {name:'Allow Embedder failure'}) create (Allow_Embedder_failure)-[:Bug]->(FailureStrategy)
create (be_by_users:issue {name:'be by users'}) create (be_by_users)-[:Improvement]->(FailureStrategy)
create (introduce_EmbedderFailureStrategy_interface_with_default_implementation:issue {name:'introduce EmbedderFailureStrategy interface with default implementation'}) create (introduce_EmbedderFailureStrategy_interface_with_default_implementation)-[:Improvement]->(FailureStrategy)
create (handling_strategies_throws_a_RunningStoriesFailed_exception_RunningStoriesFailed_exception_introduce_an_EmbedderFailureStrategy_introduce_an_EmbedderFailureStrategy_EmbedderFailureStrategy_interface_interface_with_default_default_implementation_throws_a_RunningStoriesFailed_exception_RunningStoriesFailed_exception_alternative_pluggable_behaviour_pluggable_behaviour_behaviour_of_failure_failure_handling_:issue {name:'handling strategies - throws a RunningStoriesFailed exception - RunningStoriesFailed exception - introduce an EmbedderFailureStrategy - introduce an EmbedderFailureStrategy - EmbedderFailureStrategy interface - interface with default - default implementation - throws a RunningStoriesFailed exception - RunningStoriesFailed exception - alternative pluggable behaviour - pluggable behaviour - behaviour of failure - failure handling - '}) create (handling_strategies_throws_a_RunningStoriesFailed_exception_RunningStoriesFailed_exception_introduce_an_EmbedderFailureStrategy_introduce_an_EmbedderFailureStrategy_EmbedderFailureStrategy_interface_interface_with_default_default_implementation_throws_a_RunningStoriesFailed_exception_RunningStoriesFailed_exception_alternative_pluggable_behaviour_pluggable_behaviour_behaviour_of_failure_failure_handling_)-[:Improvement]->(FailureStrategy)
create (new_trade:issue {name:'new trade'}) create (new_trade)-[:Bug]->(scenario)
create (support_With_tag:issue {name:'support With tag'}) create (support_With_tag)-[:Bug]->(scenario)
create (read_With_trade_price:issue {name:'read With trade price'}) create (read_With_trade_price)-[:Improvement]->(scenario)
create (support_With_tag_in_scenarios:issue {name:'support With tag in scenarios'}) create (support_With_tag_in_scenarios)-[:Improvement]->(scenario)
create (new_trade)-[:Bug]->(scenario)
create (support_With_tag)-[:Bug]->(scenario)
create (read_With_trade_price)-[:Improvement]->(scenario)
create (support_With_tag_in_scenarios)-[:Improvement]->(scenario)
create (binary_distribution:issue {name:'binary distribution'}) create (binary_distribution)-[:Bug]->(google)
create (find_required_artifacts:issue {name:'find required artifacts'}) create (find_required_artifacts)-[:Bug]->(google)
create (binary_distribution)-[:Bug]->(ant)
create (find_required_artifacts)-[:Bug]->(ant)
create (binary_distribution)-[:Bug]->(maven)
create (find_required_artifacts)-[:Bug]->(maven)
create (binary_distribution)-[:Bug]->(distribution)
create (find_required_artifacts)-[:Bug]->(distribution)
create (HTML_decoration:issue {name:'HTML decoration'}) create (HTML_decoration)-[:Bug]->(show)
create (HTML_decoration_for_parameter_empty_string:issue {name:'HTML decoration for parameter empty string'}) create (HTML_decoration_for_parameter_empty_string)-[:Bug]->(show)
create (puts_span:issue {name:'puts span'}) create (puts_span)-[:Improvement]->(show)
create (look_since_spacing:issue {name:'look since spacing'}) create (look_since_spacing)-[:Improvement]->(show)
create (puts_span_between_char:issue {name:'puts span between char'}) create (puts_span_between_char)-[:Improvement]->(show)
create (HTML_decoration_decoration_for_parameter_empty_string_puts_a_span_puts_a_span_using_a_story_using_a_story_story_step_has_an_empty_parameter_empty_parameter_html_output_substring_match_regex_matches_makes_the_text_makes_the_text_char_changes_:issue {name:'HTML decoration - decoration for parameter - empty string - puts a span - puts a span - using a story - using a story - story step - has an empty parameter - empty parameter - html output - substring match - regex matches - makes the text - makes the text - char changes - '}) create (HTML_decoration_decoration_for_parameter_empty_string_puts_a_span_puts_a_span_using_a_story_using_a_story_story_step_has_an_empty_parameter_empty_parameter_html_output_substring_match_regex_matches_makes_the_text_makes_the_text_char_changes_)-[:Bug]->(show)
create (Browncm_Kg:issue {name:'|Brown|cm |Kg'}) create (Browncm_Kg)-[:Bug]->(show)
create (following_parameters:issue {name:'following parameters'}) create (following_parameters)-[:Bug]->(show)
create (is_in_tabular_form:issue {name:'is in tabular form'}) create (is_in_tabular_form)-[:Improvement]->(show)
create (following_parameters_in_tabular_ColorHeightWeight_form:issue {name:'following parameters in tabular |Color|Height|Weight| form'}) create (following_parameters_in_tabular_ColorHeightWeight_form)-[:Improvement]->(show)
create (WebRunner_FindSteps:issue {name:'WebRunner FindSteps'}) create (WebRunner_FindSteps)-[:Bug]->(given)
create (allow_auto_completion:issue {name:'allow auto completion'}) create (allow_auto_completion)-[:Bug]->(given)
create (allow_auto_completion_of_step_patterns:issue {name:'allow auto completion of step patterns'}) create (allow_auto_completion_of_step_patterns)-[:Improvement]->(given)
create (WebRunner_FindSteps)-[:Bug]->(show)
create (allow_auto_completion)-[:Bug]->(show)
create (allow_auto_completion_of_step_patterns)-[:Improvement]->(show)
create (embedder_controls:issue {name:'embedder controls'}) create (embedder_controls)-[:Bug]->(embedder)
create (Improve_embedder:issue {name:'Improve embedder'}) create (Improve_embedder)-[:Bug]->(embedder)
create (monitoring_Add_monitoring_of_controls_Add_story_timeouts:issue {name:'monitoring Add monitoring of controls Add story timeouts'}) create (monitoring_Add_monitoring_of_controls_Add_story_timeouts)-[:Improvement]->(embedder)
create (Improve_embedder_monitoring_of_embedder_embedder_controls_story_timeouts_:issue {name:'Improve embedder - monitoring of embedder - embedder controls - story timeouts - '}) create (Improve_embedder_monitoring_of_embedder_embedder_controls_story_timeouts_)-[:Improvement]->(embedder)
create (stack_traces:issue {name:'stack traces'}) create (stack_traces)-[:Bug]->(print)
create (stack_traces_of_failures:issue {name:'stack traces of failures'}) create (stack_traces_of_failures)-[:Bug]->(print)
create (collects_throwables:issue {name:'collects throwables'}) create (collects_throwables)-[:Improvement]->(print)
create (is_by_default)-[:Improvement]->(print)
create (BatchFailures:class {name:'BatchFailures', favoritecolor: 'green'}) create (stack_traces)-[:Bug]->(BatchFailures)
create (stack_traces_of_failures)-[:Bug]->(BatchFailures)
create (collects_throwables)-[:Improvement]->(BatchFailures)
create (is_by_default)-[:Improvement]->(BatchFailures)
create (Allow_stack_Allow_stack_traces_stack_traces_traces_of_failures_printed_in_verbose_mode_verbose_mode_collects_the_throwables_collects_the_throwables_story_execution_downstream_RunningStoriesFailed_exception_RunningStoriesFailed_exception_Add_a_verbose_flag_verbose_flag_allow_the_stack_allow_the_stack_stack_traces_)-[:Improvement]->(BatchFailures)
create (HTML_decoration)-[:Bug]->(close)
create (marks_parameters:issue {name:'marks parameters'}) create (marks_parameters)-[:Bug]->(close)
create (works_for_empty_strings:issue {name:'works for empty strings'}) create (works_for_empty_strings)-[:Improvement]->(close)
create (HTML_decoration_marks_parameters_empty_strings_other_parameters_example_table_using_the_name_using_the_name_angle_brackets_string_replace_used_for_normal_steps_normal_steps_cause_any_change_cause_any_change_big_problem_parameter_tag_:issue {name:'HTML decoration - marks parameters - empty strings - other parameters - example table - using the name - using the name - angle brackets - string replace - used for normal steps - normal steps - cause any change - cause any change - big problem - parameter tag - '}) create (HTML_decoration_marks_parameters_empty_strings_other_parameters_example_table_using_the_name_using_the_name_angle_brackets_string_replace_used_for_normal_steps_normal_steps_cause_any_change_cause_any_change_big_problem_parameter_tag_)-[:Improvement]->(close)
create (MavenAnt_configuration:issue {name:'MavenAnt configuration'}) create (MavenAnt_configuration)-[:Bug]->(configuration)
create (control_of_verbosity:issue {name:'control of verbosity'}) create (control_of_verbosity)-[:Bug]->(configuration)
create (have_many_hundreds:issue {name:'have many hundreds'}) create (have_many_hundreds)-[:Improvement]->(configuration)
create (defaulting_to_false:issue {name:'defaulting to false'}) create (defaulting_to_false)-[:Improvement]->(configuration)
create (have_many_hundreds_of_stories:issue {name:'have many hundreds of stories'}) create (have_many_hundreds_of_stories)-[:Improvement]->(configuration)
create (alternative_narrative:issue {name:'alternative narrative'}) create (alternative_narrative)-[:Bug]->(core)
create (Support_syntax_Support:issue {name:'Support syntax Support'}) create (Support_syntax_Support)-[:Bug]->(core)
create (Support_alternative_narrative_alternative_narrative_alternative_narrative_syntax_narrative_syntax_alternative_narrative_alternative_narrative_syntax_narrative_syntax_:issue {name:'Support alternative narrative - alternative narrative - alternative narrative syntax - narrative syntax - alternative narrative - alternative narrative syntax - narrative syntax - '}) create (Support_alternative_narrative_alternative_narrative_alternative_narrative_syntax_narrative_syntax_alternative_narrative_alternative_narrative_syntax_narrative_syntax_)-[:Improvement]->(core)
create (alternative_narrative)-[:Bug]->(ant)
create (Support_syntax_Support)-[:Bug]->(ant)
create (Support_alternative_narrative_alternative_narrative_alternative_narrative_syntax_narrative_syntax_alternative_narrative_alternative_narrative_syntax_narrative_syntax_)-[:Improvement]->(ant)
create (alternative_narrative)-[:Bug]->(narrative)
create (Support_syntax_Support)-[:Bug]->(narrative)
create (Support_alternative_narrative_alternative_narrative_alternative_narrative_syntax_narrative_syntax_alternative_narrative_alternative_narrative_syntax_narrative_syntax_)-[:Improvement]->(narrative)
create (alternative_narrative)-[:Bug]->(narrative)
create (Support_syntax_Support)-[:Bug]->(narrative)
create (Support_alternative_narrative_alternative_narrative_alternative_narrative_syntax_narrative_syntax_alternative_narrative_alternative_narrative_syntax_narrative_syntax_)-[:Improvement]->(narrative)
create (Outcomes_table:issue {name:'Outcomes table'}) create (Outcomes_table)-[:Bug]->(core)
create (gives_Error:issue {name:'gives Error'}) create (gives_Error)-[:Improvement]->(core)
create (work_with_boolean_comparison:issue {name:'work with boolean comparison'}) create (work_with_boolean_comparison)-[:Improvement]->(core)
create (gives_Error_on_line:issue {name:'gives Error on line'}) create (gives_Error_on_line)-[:Improvement]->(core)
create (boolean_comparison_gives_this_error_gives_this_error_Error_on_line_Expecting_a_string_Expecting_a_string_date_or_number_problematic_instruction_directive_renderOutcomeValue_renderOutcomeValue_on_line_directive_renderOutcomes_renderOutcomes_on_line_directive_renderStep_renderStep_on_line_backtrace_for_programmers_:issue {name:'boolean comparison - gives this error - gives this error - Error on line - Expecting a string - Expecting a string - date or number - problematic instruction - directive renderOutcomeValue - renderOutcomeValue on line - directive renderOutcomes - renderOutcomes on line - directive renderStep - renderStep on line - backtrace for programmers - '}) create (boolean_comparison_gives_this_error_gives_this_error_Error_on_line_Expecting_a_string_Expecting_a_string_date_or_number_problematic_instruction_directive_renderOutcomeValue_renderOutcomeValue_on_line_directive_renderOutcomes_renderOutcomes_on_line_directive_renderStep_renderStep_on_line_backtrace_for_programmers_)-[:Bug]->(core)
create (Outcomes_table)-[:Bug]->(outcome)
create (gives_Error)-[:Improvement]->(outcome)
create (work_with_boolean_comparison)-[:Improvement]->(outcome)
create (gives_Error_on_line)-[:Improvement]->(outcome)
create (boolean_comparison_gives_this_error_gives_this_error_Error_on_line_Expecting_a_string_Expecting_a_string_date_or_number_problematic_instruction_directive_renderOutcomeValue_renderOutcomeValue_on_line_directive_renderOutcomes_renderOutcomes_on_line_directive_renderStep_renderStep_on_line_backtrace_for_programmers_)-[:Bug]->(outcome)
create (Outcomes_table)-[:Bug]->(outcome)
create (gives_Error)-[:Improvement]->(outcome)
create (work_with_boolean_comparison)-[:Improvement]->(outcome)
create (gives_Error_on_line)-[:Improvement]->(outcome)
create (boolean_comparison_gives_this_error_gives_this_error_Error_on_line_Expecting_a_string_Expecting_a_string_date_or_number_problematic_instruction_directive_renderOutcomeValue_renderOutcomeValue_on_line_directive_renderOutcomes_renderOutcomes_on_line_directive_renderStep_renderStep_on_line_backtrace_for_programmers_)-[:Bug]->(outcome)
create (one_example:issue {name:'one example'}) create (one_example)-[:Bug]->(ant)
create (Create_Container_Scenario_Type:issue {name:'Create Container Scenario Type'}) create (Create_Container_Scenario_Type)-[:Bug]->(ant)
create (know_of_way:issue {name:'know of way'}) create (know_of_way)-[:Improvement]->(ant)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios:issue {name:'Create Container Scenario Type For Parameterised Scenarios'}) create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(ant)
create (one_example)-[:Bug]->(storyControls)
create (Create_Container_Scenario_Type)-[:Bug]->(storyControls)
create (know_of_way)-[:Improvement]->(storyControls)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(storyControls)
create (one_example)-[:Bug]->(failed)
create (Create_Container_Scenario_Type)-[:Bug]->(failed)
create (know_of_way)-[:Improvement]->(failed)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(failed)
create (one_example)-[:Bug]->(after)
create (Create_Container_Scenario_Type)-[:Bug]->(after)
create (know_of_way)-[:Improvement]->(after)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(after)
create (one_example)-[:Bug]->(pending)
create (Create_Container_Scenario_Type)-[:Bug]->(pending)
create (know_of_way)-[:Improvement]->(pending)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(pending)
create (one_example)-[:Bug]->(scenario)
create (Create_Container_Scenario_Type)-[:Bug]->(scenario)
create (know_of_way)-[:Improvement]->(scenario)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(scenario)
create (one_example)-[:Bug]->(pending)
create (Create_Container_Scenario_Type)-[:Bug]->(pending)
create (know_of_way)-[:Improvement]->(pending)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(pending)
create (one_example)-[:Bug]->(scenario)
create (Create_Container_Scenario_Type)-[:Bug]->(scenario)
create (know_of_way)-[:Improvement]->(scenario)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(scenario)
create (one_example)-[:Bug]->(print)
create (Create_Container_Scenario_Type)-[:Bug]->(print)
create (know_of_way)-[:Improvement]->(print)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(print)
create (one_example)-[:Bug]->(storyControls)
create (Create_Container_Scenario_Type)-[:Bug]->(storyControls)
create (know_of_way)-[:Improvement]->(storyControls)
create (Create_Container_Scenario_Type_For_Parameterised_Scenarios)-[:Improvement]->(storyControls)
create (other_keywords:issue {name:'other keywords'}) create (other_keywords)-[:Bug]->(keywords)
create (two_subsequent_clauses_with_translated_keywords:issue {name:'two subsequent clauses with translated keywords'}) create (two_subsequent_clauses_with_translated_keywords)-[:Bug]->(keywords)
create (use_russian_word:issue {name:'use russian word'}) create (use_russian_word)-[:Improvement]->(keywords)
create (use_plain_latin_letters_in_order:issue {name:'use plain latin letters in order'}) create (use_plain_latin_letters_in_order)-[:Improvement]->(keywords)
create (other_keywords)-[:Bug]->(pending)
create (two_subsequent_clauses_with_translated_keywords)-[:Bug]->(pending)
create (use_russian_word)-[:Improvement]->(pending)
create (use_plain_latin_letters_in_order)-[:Improvement]->(pending)
create (other_keywords)-[:Bug]->(scenario)
create (two_subsequent_clauses_with_translated_keywords)-[:Bug]->(scenario)
create (use_russian_word)-[:Improvement]->(scenario)
create (use_plain_latin_letters_in_order)-[:Improvement]->(scenario)
create (other_keywords)-[:Bug]->(pending)
create (two_subsequent_clauses_with_translated_keywords)-[:Bug]->(pending)
create (use_russian_word)-[:Improvement]->(pending)
create (use_plain_latin_letters_in_order)-[:Improvement]->(pending)
create (other_keywords)-[:Bug]->(scenario)
create (two_subsequent_clauses_with_translated_keywords)-[:Bug]->(scenario)
create (use_russian_word)-[:Improvement]->(scenario)
create (use_plain_latin_letters_in_order)-[:Improvement]->(scenario)
create (other_keywords)-[:Bug]->(keywords)
create (two_subsequent_clauses_with_translated_keywords)-[:Bug]->(keywords)
create (use_russian_word)-[:Improvement]->(keywords)
create (use_plain_latin_letters_in_order)-[:Improvement]->(keywords)
create (interface_FooBarSteps:issue {name:'interface FooBarSteps'}) create (interface_FooBarSteps)-[:Bug]->(core)
create (allow_JDK_Proxies:issue {name:'allow JDK Proxies'}) create (allow_JDK_Proxies)-[:Improvement]->(core)
create (making_with_same_stories:issue {name:'making with same stories'}) create (making_with_same_stories)-[:Improvement]->(core)
create (exploring_methods_for_annotations:issue {name:'exploring methods for annotations'}) create (exploring_methods_for_annotations)-[:Improvement]->(core)
create (interface_FooBarSteps)-[:Bug]->(given)
create (allow_JDK_Proxies)-[:Improvement]->(given)
create (making_with_same_stories)-[:Improvement]->(given)
create (exploring_methods_for_annotations)-[:Improvement]->(given)
create (Jbehave_Thucydides:issue {name:'Jbehave Thucydides'}) create (Jbehave_Thucydides)-[:Bug]->(org_jbehave_core)
create (have_simple_project:issue {name:'have simple project'}) create (have_simple_project)-[:Improvement]->(org_jbehave_core)
create (is_on_Wikionary_home_page:issue {name:'is on Wikionary home page'}) create (is_on_Wikionary_home_page)-[:Improvement]->(org_jbehave_core)
create (have_simple_project_from_archetype_jbehave_archetype:issue {name:'have simple project from archetype jbehave archetype'}) create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(org_jbehave_core)
create (Jbehave_Thucydides)-[:Bug]->(org_jbehave_core_configuration)
create (have_simple_project)-[:Improvement]->(org_jbehave_core_configuration)
create (is_on_Wikionary_home_page)-[:Improvement]->(org_jbehave_core_configuration)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(org_jbehave_core_configuration)
create (Jbehave_Thucydides)-[:Bug]->(org_jbehave_core_embedder)
create (have_simple_project)-[:Improvement]->(org_jbehave_core_embedder)
create (is_on_Wikionary_home_page)-[:Improvement]->(org_jbehave_core_embedder)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(org_jbehave_core_embedder)
create (org_jbehave_core_parsers:package {name:'org_jbehave_core_parsers', favoritecolor: 'orange'}) create (Jbehave_Thucydides)-[:Bug]->(org_jbehave_core_parsers)
create (have_simple_project)-[:Improvement]->(org_jbehave_core_parsers)
create (is_on_Wikionary_home_page)-[:Improvement]->(org_jbehave_core_parsers)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(org_jbehave_core_parsers)
create (Jbehave_Thucydides)-[:Bug]->(org_jbehave_core_reporters)
create (have_simple_project)-[:Improvement]->(org_jbehave_core_reporters)
create (is_on_Wikionary_home_page)-[:Improvement]->(org_jbehave_core_reporters)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(org_jbehave_core_reporters)
create (Jbehave_Thucydides)-[:Bug]->(core)
create (have_simple_project)-[:Improvement]->(core)
create (is_on_Wikionary_home_page)-[:Improvement]->(core)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(core)
create (Jbehave_Thucydides)-[:Bug]->(configuration)
create (have_simple_project)-[:Improvement]->(configuration)
create (is_on_Wikionary_home_page)-[:Improvement]->(configuration)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(configuration)
create (Jbehave_Thucydides)-[:Bug]->(embedder)
create (have_simple_project)-[:Improvement]->(embedder)
create (is_on_Wikionary_home_page)-[:Improvement]->(embedder)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(embedder)
create (Jbehave_Thucydides)-[:Bug]->(keywords)
create (have_simple_project)-[:Improvement]->(keywords)
create (is_on_Wikionary_home_page)-[:Improvement]->(keywords)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(keywords)
create (Jbehave_Thucydides)-[:Bug]->(storyReporter)
create (have_simple_project)-[:Improvement]->(storyReporter)
create (is_on_Wikionary_home_page)-[:Improvement]->(storyReporter)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(storyReporter)
create (storyReporterBuilder:class {name:'storyReporterBuilder', favoritecolor: 'green'}) create (Jbehave_Thucydides)-[:Bug]->(storyReporterBuilder)
create (have_simple_project)-[:Improvement]->(storyReporterBuilder)
create (is_on_Wikionary_home_page)-[:Improvement]->(storyReporterBuilder)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(storyReporterBuilder)
create (useKeywords:class {name:'useKeywords', favoritecolor: 'green'}) create (Jbehave_Thucydides)-[:Bug]->(useKeywords)
create (have_simple_project)-[:Improvement]->(useKeywords)
create (is_on_Wikionary_home_page)-[:Improvement]->(useKeywords)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(useKeywords)
create (Jbehave_Thucydides)-[:Bug]->(useStoryLoader)
create (have_simple_project)-[:Improvement]->(useStoryLoader)
create (is_on_Wikionary_home_page)-[:Improvement]->(useStoryLoader)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(useStoryLoader)
create (useStoryParser:class {name:'useStoryParser', favoritecolor: 'green'}) create (Jbehave_Thucydides)-[:Bug]->(useStoryParser)
create (have_simple_project)-[:Improvement]->(useStoryParser)
create (is_on_Wikionary_home_page)-[:Improvement]->(useStoryParser)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(useStoryParser)
create (Jbehave_Thucydides)-[:Bug]->(keywords)
create (have_simple_project)-[:Improvement]->(keywords)
create (is_on_Wikionary_home_page)-[:Improvement]->(keywords)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(keywords)
create (Jbehave_Thucydides)-[:Bug]->(storyReporter)
create (have_simple_project)-[:Improvement]->(storyReporter)
create (is_on_Wikionary_home_page)-[:Improvement]->(storyReporter)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(storyReporter)
create (Jbehave_Thucydides)-[:Bug]->(storyReporterBuilder)
create (have_simple_project)-[:Improvement]->(storyReporterBuilder)
create (is_on_Wikionary_home_page)-[:Improvement]->(storyReporterBuilder)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(storyReporterBuilder)
create (Jbehave_Thucydides)-[:Bug]->(useKeywords)
create (have_simple_project)-[:Improvement]->(useKeywords)
create (is_on_Wikionary_home_page)-[:Improvement]->(useKeywords)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(useKeywords)
create (Jbehave_Thucydides)-[:Bug]->(useStoryLoader)
create (have_simple_project)-[:Improvement]->(useStoryLoader)
create (is_on_Wikionary_home_page)-[:Improvement]->(useStoryLoader)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(useStoryLoader)
create (Jbehave_Thucydides)-[:Bug]->(useStoryParser)
create (have_simple_project)-[:Improvement]->(useStoryParser)
create (is_on_Wikionary_home_page)-[:Improvement]->(useStoryParser)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(useStoryParser)
create (Jbehave_Thucydides)-[:Bug]->(LocalizedKeywords)
create (have_simple_project)-[:Improvement]->(LocalizedKeywords)
create (is_on_Wikionary_home_page)-[:Improvement]->(LocalizedKeywords)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(LocalizedKeywords)
create (Jbehave_Thucydides)-[:Bug]->(JUnitStories)
create (have_simple_project)-[:Improvement]->(JUnitStories)
create (is_on_Wikionary_home_page)-[:Improvement]->(JUnitStories)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(JUnitStories)
create (Jbehave_Thucydides)-[:Bug]->(ExamplesTable)
create (have_simple_project)-[:Improvement]->(ExamplesTable)
create (is_on_Wikionary_home_page)-[:Improvement]->(ExamplesTable)
create (have_simple_project_from_archetype_jbehave_archetype)-[:Improvement]->(ExamplesTable)
create (examples_table:issue {name:'examples table'}) create (examples_table)-[:Bug]->(ExamplesTable)
create (containing_backslash_characters:issue {name:'containing backslash characters'}) create (containing_backslash_characters)-[:Bug]->(ExamplesTable)
create (According_to_javadoc:issue {name:'According to javadoc'}) create (According_to_javadoc)-[:Improvement]->(ExamplesTable)
create (Named_parameter_Named_parameter_values_parameter_values_containing_backslash_backslash_and_dollar_backslash_and_dollar_characters_dollar_characters_cause_side_cause_side_effects_side_effects_named_parameters_parameters_and_examples_parameters_and_examples_table_examples_table_named_parameter_named_parameter_value_parameter_value_cause_side_cause_side_effects_side_effects_transmitted_parameter_transmitted_parameter_values_parameter_values_contains_backslash_uses_regex_capturing_features_cause_side_cause_side_effects_side_effects_:issue {name:'Named parameter - Named parameter values - parameter values - containing backslash - backslash and dollar - backslash and dollar characters - dollar characters - cause side - cause side effects - side effects - named parameters - parameters and examples - parameters and examples table - examples table - named parameter - named parameter value - parameter value - cause side - cause side effects - side effects - transmitted parameter - transmitted parameter values - parameter values - contains backslash - uses regex - capturing features - cause side - cause side effects - side effects - '}) create (Named_parameter_Named_parameter_values_parameter_values_containing_backslash_backslash_and_dollar_backslash_and_dollar_characters_dollar_characters_cause_side_cause_side_effects_side_effects_named_parameters_parameters_and_examples_parameters_and_examples_table_examples_table_named_parameter_named_parameter_value_parameter_value_cause_side_cause_side_effects_side_effects_transmitted_parameter_transmitted_parameter_values_parameter_values_contains_backslash_uses_regex_capturing_features_cause_side_cause_side_effects_side_effects_)-[:Improvement]->(ExamplesTable)
create (such_step:issue {name:'such step'}) create (such_step)-[:Bug]->(pending)
create (error_with_tab_character:issue {name:'error with tab character'}) create (error_with_tab_character)-[:Bug]->(pending)
create (write_scenarios:issue {name:'write scenarios'}) create (write_scenarios)-[:Improvement]->(pending)
create (comes_from_tab_characters:issue {name:'comes from tab characters'}) create (comes_from_tab_characters)-[:Improvement]->(pending)
create (aline_columns_of_tabulars:issue {name:'aline columns of tabulars'}) create (aline_columns_of_tabulars)-[:Improvement]->(pending)
create (error_with_tab_tab_character_character_in_comments_write_scenarios_use_tab_use_tab_character_tab_character_aline_columns_aline_columns_of_tabulars_columns_of_tabulars_such_step_prefixing_each_step_prefixing_each_step_step_line_tab_characters_next_uncommented_step_uncommented_step_tab_characters_set_this_bug_set_this_bug_need_this_bugfix_need_this_bugfix_:issue {name:'error with tab - tab character - character in comments - write scenarios - use tab - use tab character - tab character - aline columns - aline columns of tabulars - columns of tabulars - such step - prefixing each step - prefixing each step - step line - tab characters - next uncommented step - uncommented step - tab characters - set this bug - set this bug - need this bugfix - need this bugfix - '}) create (error_with_tab_tab_character_character_in_comments_write_scenarios_use_tab_use_tab_character_tab_character_aline_columns_aline_columns_of_tabulars_columns_of_tabulars_such_step_prefixing_each_step_prefixing_each_step_step_line_tab_characters_next_uncommented_step_uncommented_step_tab_characters_set_this_bug_set_this_bug_need_this_bugfix_need_this_bugfix_)-[:Bug]->(pending)
create (such_step)-[:Bug]->(scenario)
create (error_with_tab_character)-[:Bug]->(scenario)
create (write_scenarios)-[:Improvement]->(scenario)
create (comes_from_tab_characters)-[:Improvement]->(scenario)
create (aline_columns_of_tabulars)-[:Improvement]->(scenario)
create (error_with_tab_tab_character_character_in_comments_write_scenarios_use_tab_use_tab_character_tab_character_aline_columns_aline_columns_of_tabulars_columns_of_tabulars_such_step_prefixing_each_step_prefixing_each_step_step_line_tab_characters_next_uncommented_step_uncommented_step_tab_characters_set_this_bug_set_this_bug_need_this_bugfix_need_this_bugfix_)-[:Bug]->(scenario)
create (such_step)-[:Bug]->(pending)
create (error_with_tab_character)-[:Bug]->(pending)
create (write_scenarios)-[:Improvement]->(pending)
create (comes_from_tab_characters)-[:Improvement]->(pending)
create (aline_columns_of_tabulars)-[:Improvement]->(pending)
create (error_with_tab_tab_character_character_in_comments_write_scenarios_use_tab_use_tab_character_tab_character_aline_columns_aline_columns_of_tabulars_columns_of_tabulars_such_step_prefixing_each_step_prefixing_each_step_step_line_tab_characters_next_uncommented_step_uncommented_step_tab_characters_set_this_bug_set_this_bug_need_this_bugfix_need_this_bugfix_)-[:Bug]->(pending)
create (such_step)-[:Bug]->(scenario)
create (error_with_tab_character)-[:Bug]->(scenario)
create (write_scenarios)-[:Improvement]->(scenario)
create (comes_from_tab_characters)-[:Improvement]->(scenario)
create (aline_columns_of_tabulars)-[:Improvement]->(scenario)
create (error_with_tab_tab_character_character_in_comments_write_scenarios_use_tab_use_tab_character_tab_character_aline_columns_aline_columns_of_tabulars_columns_of_tabulars_such_step_prefixing_each_step_prefixing_each_step_step_line_tab_characters_next_uncommented_step_uncommented_step_tab_characters_set_this_bug_set_this_bug_need_this_bugfix_need_this_bugfix_)-[:Bug]->(scenario)
create (plugin_parser:issue {name:'plugin parser'}) create (plugin_parser)-[:Bug]->(core)
create (story_parser_of_jbehave_core:issue {name:'story parser of jbehave core'}) create (story_parser_of_jbehave_core)-[:Bug]->(core)
create (displays_line:issue {name:'displays line'}) create (displays_line)-[:Improvement]->(core)
create (be_with_regards:issue {name:'be with regards'}) create (be_with_regards)-[:Improvement]->(core)
create (start_line_with_Scenarioblabla:issue {name:'start line with Scenarioblabla'}) create (start_line_with_Scenarioblabla)-[:Improvement]->(core)
create (plugin_parser_parser_with_regards_regards_to_comments_story_editor_displays_a_line_displays_a_line_comment_line_require_a_space_require_a_space_other_keywords_story_editor_start_a_line_start_a_line_story_editor_story_parser_parser_of_jbehave_requires_a_space_requires_a_space_story_parser_parser_of_jbehave_parse_the_story_parse_the_story_same_way_story_editor_story_editor_displays_editor_displays_comment_keywords_include_a_space_include_a_space_space_XML_make_an_exception_make_an_exception_comment_keyword_story_keywords_:issue {name:'plugin parser - parser with regards - regards to comments - story editor - displays a line - displays a line - comment line - require a space - require a space - other keywords - story editor - start a line - start a line - story editor - story parser - parser of jbehave - requires a space - requires a space - story parser - parser of jbehave - parse the story - parse the story - same way - story editor - story editor displays - editor displays - comment keywords - include a space - include a space - space XML - make an exception - make an exception - comment keyword - story keywords - '}) create (plugin_parser_parser_with_regards_regards_to_comments_story_editor_displays_a_line_displays_a_line_comment_line_require_a_space_require_a_space_other_keywords_story_editor_start_a_line_start_a_line_story_editor_story_parser_parser_of_jbehave_requires_a_space_requires_a_space_story_parser_parser_of_jbehave_parse_the_story_parse_the_story_same_way_story_editor_story_editor_displays_editor_displays_comment_keywords_include_a_space_include_a_space_space_XML_make_an_exception_make_an_exception_comment_keyword_story_keywords_)-[:Bug]->(core)
create (plugin_parser)-[:Bug]->(keywords)
create (story_parser_of_jbehave_core)-[:Bug]->(keywords)
create (displays_line)-[:Improvement]->(keywords)
create (be_with_regards)-[:Improvement]->(keywords)
create (start_line_with_Scenarioblabla)-[:Improvement]->(keywords)
create (plugin_parser_parser_with_regards_regards_to_comments_story_editor_displays_a_line_displays_a_line_comment_line_require_a_space_require_a_space_other_keywords_story_editor_start_a_line_start_a_line_story_editor_story_parser_parser_of_jbehave_requires_a_space_requires_a_space_story_parser_parser_of_jbehave_parse_the_story_parse_the_story_same_way_story_editor_story_editor_displays_editor_displays_comment_keywords_include_a_space_include_a_space_space_XML_make_an_exception_make_an_exception_comment_keyword_story_keywords_)-[:Bug]->(keywords)
create (plugin_parser)-[:Bug]->(after)
create (story_parser_of_jbehave_core)-[:Bug]->(after)
create (displays_line)-[:Improvement]->(after)
create (be_with_regards)-[:Improvement]->(after)
create (start_line_with_Scenarioblabla)-[:Improvement]->(after)
create (plugin_parser_parser_with_regards_regards_to_comments_story_editor_displays_a_line_displays_a_line_comment_line_require_a_space_require_a_space_other_keywords_story_editor_start_a_line_start_a_line_story_editor_story_parser_parser_of_jbehave_requires_a_space_requires_a_space_story_parser_parser_of_jbehave_parse_the_story_parse_the_story_same_way_story_editor_story_editor_displays_editor_displays_comment_keywords_include_a_space_include_a_space_space_XML_make_an_exception_make_an_exception_comment_keyword_story_keywords_)-[:Bug]->(after)
create (plugin_parser)-[:Bug]->(scenario)
create (story_parser_of_jbehave_core)-[:Bug]->(scenario)
create (displays_line)-[:Improvement]->(scenario)
create (be_with_regards)-[:Improvement]->(scenario)
create (start_line_with_Scenarioblabla)-[:Improvement]->(scenario)
create (plugin_parser_parser_with_regards_regards_to_comments_story_editor_displays_a_line_displays_a_line_comment_line_require_a_space_require_a_space_other_keywords_story_editor_start_a_line_start_a_line_story_editor_story_parser_parser_of_jbehave_requires_a_space_requires_a_space_story_parser_parser_of_jbehave_parse_the_story_parse_the_story_same_way_story_editor_story_editor_displays_editor_displays_comment_keywords_include_a_space_include_a_space_space_XML_make_an_exception_make_an_exception_comment_keyword_story_keywords_)-[:Bug]->(scenario)
create (plugin_parser)-[:Bug]->(scenario)
create (story_parser_of_jbehave_core)-[:Bug]->(scenario)
create (displays_line)-[:Improvement]->(scenario)
create (be_with_regards)-[:Improvement]->(scenario)
create (start_line_with_Scenarioblabla)-[:Improvement]->(scenario)
create (plugin_parser_parser_with_regards_regards_to_comments_story_editor_displays_a_line_displays_a_line_comment_line_require_a_space_require_a_space_other_keywords_story_editor_start_a_line_start_a_line_story_editor_story_parser_parser_of_jbehave_requires_a_space_requires_a_space_story_parser_parser_of_jbehave_parse_the_story_parse_the_story_same_way_story_editor_story_editor_displays_editor_displays_comment_keywords_include_a_space_include_a_space_space_XML_make_an_exception_make_an_exception_comment_keyword_story_keywords_)-[:Bug]->(scenario)
create (plugin_parser)-[:Bug]->(keywords)
create (story_parser_of_jbehave_core)-[:Bug]->(keywords)
create (displays_line)-[:Improvement]->(keywords)
create (be_with_regards)-[:Improvement]->(keywords)
create (start_line_with_Scenarioblabla)-[:Improvement]->(keywords)
create (plugin_parser_parser_with_regards_regards_to_comments_story_editor_displays_a_line_displays_a_line_comment_line_require_a_space_require_a_space_other_keywords_story_editor_start_a_line_start_a_line_story_editor_story_parser_parser_of_jbehave_requires_a_space_requires_a_space_story_parser_parser_of_jbehave_parse_the_story_parse_the_story_same_way_story_editor_story_editor_displays_editor_displays_comment_keywords_include_a_space_include_a_space_space_XML_make_an_exception_make_an_exception_comment_keyword_story_keywords_)-[:Bug]->(keywords)
create (xxx_Scenario:issue {name:'xxx Scenario'}) create (xxx_Scenario)-[:Bug]->(after)
create (example_comment_after_example_scenario:issue {name:'example comment after example scenario'}) create (example_comment_after_example_scenario)-[:Bug]->(after)
create (comment_scenario:issue {name:'comment scenario'}) create (comment_scenario)-[:Improvement]->(after)
create (write_scenario_with_parameter:issue {name:'write scenario with parameter'}) create (write_scenario_with_parameter)-[:Improvement]->(after)
create (comment_a_scenario_comment_a_scenario_write_a_scenario_write_a_scenario_scenario_with_parameter_see_example_comment_the_next_scenario_next_scenario_using_profiles_Scenario_xxx_scenario_example_Scenario_xxx_example_comment_example_scenario_using_profiles_example_comment_:issue {name:'comment a scenario - comment a scenario - write a scenario - write a scenario - scenario with parameter - see example - comment the next scenario - next scenario - using profiles - Scenario xxx - scenario example - Scenario xxx - example comment - example scenario - using profiles - example comment - '}) create (comment_a_scenario_comment_a_scenario_write_a_scenario_write_a_scenario_scenario_with_parameter_see_example_comment_the_next_scenario_next_scenario_using_profiles_Scenario_xxx_scenario_example_Scenario_xxx_example_comment_example_scenario_using_profiles_example_comment_)-[:Improvement]->(after)
create (xxx_Scenario)-[:Bug]->(scenario)
create (example_comment_after_example_scenario)-[:Bug]->(scenario)
create (comment_scenario)-[:Improvement]->(scenario)
create (write_scenario_with_parameter)-[:Improvement]->(scenario)
create (comment_a_scenario_comment_a_scenario_write_a_scenario_write_a_scenario_scenario_with_parameter_see_example_comment_the_next_scenario_next_scenario_using_profiles_Scenario_xxx_scenario_example_Scenario_xxx_example_comment_example_scenario_using_profiles_example_comment_)-[:Improvement]->(scenario)
create (xxx_Scenario)-[:Bug]->(scenario)
create (example_comment_after_example_scenario)-[:Bug]->(scenario)
create (comment_scenario)-[:Improvement]->(scenario)
create (write_scenario_with_parameter)-[:Improvement]->(scenario)
create (comment_a_scenario_comment_a_scenario_write_a_scenario_write_a_scenario_scenario_with_parameter_see_example_comment_the_next_scenario_next_scenario_using_profiles_Scenario_xxx_scenario_example_Scenario_xxx_example_comment_example_scenario_using_profiles_example_comment_)-[:Improvement]->(scenario)
create (Kind_regards:issue {name:'Kind regards'}) create (Kind_regards)-[:Bug]->(scenario)
create (part_of_test_case:issue {name:'part of test case'}) create (part_of_test_case)-[:Bug]->(scenario)
create (counts_steps:issue {name:'counts steps'}) create (counts_steps)-[:Improvement]->(scenario)
create (counts_real_test_scenarios_in_Eclipse_unitils:issue {name:'counts real test scenarios in Eclipse unitils'}) create (counts_real_test_scenarios_in_Eclipse_unitils)-[:Improvement]->(scenario)
create (Kind_regards)-[:Bug]->(scenario)
create (part_of_test_case)-[:Bug]->(scenario)
create (counts_steps)-[:Improvement]->(scenario)
create (counts_real_test_scenarios_in_Eclipse_unitils)-[:Improvement]->(scenario)
create (jBehave_eclipse:issue {name:'jBehave eclipse'}) create (jBehave_eclipse)-[:Bug]->(ant)
create (Improve_responsiveness:issue {name:'Improve responsiveness'}) create (Improve_responsiveness)-[:Bug]->(ant)
create (Improve_responsiveness_of_editor:issue {name:'Improve responsiveness of editor'}) create (Improve_responsiveness_of_editor)-[:Improvement]->(ant)
create (Improve_responsiveness_Improve_responsiveness_of_editor_responsiveness_of_editor_large_projects_candidate_step_keystroke___Improve_responsiveness_Improve_responsiveness_of_editor_responsiveness_of_editor_large_projects_candidate_step_have_significant_number_significant_number_number_of_steps_eclipse_plugin_following_pull_request_pull_request_pull_request_attempts_request_attempts_regarding_performance_performance_and_responsiveness_eclipse_plugin_Improved_responsiveness_Improved_responsiveness_of_editor_responsiveness_of_editor_large_projects_:issue {name:'Improve responsiveness - Improve responsiveness of editor - responsiveness of editor - large projects - candidate step - keystroke_ - Improve responsiveness - Improve responsiveness of editor - responsiveness of editor - large projects - candidate step - have significant number - significant number - number of steps - eclipse plugin - following pull request - pull request - pull request attempts - request attempts - regarding performance - performance and responsiveness - eclipse plugin - Improved responsiveness - Improved responsiveness of editor - responsiveness of editor - large projects - '}) create (Improve_responsiveness_Improve_responsiveness_of_editor_responsiveness_of_editor_large_projects_candidate_step_keystroke___Improve_responsiveness_Improve_responsiveness_of_editor_responsiveness_of_editor_large_projects_candidate_step_have_significant_number_significant_number_number_of_steps_eclipse_plugin_following_pull_request_pull_request_pull_request_attempts_request_attempts_regarding_performance_performance_and_responsiveness_eclipse_plugin_Improved_responsiveness_Improved_responsiveness_of_editor_responsiveness_of_editor_large_projects_)-[:Improvement]->(ant)
create (result_formatted_table:issue {name:'result formatted table'}) create (result_formatted_table)-[:Bug]->(ExamplesTable)
create (is_in_StepCreatorisTable_method:issue {name:'is in StepCreatorisTable method'}) create (is_in_StepCreatorisTable_method)-[:Improvement]->(ExamplesTable)
create (replace_ListSampleParameterClass_to_ExamplesTable_parameter:issue {name:'replace ListSampleParameterClass to ExamplesTable parameter'}) create (replace_ListSampleParameterClass_to_ExamplesTable_parameter)-[:Improvement]->(ExamplesTable)
create (additional_information:issue {name:'additional information'}) create (additional_information)-[:Bug]->(duration)
create (sum_of_duration:issue {name:'sum of duration'}) create (sum_of_duration)-[:Bug]->(duration)
create (have_single_thread:issue {name:'have single thread'}) create (have_single_thread)-[:Improvement]->(duration)
create (running_in_multi_threading_mode:issue {name:'running in multi - threading mode'}) create (running_in_multi_threading_mode)-[:Improvement]->(duration)
create (Story_duration_Story_duration_time_duration_time__threading_execution_threading_execution_threading_execution_mode_execution_mode__threading_mode_threading_mode_have_a_single_thread_single_thread_build_duration_use_multiple_threads_multiple_threads_number_of_threads_additional_information_average_duration_duration_per_thread_total_sum_story_durations_number_of_threads__threading_mode_threading_mode_:issue {name:'Story duration - Story duration time - duration time - -threading execution - threading execution - threading execution mode - execution mode - -threading mode - threading mode - have a single thread - single thread - build duration - use multiple threads - multiple threads - number of threads - additional information - average duration - duration per thread - total sum - story durations - number of threads - -threading mode - threading mode - '}) create (Story_duration_Story_duration_time_duration_time__threading_execution_threading_execution_threading_execution_mode_execution_mode__threading_mode_threading_mode_have_a_single_thread_single_thread_build_duration_use_multiple_threads_multiple_threads_number_of_threads_additional_information_average_duration_duration_per_thread_total_sum_story_durations_number_of_threads__threading_mode_threading_mode_)-[:Improvement]->(duration)
create (WARNING_Story:issue {name:'WARNING Story'}) create (WARNING_Story)-[:Bug]->(core)
create (starting_tests_web_browser:issue {name:'starting tests web browser'}) create (starting_tests_web_browser)-[:Improvement]->(core)
create (occurs_for_started_story:issue {name:'occurs for started story'}) create (occurs_for_started_story)-[:Improvement]->(core)
create (WARNING_Story)-[:Bug]->(after)
create (starting_tests_web_browser)-[:Improvement]->(after)
create (occurs_for_started_story)-[:Improvement]->(after)
create (WARNING_Story)-[:Bug]->(duration)
create (starting_tests_web_browser)-[:Improvement]->(duration)
create (occurs_for_started_story)-[:Improvement]->(duration)
create (WARNING_Story)-[:Bug]->(close)
create (starting_tests_web_browser)-[:Improvement]->(close)
create (occurs_for_started_story)-[:Improvement]->(close)
create (ONLY_stories:issue {name:'ONLY stories'}) create (ONLY_stories)-[:Bug]->(after)
create (scenario_of_stories:issue {name:'scenario of stories'}) create (scenario_of_stories)-[:Bug]->(after)
create (cancel_un_started_stories:issue {name:'cancel un - started stories'}) create (cancel_un_started_stories)-[:Improvement]->(after)
create (depend_on_race_condition:issue {name:'depend on race condition'}) create (depend_on_race_condition)-[:Improvement]->(after)
create (run_several_stories_in_parallel:issue {name:'run several stories in parallel'}) create (run_several_stories_in_parallel)-[:Improvement]->(after)
create (ONLY_stories)-[:Bug]->(scenario)
create (scenario_of_stories)-[:Bug]->(scenario)
create (cancel_un_started_stories)-[:Improvement]->(scenario)
create (depend_on_race_condition)-[:Improvement]->(scenario)
create (run_several_stories_in_parallel)-[:Improvement]->(scenario)
create (ONLY_stories)-[:Bug]->(scenario)
create (scenario_of_stories)-[:Bug]->(scenario)
create (cancel_un_started_stories)-[:Improvement]->(scenario)
create (depend_on_race_condition)-[:Improvement]->(scenario)
create (run_several_stories_in_parallel)-[:Improvement]->(scenario)
create (ONLY_stories)-[:Bug]->(BatchFailures)
create (scenario_of_stories)-[:Bug]->(BatchFailures)
create (cancel_un_started_stories)-[:Improvement]->(BatchFailures)
create (depend_on_race_condition)-[:Improvement]->(BatchFailures)
create (run_several_stories_in_parallel)-[:Improvement]->(BatchFailures)
create (LocalizedKeywordNotFound_exception:issue {name:'LocalizedKeywordNotFound exception'}) create (LocalizedKeywordNotFound_exception)-[:Bug]->(keywords)
create (Allow_localised_keywords:issue {name:'Allow localised keywords'}) create (Allow_localised_keywords)-[:Bug]->(keywords)
create (default_to_English_locale:issue {name:'default to English locale'}) create (default_to_English_locale)-[:Improvement]->(keywords)
create (facilitate_updates_of_bundles:issue {name:'facilitate updates of bundles'}) create (facilitate_updates_of_bundles)-[:Improvement]->(keywords)
create (localised_keywords_default_to_English_locale_English_locale_LocalizedKeywordNotFound_exception_chosen_locale_allow_the_lookup_allow_the_lookup_English_locale_facilitate_the_updates_facilitate_the_updates__English_locales_English_locales_:issue {name:'localised keywords - default to English locale - English locale - LocalizedKeywordNotFound exception - chosen locale - allow the lookup - allow the lookup - English locale - facilitate the updates - facilitate the updates - -English locales - English locales - '}) create (localised_keywords_default_to_English_locale_English_locale_LocalizedKeywordNotFound_exception_chosen_locale_allow_the_lookup_allow_the_lookup_English_locale_facilitate_the_updates_facilitate_the_updates__English_locales_English_locales_)-[:Improvement]->(keywords)
create (LocalizedKeywordNotFound_exception)-[:Bug]->(keywords)
create (Allow_localised_keywords)-[:Bug]->(keywords)
create (default_to_English_locale)-[:Improvement]->(keywords)
create (facilitate_updates_of_bundles)-[:Improvement]->(keywords)
create (localised_keywords_default_to_English_locale_English_locale_LocalizedKeywordNotFound_exception_chosen_locale_allow_the_lookup_allow_the_lookup_English_locale_facilitate_the_updates_facilitate_the_updates__English_locales_English_locales_)-[:Improvement]->(keywords)
create (Actual_result:issue {name:'Actual result'}) create (Actual_result)-[:Bug]->(failed)
create (test_with_Junit_annotation:issue {name:'test with Junit annotation'}) create (test_with_Junit_annotation)-[:Bug]->(failed)
create (Prepare_story:issue {name:'Prepare story'}) create (Prepare_story)-[:Improvement]->(failed)
create (be_In_first_scenario:issue {name:'be In first scenario'}) create (be_In_first_scenario)-[:Improvement]->(failed)
create (Prepare_story_with_scenarios:issue {name:'Prepare story with scenarios'}) create (Prepare_story_with_scenarios)-[:Improvement]->(failed)
create (Prepare_story_has_table_has_table_with_data_table_with_data_first_scenario_fail_a_scenario_fail_a_scenario_Expected_result_Actual_result_swap_scenarios_taken_from_last_scenario_last_scenario_:issue {name:'Prepare story - has table - has table with data - table with data - first scenario - fail a scenario - fail a scenario - Expected result - Actual result - swap scenarios - taken from last scenario - last scenario - '}) create (Prepare_story_has_table_has_table_with_data_table_with_data_first_scenario_fail_a_scenario_fail_a_scenario_Expected_result_Actual_result_swap_scenarios_taken_from_last_scenario_last_scenario_)-[:Bug]->(failed)
create (Actual_result)-[:Bug]->(scenario)
create (test_with_Junit_annotation)-[:Bug]->(scenario)
create (Prepare_story)-[:Improvement]->(scenario)
create (be_In_first_scenario)-[:Improvement]->(scenario)
create (Prepare_story_with_scenarios)-[:Improvement]->(scenario)
create (Prepare_story_has_table_has_table_with_data_table_with_data_first_scenario_fail_a_scenario_fail_a_scenario_Expected_result_Actual_result_swap_scenarios_taken_from_last_scenario_last_scenario_)-[:Bug]->(scenario)
create (Actual_result)-[:Bug]->(scenario)
create (test_with_Junit_annotation)-[:Bug]->(scenario)
create (Prepare_story)-[:Improvement]->(scenario)
create (be_In_first_scenario)-[:Improvement]->(scenario)
create (Prepare_story_with_scenarios)-[:Improvement]->(scenario)
create (Prepare_story_has_table_has_table_with_data_table_with_data_first_scenario_fail_a_scenario_fail_a_scenario_Expected_result_Actual_result_swap_scenarios_taken_from_last_scenario_last_scenario_)-[:Bug]->(scenario)
create (unmatched_dependency:issue {name:'unmatched dependency'}) create (unmatched_dependency)-[:Bug]->(jenkins)
create (plugin_broken_dependency_Current_jenkins_plugin:issue {name:'plugin broken dependency Current jenkins plugin'}) create (plugin_broken_dependency_Current_jenkins_plugin)-[:Bug]->(jenkins)
create (crashes_with_WARNING:issue {name:'crashes with WARNING'}) create (crashes_with_WARNING)-[:Improvement]->(jenkins)
create (works_great_modified_jenkins_package_without_problematic_code:issue {name:'works great modified jenkins package without problematic code'}) create (works_great_modified_jenkins_package_without_problematic_code)-[:Improvement]->(jenkins)
create (unmatched_dependency)-[:Bug]->(configuration)
create (plugin_broken_dependency_Current_jenkins_plugin)-[:Bug]->(configuration)
create (crashes_with_WARNING)-[:Improvement]->(configuration)
create (works_great_modified_jenkins_package_without_problematic_code)-[:Improvement]->(configuration)
create (unmatched_dependency)-[:Bug]->(failed)
create (plugin_broken_dependency_Current_jenkins_plugin)-[:Bug]->(failed)
create (crashes_with_WARNING)-[:Improvement]->(failed)
create (works_great_modified_jenkins_package_without_problematic_code)-[:Improvement]->(failed)
create (Printing_Lifecyle:issue {name:'Printing Lifecyle'}) create (Printing_Lifecyle)-[:Bug]->(org_jbehave_core)
create (contructor_for_Lifecycle:issue {name:'contructor for Lifecycle'}) create (contructor_for_Lifecycle)-[:Bug]->(org_jbehave_core)
create (provides_constructor:issue {name:'provides constructor'}) create (provides_constructor)-[:Improvement]->(org_jbehave_core)
create (creating_with_Step_value:issue {name:'creating with Step value'}) create (creating_with_Step_value)-[:Improvement]->(org_jbehave_core)
create (lifecycle_method_of_PrintStreamOutput_class:issue {name:'lifecycle method of PrintStreamOutput class'}) create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(org_jbehave_core)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_:issue {name:'Step value - printing the lifecyle - printing the lifecyle - provides a constructor - provides a constructor - create a Steps - create a Steps - Steps object - specifying an outcome - specifying an outcome - assigns the outcome - assigns the outcome - public StepsListString - public StepsListString steps - StepsListString steps - list of steps - cause a problem - cause a problem - lifecycleLifecycle method - public void lifecyleLifecycle - void lifecyleLifecycle - void lifecyleLifecycle lifecycle - lifecyleLifecycle lifecycle - Add a null check - null check - lifecycle method - skip printing - skip printing outcomes - printing outcomes - creating a step - creating a step - accepts Outcome - throw an exception - throw an exception - '}) create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(org_jbehave_core)
create (org_jbehave_core_annotations:package {name:'org_jbehave_core_annotations', favoritecolor: 'orange'}) create (Printing_Lifecyle)-[:Bug]->(org_jbehave_core_annotations)
create (contructor_for_Lifecycle)-[:Bug]->(org_jbehave_core_annotations)
create (provides_constructor)-[:Improvement]->(org_jbehave_core_annotations)
create (creating_with_Step_value)-[:Improvement]->(org_jbehave_core_annotations)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(org_jbehave_core_annotations)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(org_jbehave_core_annotations)
create (Printing_Lifecyle)-[:Bug]->(core)
create (contructor_for_Lifecycle)-[:Bug]->(core)
create (provides_constructor)-[:Improvement]->(core)
create (creating_with_Step_value)-[:Improvement]->(core)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(core)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(core)
create (Printing_Lifecyle)-[:Bug]->(keywords)
create (contructor_for_Lifecycle)-[:Bug]->(keywords)
create (provides_constructor)-[:Improvement]->(keywords)
create (creating_with_Step_value)-[:Improvement]->(keywords)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(keywords)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(keywords)
create (Printing_Lifecyle)-[:Bug]->(lifecycle)
create (contructor_for_Lifecycle)-[:Bug]->(lifecycle)
create (provides_constructor)-[:Improvement]->(lifecycle)
create (creating_with_Step_value)-[:Improvement]->(lifecycle)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(lifecycle)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(lifecycle)
create (Printing_Lifecyle)-[:Bug]->(outcome)
create (contructor_for_Lifecycle)-[:Bug]->(outcome)
create (provides_constructor)-[:Improvement]->(outcome)
create (creating_with_Step_value)-[:Improvement]->(outcome)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(outcome)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(outcome)
create (Printing_Lifecyle)-[:Bug]->(after)
create (contructor_for_Lifecycle)-[:Bug]->(after)
create (provides_constructor)-[:Improvement]->(after)
create (creating_with_Step_value)-[:Improvement]->(after)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(after)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(after)
create (Printing_Lifecyle)-[:Bug]->(lifecycle)
create (contructor_for_Lifecycle)-[:Bug]->(lifecycle)
create (provides_constructor)-[:Improvement]->(lifecycle)
create (creating_with_Step_value)-[:Improvement]->(lifecycle)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(lifecycle)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(lifecycle)
create (Printing_Lifecyle)-[:Bug]->(outcome)
create (contructor_for_Lifecycle)-[:Bug]->(outcome)
create (provides_constructor)-[:Improvement]->(outcome)
create (creating_with_Step_value)-[:Improvement]->(outcome)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(outcome)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(outcome)
create (Printing_Lifecyle)-[:Bug]->(print)
create (contructor_for_Lifecycle)-[:Bug]->(print)
create (provides_constructor)-[:Improvement]->(print)
create (creating_with_Step_value)-[:Improvement]->(print)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(print)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(print)
create (Printing_Lifecyle)-[:Bug]->(keywords)
create (contructor_for_Lifecycle)-[:Bug]->(keywords)
create (provides_constructor)-[:Improvement]->(keywords)
create (creating_with_Step_value)-[:Improvement]->(keywords)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(keywords)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(keywords)
create (Printing_Lifecyle)-[:Bug]->(initialize)
create (contructor_for_Lifecycle)-[:Bug]->(initialize)
create (provides_constructor)-[:Improvement]->(initialize)
create (creating_with_Step_value)-[:Improvement]->(initialize)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(initialize)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(initialize)
create (Printing_Lifecyle)-[:Bug]->(Lifecycle)
create (contructor_for_Lifecycle)-[:Bug]->(Lifecycle)
create (provides_constructor)-[:Improvement]->(Lifecycle)
create (creating_with_Step_value)-[:Improvement]->(Lifecycle)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(Lifecycle)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(Lifecycle)
create (Lifecycle_Steps:package {name:'Lifecycle_Steps', favoritecolor: 'orange'}) create (Printing_Lifecyle)-[:Bug]->(Lifecycle_Steps)
create (contructor_for_Lifecycle)-[:Bug]->(Lifecycle_Steps)
create (provides_constructor)-[:Improvement]->(Lifecycle_Steps)
create (creating_with_Step_value)-[:Improvement]->(Lifecycle_Steps)
create (lifecycle_method_of_PrintStreamOutput_class)-[:Improvement]->(Lifecycle_Steps)
create (Step_value_printing_the_lifecyle_printing_the_lifecyle_provides_a_constructor_provides_a_constructor_create_a_Steps_create_a_Steps_Steps_object_specifying_an_outcome_specifying_an_outcome_assigns_the_outcome_assigns_the_outcome_public_StepsListString_public_StepsListString_steps_StepsListString_steps_list_of_steps_cause_a_problem_cause_a_problem_lifecycleLifecycle_method_public_void_lifecyleLifecycle_void_lifecyleLifecycle_void_lifecyleLifecycle_lifecycle_lifecyleLifecycle_lifecycle_Add_a_null_check_null_check_lifecycle_method_skip_printing_skip_printing_outcomes_printing_outcomes_creating_a_step_creating_a_step_accepts_Outcome_throw_an_exception_throw_an_exception_)-[:Bug]->(Lifecycle_Steps)
create (regex_patterns:issue {name:'regex patterns'}) create (regex_patterns)-[:Bug]->(ant)
create (threshold_of_threshold:issue {name:'threshold of threshold'}) create (threshold_of_threshold)-[:Bug]->(ant)
create (match_steps:issue {name:'match steps'}) create (match_steps)-[:Improvement]->(ant)
create (make_for_duplication:issue {name:'make for duplication'}) create (make_for_duplication)-[:Improvement]->(ant)
create (have_unique_syntax_for_parameters:issue {name:'have unique syntax for parameters'}) create (have_unique_syntax_for_parameters)-[:Improvement]->(ant)
create (regex_patterns)-[:Bug]->(scenario)
create (threshold_of_threshold)-[:Bug]->(scenario)
create (match_steps)-[:Improvement]->(scenario)
create (make_for_duplication)-[:Improvement]->(scenario)
create (have_unique_syntax_for_parameters)-[:Improvement]->(scenario)
create (regex_patterns)-[:Bug]->(scenario)
create (threshold_of_threshold)-[:Bug]->(scenario)
create (match_steps)-[:Improvement]->(scenario)
create (make_for_duplication)-[:Improvement]->(scenario)
create (have_unique_syntax_for_parameters)-[:Improvement]->(scenario)
create (support_test_steps:issue {name:'support test steps'}) create (support_test_steps)-[:Improvement]->(org_jbehave_core)
create (support_test_steps_with_lambda_expressions:issue {name:'support test steps with lambda expressions'}) create (support_test_steps_with_lambda_expressions)-[:Improvement]->(org_jbehave_core)
create (support_test_steps)-[:Improvement]->(org_jbehave_core_annotations)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(org_jbehave_core_annotations)
create (support_test_steps)-[:Improvement]->(org_jbehave_core_embedder)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(org_jbehave_core_embedder)
create (support_test_steps)-[:Improvement]->(org_jbehave_core_model)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(org_jbehave_core_model)
create (support_test_steps)-[:Improvement]->(org_jbehave_core_steps)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(org_jbehave_core_steps)
create (support_test_steps)-[:Improvement]->(core)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(core)
create (support_test_steps)-[:Improvement]->(embedder)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(embedder)
create (support_test_steps)-[:Improvement]->(paranamer)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(paranamer)
create (support_test_steps)-[:Improvement]->(print)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(print)
create (support_test_steps)-[:Improvement]->(paranamer)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(paranamer)
create (support_test_steps)-[:Improvement]->(ExamplesTable)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(ExamplesTable)
create (support_test_steps)-[:Improvement]->(Lifecycle)
create (support_test_steps_with_lambda_expressions)-[:Improvement]->(Lifecycle)
create (Using_lazy_initialisation:issue {name:'Using lazy initialisation'}) create (Using_lazy_initialisation)-[:Bug]->(ant)
create (Using_lazy_initialisation_of_attributes:issue {name:'Using lazy initialisation of attributes'}) create (Using_lazy_initialisation_of_attributes)-[:Bug]->(ant)
create (Improve_extensibility:issue {name:'Improve extensibility'}) create (Improve_extensibility)-[:Improvement]->(ant)
create (Improve_extensibility_of_Configuration_elements:issue {name:'Improve extensibility of Configuration elements'}) create (Improve_extensibility_of_Configuration_elements)-[:Improvement]->(ant)
create (Improve_extensibility_elements_in_order_avoid_race_condition_in_OSGi_set_methods_improve_the_way_improve_the_way_way_elements_Raising_the_attributes_Raising_the_attributes_initialisation_of_attributes_:issue {name:'Improve extensibility - elements In order - avoid race - condition in OSGi - set methods - improve the way - improve the way - way elements - Raising the attributes - Raising the attributes - initialisation of attributes - '}) create (Improve_extensibility_elements_in_order_avoid_race_condition_in_OSGi_set_methods_improve_the_way_improve_the_way_way_elements_Raising_the_attributes_Raising_the_attributes_initialisation_of_attributes_)-[:Improvement]->(ant)
create (GivenStories_JBehave:issue {name:'GivenStories JBehave'}) create (GivenStories_JBehave)-[:Bug]->(parameterConverters)
create (case_of_story:issue {name:'case of story'}) create (case_of_story)-[:Bug]->(parameterConverters)
create (parse_test_results:issue {name:'parse test results'}) create (parse_test_results)-[:Improvement]->(parameterConverters)
create (GivenStories_JBehave)-[:Bug]->(core)
create (case_of_story)-[:Bug]->(core)
create (parse_test_results)-[:Improvement]->(core)
create (GivenStories_JBehave)-[:Bug]->(configuration)
create (case_of_story)-[:Bug]->(configuration)
create (parse_test_results)-[:Improvement]->(configuration)
create (GivenStories_JBehave)-[:Bug]->(embedder)
create (case_of_story)-[:Bug]->(embedder)
create (parse_test_results)-[:Improvement]->(embedder)
create (GivenStories_JBehave)-[:Bug]->(parameterConverters)
create (case_of_story)-[:Bug]->(parameterConverters)
create (parse_test_results)-[:Improvement]->(parameterConverters)
create (GivenStories_JBehave)-[:Bug]->(StoryReporterBuilder)
create (case_of_story)-[:Bug]->(StoryReporterBuilder)
create (parse_test_results)-[:Improvement]->(StoryReporterBuilder)
create (examplesTableFactory:class {name:'examplesTableFactory', favoritecolor: 'green'}) create (GivenStories_JBehave)-[:Bug]->(examplesTableFactory)
create (case_of_story)-[:Bug]->(examplesTableFactory)
create (parse_test_results)-[:Improvement]->(examplesTableFactory)
create (GivenStories_JBehave)-[:Bug]->(parameterConverters)
create (case_of_story)-[:Bug]->(parameterConverters)
create (parse_test_results)-[:Improvement]->(parameterConverters)
create (GivenStories_JBehave)-[:Bug]->(useParameterConverters)
create (case_of_story)-[:Bug]->(useParameterConverters)
create (parse_test_results)-[:Improvement]->(useParameterConverters)
create (GivenStories_JBehave)-[:Bug]->(useStepMonitor)
create (case_of_story)-[:Bug]->(useStepMonitor)
create (parse_test_results)-[:Improvement]->(useStepMonitor)
create (GivenStories_JBehave)-[:Bug]->(useStoryLoader)
create (case_of_story)-[:Bug]->(useStoryLoader)
create (parse_test_results)-[:Improvement]->(useStoryLoader)
create (GivenStories_JBehave)-[:Bug]->(useStoryParser)
create (case_of_story)-[:Bug]->(useStoryParser)
create (parse_test_results)-[:Improvement]->(useStoryParser)
create (GivenStories_JBehave)-[:Bug]->(useStoryReporterBuilder)
create (case_of_story)-[:Bug]->(useStoryReporterBuilder)
create (parse_test_results)-[:Improvement]->(useStoryReporterBuilder)
create (GivenStories_JBehave)-[:Bug]->(examplesTable)
create (case_of_story)-[:Bug]->(examplesTable)
create (parse_test_results)-[:Improvement]->(examplesTable)
create (GivenStories_JBehave)-[:Bug]->(duration)
create (case_of_story)-[:Bug]->(duration)
create (parse_test_results)-[:Improvement]->(duration)
create (GivenStories_JBehave)-[:Bug]->(examplesTable)
create (case_of_story)-[:Bug]->(examplesTable)
create (parse_test_results)-[:Improvement]->(examplesTable)
create (GivenStories_JBehave)-[:Bug]->(scenario)
create (case_of_story)-[:Bug]->(scenario)
create (parse_test_results)-[:Improvement]->(scenario)
create (GivenStories_JBehave)-[:Bug]->(scenario)
create (case_of_story)-[:Bug]->(scenario)
create (parse_test_results)-[:Improvement]->(scenario)
create (GivenStories_JBehave)-[:Bug]->(StoryReporterBuilder)
create (case_of_story)-[:Bug]->(StoryReporterBuilder)
create (parse_test_results)-[:Improvement]->(StoryReporterBuilder)
create (GivenStories_JBehave)-[:Bug]->(StoryReporterBuilder)
create (case_of_story)-[:Bug]->(StoryReporterBuilder)
create (parse_test_results)-[:Improvement]->(StoryReporterBuilder)
create (GivenStories_JBehave)-[:Bug]->(examplesTableFactory)
create (case_of_story)-[:Bug]->(examplesTableFactory)
create (parse_test_results)-[:Improvement]->(examplesTableFactory)
create (GivenStories_JBehave)-[:Bug]->(parameterConverters)
create (case_of_story)-[:Bug]->(parameterConverters)
create (parse_test_results)-[:Improvement]->(parameterConverters)
create (GivenStories_JBehave)-[:Bug]->(useParameterConverters)
create (case_of_story)-[:Bug]->(useParameterConverters)
create (parse_test_results)-[:Improvement]->(useParameterConverters)
create (GivenStories_JBehave)-[:Bug]->(useStepMonitor)
create (case_of_story)-[:Bug]->(useStepMonitor)
create (parse_test_results)-[:Improvement]->(useStepMonitor)
create (useStepPatternParser:class {name:'useStepPatternParser', favoritecolor: 'green'}) create (GivenStories_JBehave)-[:Bug]->(useStepPatternParser)
create (case_of_story)-[:Bug]->(useStepPatternParser)
create (parse_test_results)-[:Improvement]->(useStepPatternParser)
create (GivenStories_JBehave)-[:Bug]->(useStoryLoader)
create (case_of_story)-[:Bug]->(useStoryLoader)
create (parse_test_results)-[:Improvement]->(useStoryLoader)
create (GivenStories_JBehave)-[:Bug]->(useStoryParser)
create (case_of_story)-[:Bug]->(useStoryParser)
create (parse_test_results)-[:Improvement]->(useStoryParser)
create (GivenStories_JBehave)-[:Bug]->(useStoryReporterBuilder)
create (case_of_story)-[:Bug]->(useStoryReporterBuilder)
create (parse_test_results)-[:Improvement]->(useStoryReporterBuilder)
create (GivenStories_JBehave)-[:Bug]->(show)
create (case_of_story)-[:Bug]->(show)
create (parse_test_results)-[:Improvement]->(show)
create (GivenStories_JBehave)-[:Bug]->(LocalizedKeywords)
create (case_of_story)-[:Bug]->(LocalizedKeywords)
create (parse_test_results)-[:Improvement]->(LocalizedKeywords)
create (GivenStories_JBehave)-[:Bug]->(CodeLocations)
create (case_of_story)-[:Bug]->(CodeLocations)
create (parse_test_results)-[:Improvement]->(CodeLocations)
create (GivenStories_JBehave)-[:Bug]->(LoadFromClasspath)
create (case_of_story)-[:Bug]->(LoadFromClasspath)
create (parse_test_results)-[:Improvement]->(LoadFromClasspath)
create (GivenStories_JBehave)-[:Bug]->(ExamplesTable)
create (case_of_story)-[:Bug]->(ExamplesTable)
create (parse_test_results)-[:Improvement]->(ExamplesTable)
create (GivenStories_JBehave)-[:Bug]->(GivenStories)
create (case_of_story)-[:Bug]->(GivenStories)
create (parse_test_results)-[:Improvement]->(GivenStories)
create (Weird_behaviour:issue {name:'Weird behaviour'}) create (Weird_behaviour)-[:Bug]->(failed)
create (Sources_for_project_issue_Issues:issue {name:'Sources for project issue Issues'}) create (Sources_for_project_issue_Issues)-[:Bug]->(failed)
create (break_build)-[:Improvement]->(failed)
create (happens_despite_doFailOnStoryTimeoutfalse:issue {name:'happens despite doFailOnStoryTimeoutfalse'}) create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(failed)
create (break_build_in_CI_system:issue {name:'break build in CI system'}) create (break_build_in_CI_system)-[:Improvement]->(failed)
create (Weird_behaviour)-[:Bug]->(given)
create (Sources_for_project_issue_Issues)-[:Bug]->(given)
create (break_build)-[:Improvement]->(given)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(given)
create (break_build_in_CI_system)-[:Improvement]->(given)
create (Weird_behaviour)-[:Bug]->(outcome)
create (Sources_for_project_issue_Issues)-[:Bug]->(outcome)
create (break_build)-[:Improvement]->(outcome)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(outcome)
create (break_build_in_CI_system)-[:Improvement]->(outcome)
create (Weird_behaviour)-[:Bug]->(after)
create (Sources_for_project_issue_Issues)-[:Bug]->(after)
create (break_build)-[:Improvement]->(after)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(after)
create (break_build_in_CI_system)-[:Improvement]->(after)
create (Weird_behaviour)-[:Bug]->(outcome)
create (Sources_for_project_issue_Issues)-[:Bug]->(outcome)
create (break_build)-[:Improvement]->(outcome)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(outcome)
create (break_build_in_CI_system)-[:Improvement]->(outcome)
create (Weird_behaviour)-[:Bug]->(pending)
create (Sources_for_project_issue_Issues)-[:Bug]->(pending)
create (break_build)-[:Improvement]->(pending)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(pending)
create (break_build_in_CI_system)-[:Improvement]->(pending)
create (Weird_behaviour)-[:Bug]->(scenario)
create (Sources_for_project_issue_Issues)-[:Bug]->(scenario)
create (break_build)-[:Improvement]->(scenario)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(scenario)
create (break_build_in_CI_system)-[:Improvement]->(scenario)
create (Weird_behaviour)-[:Bug]->(pending)
create (Sources_for_project_issue_Issues)-[:Bug]->(pending)
create (break_build)-[:Improvement]->(pending)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(pending)
create (break_build_in_CI_system)-[:Improvement]->(pending)
create (Weird_behaviour)-[:Bug]->(scenario)
create (Sources_for_project_issue_Issues)-[:Bug]->(scenario)
create (break_build)-[:Improvement]->(scenario)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(scenario)
create (break_build_in_CI_system)-[:Improvement]->(scenario)
create (Weird_behaviour)-[:Bug]->(show)
create (Sources_for_project_issue_Issues)-[:Bug]->(show)
create (break_build)-[:Improvement]->(show)
create (happens_despite_doFailOnStoryTimeoutfalse)-[:Improvement]->(show)
create (break_build_in_CI_system)-[:Improvement]->(show)
create (step_method)-[:Bug]->(core)
create (aliases_for_Cucumber_RbDslregister_rb_step_definition:issue {name:'aliases for Cucumber RbDslregister_rb_step_definition'}) create (aliases_for_Cucumber_RbDslregister_rb_step_definition)-[:Bug]->(core)
create (noticing_duplication:issue {name:'noticing duplication'}) create (noticing_duplication)-[:Improvement]->(core)
create (working_with_jbehave:issue {name:'working with jbehave'}) create (working_with_jbehave)-[:Improvement]->(core)
create (express_intent_of_step_definition:issue {name:'express intent of step definition'}) create (express_intent_of_step_definition)-[:Improvement]->(core)
create (step_method)-[:Bug]->(ant)
create (aliases_for_Cucumber_RbDslregister_rb_step_definition)-[:Bug]->(ant)
create (noticing_duplication)-[:Improvement]->(ant)
create (working_with_jbehave)-[:Improvement]->(ant)
create (express_intent_of_step_definition)-[:Improvement]->(ant)
create (step_method)-[:Bug]->(keywords)
create (aliases_for_Cucumber_RbDslregister_rb_step_definition)-[:Bug]->(keywords)
create (noticing_duplication)-[:Improvement]->(keywords)
create (working_with_jbehave)-[:Improvement]->(keywords)
create (express_intent_of_step_definition)-[:Improvement]->(keywords)
create (step_method)-[:Bug]->(given)
create (aliases_for_Cucumber_RbDslregister_rb_step_definition)-[:Bug]->(given)
create (noticing_duplication)-[:Improvement]->(given)
create (working_with_jbehave)-[:Improvement]->(given)
create (express_intent_of_step_definition)-[:Improvement]->(given)
create (step_method)-[:Bug]->(scenario)
create (aliases_for_Cucumber_RbDslregister_rb_step_definition)-[:Bug]->(scenario)
create (noticing_duplication)-[:Improvement]->(scenario)
create (working_with_jbehave)-[:Improvement]->(scenario)
create (express_intent_of_step_definition)-[:Improvement]->(scenario)
create (step_method)-[:Bug]->(scenario)
create (aliases_for_Cucumber_RbDslregister_rb_step_definition)-[:Bug]->(scenario)
create (noticing_duplication)-[:Improvement]->(scenario)
create (working_with_jbehave)-[:Improvement]->(scenario)
create (express_intent_of_step_definition)-[:Improvement]->(scenario)
create (step_method)-[:Bug]->(keywords)
create (aliases_for_Cucumber_RbDslregister_rb_step_definition)-[:Bug]->(keywords)
create (noticing_duplication)-[:Improvement]->(keywords)
create (working_with_jbehave)-[:Improvement]->(keywords)
create (express_intent_of_step_definition)-[:Improvement]->(keywords)
create (entire_story:issue {name:'entire story'}) create (entire_story)-[:Bug]->(scenario)
create (keep_same_browser_context:issue {name:'keep same browser context'}) create (keep_same_browser_context)-[:Bug]->(scenario)
create (go_as_network_latency:issue {name:'go as network latency'}) create (go_as_network_latency)-[:Improvement]->(scenario)
create (restart_amount_of_times:issue {name:'restart amount of times'}) create (restart_amount_of_times)-[:Improvement]->(scenario)
create (Allow_entire_story_entire_story_selenium_tests_keep_the_same_browser_same_browser_are_countless_things_countless_things_network_latency_slow_application_cause_people_lose_trust_amount_of_times_failing_the_test_failing_the_test_is_a_way_is_a_way_restart_a_single_scenario_single_scenario_cause_additional_errors_additional_errors_specific_page_context_variables_unknown_state_state_with_data_:issue {name:'Allow entire story - entire story - selenium tests - keep the same browser - same browser - are countless things - countless things - network latency - slow application - cause people - lose trust - amount of times - failing the test - failing the test - is a way - is a way - restart a single scenario - single scenario - cause additional errors - additional errors - specific page - context variables - unknown state - state with data - '}) create (Allow_entire_story_entire_story_selenium_tests_keep_the_same_browser_same_browser_are_countless_things_countless_things_network_latency_slow_application_cause_people_lose_trust_amount_of_times_failing_the_test_failing_the_test_is_a_way_is_a_way_restart_a_single_scenario_single_scenario_cause_additional_errors_additional_errors_specific_page_context_variables_unknown_state_state_with_data_)-[:Improvement]->(scenario)
create (entire_story)-[:Bug]->(scenario)
create (keep_same_browser_context)-[:Bug]->(scenario)
create (go_as_network_latency)-[:Improvement]->(scenario)
create (restart_amount_of_times)-[:Improvement]->(scenario)
create (Allow_entire_story_entire_story_selenium_tests_keep_the_same_browser_same_browser_are_countless_things_countless_things_network_latency_slow_application_cause_people_lose_trust_amount_of_times_failing_the_test_failing_the_test_is_a_way_is_a_way_restart_a_single_scenario_single_scenario_cause_additional_errors_additional_errors_specific_page_context_variables_unknown_state_state_with_data_)-[:Improvement]->(scenario)
create (NullPointerException_with_JUnit:issue {name:'NullPointerException with JUnit'}) create (NullPointerException_with_JUnit)-[:Bug]->(org_jbehave_core)
create (using_JUnit:issue {name:'using JUnit'}) create (using_JUnit)-[:Improvement]->(org_jbehave_core)
create (returns_new_array_list_of_children:issue {name:'returns new array list of children'}) create (returns_new_array_list_of_children)-[:Improvement]->(org_jbehave_core)
create (build_the_reporting_build_the_reporting_following_line_private_void_initRootDescription_void_initRootDescription_returns_a_new_array_new_array_new_array_list_array_list_list_of_children_doing_addAll_add_the_children_add_the_children_actual_list_offer_a_method_offer_a_method_method_addChild_using_this_method_using_this_method_solve_this_issue_solve_this_issue_:issue {name:'build the reporting - build the reporting - following line - private void initRootDescription - void initRootDescription - returns a new array - new array - new array list - array list - list of children - doing addAll - add the children - add the children - actual list - offer a method - offer a method - method addChild - using this method - using this method - solve this issue - solve this issue - '}) create (build_the_reporting_build_the_reporting_following_line_private_void_initRootDescription_void_initRootDescription_returns_a_new_array_new_array_new_array_list_array_list_list_of_children_doing_addAll_add_the_children_add_the_children_actual_list_offer_a_method_offer_a_method_method_addChild_using_this_method_using_this_method_solve_this_issue_solve_this_issue_)-[:Improvement]->(org_jbehave_core)
create (NullPointerException_with_JUnit)-[:Bug]->(org_jbehave_core_embedder)
create (using_JUnit)-[:Improvement]->(org_jbehave_core_embedder)
create (returns_new_array_list_of_children)-[:Improvement]->(org_jbehave_core_embedder)
create (build_the_reporting_build_the_reporting_following_line_private_void_initRootDescription_void_initRootDescription_returns_a_new_array_new_array_new_array_list_array_list_list_of_children_doing_addAll_add_the_children_add_the_children_actual_list_offer_a_method_offer_a_method_method_addChild_using_this_method_using_this_method_solve_this_issue_solve_this_issue_)-[:Improvement]->(org_jbehave_core_embedder)
create (NullPointerException_with_JUnit)-[:Bug]->(org_jbehave_core_reporters)
create (using_JUnit)-[:Improvement]->(org_jbehave_core_reporters)
create (returns_new_array_list_of_children)-[:Improvement]->(org_jbehave_core_reporters)
create (build_the_reporting_build_the_reporting_following_line_private_void_initRootDescription_void_initRootDescription_returns_a_new_array_new_array_new_array_list_array_list_list_of_children_doing_addAll_add_the_children_add_the_children_actual_list_offer_a_method_offer_a_method_method_addChild_using_this_method_using_this_method_solve_this_issue_solve_this_issue_)-[:Improvement]->(org_jbehave_core_reporters)
create (NullPointerException_with_JUnit)-[:Bug]->(core)
create (using_JUnit)-[:Improvement]->(core)
create (returns_new_array_list_of_children)-[:Improvement]->(core)
create (build_the_reporting_build_the_reporting_following_line_private_void_initRootDescription_void_initRootDescription_returns_a_new_array_new_array_new_array_list_array_list_list_of_children_doing_addAll_add_the_children_add_the_children_actual_list_offer_a_method_offer_a_method_method_addChild_using_this_method_using_this_method_solve_this_issue_solve_this_issue_)-[:Improvement]->(core)
create (NullPointerException_with_JUnit)-[:Bug]->(embedder)
create (using_JUnit)-[:Improvement]->(embedder)
create (returns_new_array_list_of_children)-[:Improvement]->(embedder)
create (build_the_reporting_build_the_reporting_following_line_private_void_initRootDescription_void_initRootDescription_returns_a_new_array_new_array_new_array_list_array_list_list_of_children_doing_addAll_add_the_children_add_the_children_actual_list_offer_a_method_offer_a_method_method_addChild_using_this_method_using_this_method_solve_this_issue_solve_this_issue_)-[:Improvement]->(embedder)
create (NullPointerException_with_JUnit)-[:Bug]->(after)
create (using_JUnit)-[:Improvement]->(after)
create (returns_new_array_list_of_children)-[:Improvement]->(after)
create (build_the_reporting_build_the_reporting_following_line_private_void_initRootDescription_void_initRootDescription_returns_a_new_array_new_array_new_array_list_array_list_list_of_children_doing_addAll_add_the_children_add_the_children_actual_list_offer_a_method_offer_a_method_method_addChild_using_this_method_using_this_method_solve_this_issue_solve_this_issue_)-[:Improvement]->(after)
create (Update_toString:issue {name:'Update toString'}) create (Update_toString)-[:Bug]->(core)
create (show_based_values:issue {name:'show based values'}) create (show_based_values)-[:Bug]->(core)
create (Update_toString)-[:Bug]->(embedder)
create (show_based_values)-[:Bug]->(embedder)
create (Update_toString)-[:Bug]->(toString)
create (show_based_values)-[:Bug]->(toString)
create (Update_toString)-[:Bug]->(toString)
create (show_based_values)-[:Bug]->(toString)
create (Update_toString)-[:Bug]->(show)
create (show_based_values)-[:Bug]->(show)
create (introduced_ScenarioType:issue {name:'introduced ScenarioType'}) create (introduced_ScenarioType)-[:Bug]->(pending)
create (difference_between_scenario:issue {name:'difference between scenario'}) create (difference_between_scenario)-[:Bug]->(pending)
create (submit_PR:issue {name:'submit PR'}) create (submit_PR)-[:Improvement]->(pending)
create (apply_by_default:issue {name:'apply by default'}) create (apply_by_default)-[:Improvement]->(pending)
create (example_table_example_table_default_value_value_for_uponType_uponType_default_domain_point_point_of_view_is_no_difference_is_no_difference_scenario_with_example_example_table_scenarios_scenario_with_example_example_table_scenario_template_result_in_many_scenarios_many_scenarios_example_table_submit_a_PR_submit_a_PR_:issue {name:'example table - example table - default value - value for uponType - uponType default - domain point - point of view - is no difference - is no difference - scenario with example - example table - scenarios - scenario with example - example table - scenario template - result in many scenarios - many scenarios - example table - submit a PR - submit a PR - '}) create (example_table_example_table_default_value_value_for_uponType_uponType_default_domain_point_point_of_view_is_no_difference_is_no_difference_scenario_with_example_example_table_scenarios_scenario_with_example_example_table_scenario_template_result_in_many_scenarios_many_scenarios_example_table_submit_a_PR_submit_a_PR_)-[:Improvement]->(pending)
create (introduced_ScenarioType)-[:Bug]->(scenario)
create (difference_between_scenario)-[:Bug]->(scenario)
create (submit_PR)-[:Improvement]->(scenario)
create (apply_by_default)-[:Improvement]->(scenario)
create (example_table_example_table_default_value_value_for_uponType_uponType_default_domain_point_point_of_view_is_no_difference_is_no_difference_scenario_with_example_example_table_scenarios_scenario_with_example_example_table_scenario_template_result_in_many_scenarios_many_scenarios_example_table_submit_a_PR_submit_a_PR_)-[:Improvement]->(scenario)
create (introduced_ScenarioType)-[:Bug]->(pending)
create (difference_between_scenario)-[:Bug]->(pending)
create (submit_PR)-[:Improvement]->(pending)
create (apply_by_default)-[:Improvement]->(pending)
create (example_table_example_table_default_value_value_for_uponType_uponType_default_domain_point_point_of_view_is_no_difference_is_no_difference_scenario_with_example_example_table_scenarios_scenario_with_example_example_table_scenario_template_result_in_many_scenarios_many_scenarios_example_table_submit_a_PR_submit_a_PR_)-[:Improvement]->(pending)
create (introduced_ScenarioType)-[:Bug]->(scenario)
create (difference_between_scenario)-[:Bug]->(scenario)
create (submit_PR)-[:Improvement]->(scenario)
create (apply_by_default)-[:Improvement]->(scenario)
create (example_table_example_table_default_value_value_for_uponType_uponType_default_domain_point_point_of_view_is_no_difference_is_no_difference_scenario_with_example_example_table_scenarios_scenario_with_example_example_table_scenario_template_result_in_many_scenarios_many_scenarios_example_table_submit_a_PR_submit_a_PR_)-[:Improvement]->(scenario)
create (INFO_Generating:issue {name:'INFO Generating'}) create (INFO_Generating)-[:Bug]->(maven)
create (generating_reports_on_maven_build:issue {name:'generating reports on maven build'}) create (generating_reports_on_maven_build)-[:Improvement]->(maven)
create (Beforeafter_scenario:issue {name:'Beforeafter scenario'}) create (Beforeafter_scenario)-[:Bug]->(lifecycle)
create (contains_BeforeAfter_steps:issue {name:'contains BeforeAfter steps'}) create (contains_BeforeAfter_steps)-[:Bug]->(lifecycle)
create (patch_with_fix:issue {name:'patch with fix'}) create (patch_with_fix)-[:Improvement]->(lifecycle)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_:issue {name:'Beforeafter scenario - Beforeafter scenario steps - scenario steps - steps and lifecycle - steps and lifecycle steps - lifecycle steps - executed in wrong order - wrong order - BeforeScenarioAfterScenario scope - scope for scenarios - reverse order - fix and test - '}) create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(lifecycle)
create (Beforeafter_scenario)-[:Bug]->(after)
create (contains_BeforeAfter_steps)-[:Bug]->(after)
create (patch_with_fix)-[:Improvement]->(after)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(after)
create (Beforeafter_scenario)-[:Bug]->(lifecycle)
create (contains_BeforeAfter_steps)-[:Bug]->(lifecycle)
create (patch_with_fix)-[:Improvement]->(lifecycle)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(lifecycle)
create (Beforeafter_scenario)-[:Bug]->(scenario)
create (contains_BeforeAfter_steps)-[:Bug]->(scenario)
create (patch_with_fix)-[:Improvement]->(scenario)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(scenario)
create (Beforeafter_scenario)-[:Bug]->(scope)
create (contains_BeforeAfter_steps)-[:Bug]->(scope)
create (patch_with_fix)-[:Improvement]->(scope)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(scope)
create (Beforeafter_scenario)-[:Bug]->(scenario)
create (contains_BeforeAfter_steps)-[:Bug]->(scenario)
create (patch_with_fix)-[:Improvement]->(scenario)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(scenario)
create (Beforeafter_scenario)-[:Bug]->(scope)
create (contains_BeforeAfter_steps)-[:Bug]->(scope)
create (patch_with_fix)-[:Improvement]->(scope)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(scope)
create (Beforeafter_scenario)-[:Bug]->(Lifecycle)
create (contains_BeforeAfter_steps)-[:Bug]->(Lifecycle)
create (patch_with_fix)-[:Improvement]->(Lifecycle)
create (Beforeafter_scenario_Beforeafter_scenario_steps_scenario_steps_steps_and_lifecycle_steps_and_lifecycle_steps_lifecycle_steps_executed_in_wrong_order_wrong_order_BeforeScenarioAfterScenario_scope_scope_for_scenarios_reverse_order_fix_and_test_)-[:Improvement]->(Lifecycle)
create (public_void)-[:Bug]->(ant)
create (code_at_same_time:issue {name:'code at same time'}) create (code_at_same_time)-[:Bug]->(ant)
create (using_constant_inside_annotations:issue {name:'using constant inside annotations'}) create (using_constant_inside_annotations)-[:Improvement]->(ant)
create (says_in_JBehave_Eclipse_Editor:issue {name:'says in JBehave Eclipse Editor'}) create (says_in_JBehave_Eclipse_Editor)-[:Improvement]->(ant)
create (using_constant_inside_annotations_With_JBehave:issue {name:'using constant inside annotations With JBehave'}) create (using_constant_inside_annotations_With_JBehave)-[:Improvement]->(ant)
create (have_story:issue {name:'have story'}) create (have_story)-[:Improvement]->(GivenStories)
create (using_correct_WebDriverProvider_with_appropriate_credentials:issue {name:'using correct WebDriverProvider with appropriate credentials'}) create (using_correct_WebDriverProvider_with_appropriate_credentials)-[:Improvement]->(GivenStories)
create (Add_ScenarioType:issue {name:'Add ScenarioType'}) create (Add_ScenarioType)-[:Bug]->(ant)
create (name_of_enum:issue {name:'name of enum'}) create (name_of_enum)-[:Bug]->(ant)
create (run_beforeafter:issue {name:'run beforeafter'}) create (run_beforeafter)-[:Improvement]->(ant)
create (define_Before_Scenario_step:issue {name:'define Before Scenario step'}) create (define_Before_Scenario_step)-[:Improvement]->(ant)
create (using_term_for_row:issue {name:'using term for row'}) create (using_term_for_row)-[:Improvement]->(ant)
create (run_beforeafter_has_parameter_scenario_cases_scenario_case_using_the_term_using_the_term_scenario_case_examples_table_table_in_case_parametrised_scenarios_scenario_case_first_scenario_first_scenario_case_scenario_case_public_void_public_void_beforeScenario_void_beforeScenario_do_some_stuff_do_some_stuff_public_void_beforeExample_void_beforeExample_are_some_ways_are_some_ways_Add_another_value_Add_another_value_more_work_more_work_Add_work_Add_more_work_Add_annotation_work_Add_annotation_Add_annotation_submit_a_patch_submit_a_patch_:issue {name:'run beforeafter - has parameter - scenario cases - scenario case - using the term - using the term - scenario case - examples table - table in case - parametrised scenarios - scenario case - first scenario - first scenario case - scenario case - public void - public void beforeScenario - void beforeScenario - do some stuff - do some stuff - public void beforeExample - void beforeExample - are some ways - are some ways - Add another value - Add another value - more work - more work Add - work Add - more work Add annotation - work Add annotation - Add annotation - submit a patch - submit a patch - '}) create (run_beforeafter_has_parameter_scenario_cases_scenario_case_using_the_term_using_the_term_scenario_case_examples_table_table_in_case_parametrised_scenarios_scenario_case_first_scenario_first_scenario_case_scenario_case_public_void_public_void_beforeScenario_void_beforeScenario_do_some_stuff_do_some_stuff_public_void_beforeExample_void_beforeExample_are_some_ways_are_some_ways_Add_another_value_Add_another_value_more_work_more_work_Add_work_Add_more_work_Add_annotation_work_Add_annotation_Add_annotation_submit_a_patch_submit_a_patch_)-[:Bug]->(ant)
create (Add_ScenarioType)-[:Bug]->(after)
create (name_of_enum)-[:Bug]->(after)
create (run_beforeafter)-[:Improvement]->(after)
create (define_Before_Scenario_step)-[:Improvement]->(after)
create (using_term_for_row)-[:Improvement]->(after)
create (run_beforeafter_has_parameter_scenario_cases_scenario_case_using_the_term_using_the_term_scenario_case_examples_table_table_in_case_parametrised_scenarios_scenario_case_first_scenario_first_scenario_case_scenario_case_public_void_public_void_beforeScenario_void_beforeScenario_do_some_stuff_do_some_stuff_public_void_beforeExample_void_beforeExample_are_some_ways_are_some_ways_Add_another_value_Add_another_value_more_work_more_work_Add_work_Add_more_work_Add_annotation_work_Add_annotation_Add_annotation_submit_a_patch_submit_a_patch_)-[:Bug]->(after)
create (Add_ScenarioType)-[:Bug]->(scenario)
create (name_of_enum)-[:Bug]->(scenario)
create (run_beforeafter)-[:Improvement]->(scenario)
create (define_Before_Scenario_step)-[:Improvement]->(scenario)
create (using_term_for_row)-[:Improvement]->(scenario)
create (run_beforeafter_has_parameter_scenario_cases_scenario_case_using_the_term_using_the_term_scenario_case_examples_table_table_in_case_parametrised_scenarios_scenario_case_first_scenario_first_scenario_case_scenario_case_public_void_public_void_beforeScenario_void_beforeScenario_do_some_stuff_do_some_stuff_public_void_beforeExample_void_beforeExample_are_some_ways_are_some_ways_Add_another_value_Add_another_value_more_work_more_work_Add_work_Add_more_work_Add_annotation_work_Add_annotation_Add_annotation_submit_a_patch_submit_a_patch_)-[:Bug]->(scenario)
create (Add_ScenarioType)-[:Bug]->(scenario)
create (name_of_enum)-[:Bug]->(scenario)
create (run_beforeafter)-[:Improvement]->(scenario)
create (define_Before_Scenario_step)-[:Improvement]->(scenario)
create (using_term_for_row)-[:Improvement]->(scenario)
create (run_beforeafter_has_parameter_scenario_cases_scenario_case_using_the_term_using_the_term_scenario_case_examples_table_table_in_case_parametrised_scenarios_scenario_case_first_scenario_first_scenario_case_scenario_case_public_void_public_void_beforeScenario_void_beforeScenario_do_some_stuff_do_some_stuff_public_void_beforeExample_void_beforeExample_are_some_ways_are_some_ways_Add_another_value_Add_another_value_more_work_more_work_Add_work_Add_more_work_Add_annotation_work_Add_annotation_Add_annotation_submit_a_patch_submit_a_patch_)-[:Bug]->(scenario)
create (Add_ScenarioType)-[:Bug]->(initialize)
create (name_of_enum)-[:Bug]->(initialize)
create (run_beforeafter)-[:Improvement]->(initialize)
create (define_Before_Scenario_step)-[:Improvement]->(initialize)
create (using_term_for_row)-[:Improvement]->(initialize)
create (run_beforeafter_has_parameter_scenario_cases_scenario_case_using_the_term_using_the_term_scenario_case_examples_table_table_in_case_parametrised_scenarios_scenario_case_first_scenario_first_scenario_case_scenario_case_public_void_public_void_beforeScenario_void_beforeScenario_do_some_stuff_do_some_stuff_public_void_beforeExample_void_beforeExample_are_some_ways_are_some_ways_Add_another_value_Add_another_value_more_work_more_work_Add_work_Add_more_work_Add_annotation_work_Add_annotation_Add_annotation_submit_a_patch_submit_a_patch_)-[:Bug]->(initialize)
create (method_stepsFactory:issue {name:'method stepsFactory'}) create (method_stepsFactory)-[:Bug]->(org_jbehave_core)
create (calls_in_method)-[:Bug]->(org_jbehave_core)
create (Ensure_lazy_initialisation:issue {name:'Ensure lazy initialisation'}) create (Ensure_lazy_initialisation)-[:Improvement]->(org_jbehave_core)
create (logging_For_example:issue {name:'logging For example'}) create (logging_For_example)-[:Improvement]->(org_jbehave_core)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_:issue {name:'Ensure lazy initialisation - lazy initialisation - calls these methods - calls these methods - had some unexpected side - unexpected side - unexpected side effects - side effects - logging which steps - logging which steps - multiple times - called multiple times - multiple times - instance of embedder - called many times - many times - many times - is another method - is another method - configures the embedder - configures the embedder - implemented with lazy initialization - lazy initialization - strange reason - find a solution - find a solution - '}) create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(org_jbehave_core)
create (method_stepsFactory)-[:Bug]->(core)
create (calls_in_method)-[:Bug]->(core)
create (Ensure_lazy_initialisation)-[:Improvement]->(core)
create (logging_For_example)-[:Improvement]->(core)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(core)
create (useStepsFactory:class {name:'useStepsFactory', favoritecolor: 'green'}) create (method_stepsFactory)-[:Bug]->(useStepsFactory)
create (calls_in_method)-[:Bug]->(useStepsFactory)
create (Ensure_lazy_initialisation)-[:Improvement]->(useStepsFactory)
create (logging_For_example)-[:Improvement]->(useStepsFactory)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(useStepsFactory)
create (method_stepsFactory)-[:Bug]->(useStepsFactory)
create (calls_in_method)-[:Bug]->(useStepsFactory)
create (Ensure_lazy_initialisation)-[:Improvement]->(useStepsFactory)
create (logging_For_example)-[:Improvement]->(useStepsFactory)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(useStepsFactory)
create (method_stepsFactory)-[:Bug]->(candidateSteps)
create (calls_in_method)-[:Bug]->(candidateSteps)
create (Ensure_lazy_initialisation)-[:Improvement]->(candidateSteps)
create (logging_For_example)-[:Improvement]->(candidateSteps)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(candidateSteps)
create (method_stepsFactory)-[:Bug]->(stepsFactory)
create (calls_in_method)-[:Bug]->(stepsFactory)
create (Ensure_lazy_initialisation)-[:Improvement]->(stepsFactory)
create (logging_For_example)-[:Improvement]->(stepsFactory)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(stepsFactory)
create (method_stepsFactory)-[:Bug]->(configuration)
create (calls_in_method)-[:Bug]->(configuration)
create (Ensure_lazy_initialisation)-[:Improvement]->(configuration)
create (logging_For_example)-[:Improvement]->(configuration)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(configuration)
create (method_stepsFactory)-[:Bug]->(configuredEmbedder)
create (calls_in_method)-[:Bug]->(configuredEmbedder)
create (Ensure_lazy_initialisation)-[:Improvement]->(configuredEmbedder)
create (logging_For_example)-[:Improvement]->(configuredEmbedder)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(configuredEmbedder)
create (method_stepsFactory)-[:Bug]->(stepsFactory)
create (calls_in_method)-[:Bug]->(stepsFactory)
create (Ensure_lazy_initialisation)-[:Improvement]->(stepsFactory)
create (logging_For_example)-[:Improvement]->(stepsFactory)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(stepsFactory)
create (method_stepsFactory)-[:Bug]->(useConfiguration)
create (calls_in_method)-[:Bug]->(useConfiguration)
create (Ensure_lazy_initialisation)-[:Improvement]->(useConfiguration)
create (logging_For_example)-[:Improvement]->(useConfiguration)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(useConfiguration)
create (method_stepsFactory)-[:Bug]->(useStepsFactory)
create (calls_in_method)-[:Bug]->(useStepsFactory)
create (Ensure_lazy_initialisation)-[:Improvement]->(useStepsFactory)
create (logging_For_example)-[:Improvement]->(useStepsFactory)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(useStepsFactory)
create (method_stepsFactory)-[:Bug]->(embedder)
create (calls_in_method)-[:Bug]->(embedder)
create (Ensure_lazy_initialisation)-[:Improvement]->(embedder)
create (logging_For_example)-[:Improvement]->(embedder)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(embedder)
create (method_stepsFactory)-[:Bug]->(meta)
create (calls_in_method)-[:Bug]->(meta)
create (Ensure_lazy_initialisation)-[:Improvement]->(meta)
create (logging_For_example)-[:Improvement]->(meta)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(meta)
create (method_stepsFactory)-[:Bug]->(meta)
create (calls_in_method)-[:Bug]->(meta)
create (Ensure_lazy_initialisation)-[:Improvement]->(meta)
create (logging_For_example)-[:Improvement]->(meta)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(meta)
create (method_stepsFactory)-[:Bug]->(JUnitStories)
create (calls_in_method)-[:Bug]->(JUnitStories)
create (Ensure_lazy_initialisation)-[:Improvement]->(JUnitStories)
create (logging_For_example)-[:Improvement]->(JUnitStories)
create (Ensure_lazy_initialisation_lazy_initialisation_calls_these_methods_calls_these_methods_had_some_unexpected_side_unexpected_side_unexpected_side_effects_side_effects_logging_which_steps_logging_which_steps_multiple_times_called_multiple_times_multiple_times_instance_of_embedder_called_many_times_many_times_many_times_is_another_method_is_another_method_configures_the_embedder_configures_the_embedder_implemented_with_lazy_initialization_lazy_initialization_strange_reason_find_a_solution_find_a_solution_)-[:Bug]->(JUnitStories)
create (thumbnail_image:issue {name:'thumbnail image'}) create (thumbnail_image)-[:Bug]->(org_jbehave_core)
create (missing_Duplicating_issue:issue {name:'missing Duplicating issue'}) create (missing_Duplicating_issue)-[:Improvement]->(org_jbehave_core)
create (talking_about_failed_case:issue {name:'talking about failed case'}) create (talking_about_failed_case)-[:Improvement]->(org_jbehave_core)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore:issue {name:'see corresponding commit in resourcessrcmainresourcesimages Futhermore'}) create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(org_jbehave_core)
create (thumbnail_image)-[:Bug]->(org_jbehave_core_reporters)
create (missing_Duplicating_issue)-[:Improvement]->(org_jbehave_core_reporters)
create (talking_about_failed_case)-[:Improvement]->(org_jbehave_core_reporters)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(org_jbehave_core_reporters)
create (thumbnail_image)-[:Bug]->(core)
create (missing_Duplicating_issue)-[:Improvement]->(core)
create (talking_about_failed_case)-[:Improvement]->(core)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(core)
create (thumbnail_image)-[:Bug]->(ant)
create (missing_Duplicating_issue)-[:Improvement]->(ant)
create (talking_about_failed_case)-[:Improvement]->(ant)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(ant)
create (thumbnail_image)-[:Bug]->(useConfiguration)
create (missing_Duplicating_issue)-[:Improvement]->(useConfiguration)
create (talking_about_failed_case)-[:Improvement]->(useConfiguration)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(useConfiguration)
create (thumbnail_image)-[:Bug]->(StoryReporterBuilder)
create (missing_Duplicating_issue)-[:Improvement]->(StoryReporterBuilder)
create (talking_about_failed_case)-[:Improvement]->(StoryReporterBuilder)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(StoryReporterBuilder)
create (thumbnail_image)-[:Bug]->(keywords)
create (missing_Duplicating_issue)-[:Improvement]->(keywords)
create (talking_about_failed_case)-[:Improvement]->(keywords)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(keywords)
create (thumbnail_image)-[:Bug]->(storyReporter)
create (missing_Duplicating_issue)-[:Improvement]->(storyReporter)
create (talking_about_failed_case)-[:Improvement]->(storyReporter)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(storyReporter)
create (thumbnail_image)-[:Bug]->(storyReporterBuilder)
create (missing_Duplicating_issue)-[:Improvement]->(storyReporterBuilder)
create (talking_about_failed_case)-[:Improvement]->(storyReporterBuilder)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(storyReporterBuilder)
create (thumbnail_image)-[:Bug]->(failed)
create (missing_Duplicating_issue)-[:Improvement]->(failed)
create (talking_about_failed_case)-[:Improvement]->(failed)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(failed)
create (thumbnail_image)-[:Bug]->(scenario)
create (missing_Duplicating_issue)-[:Improvement]->(scenario)
create (talking_about_failed_case)-[:Improvement]->(scenario)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(scenario)
create (thumbnail_image)-[:Bug]->(scenario)
create (missing_Duplicating_issue)-[:Improvement]->(scenario)
create (talking_about_failed_case)-[:Improvement]->(scenario)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(scenario)
create (thumbnail_image)-[:Bug]->(StoryReporterBuilder)
create (missing_Duplicating_issue)-[:Improvement]->(StoryReporterBuilder)
create (talking_about_failed_case)-[:Improvement]->(StoryReporterBuilder)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(StoryReporterBuilder)
create (thumbnail_image)-[:Bug]->(StoryReporterBuilder)
create (missing_Duplicating_issue)-[:Improvement]->(StoryReporterBuilder)
create (talking_about_failed_case)-[:Improvement]->(StoryReporterBuilder)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(StoryReporterBuilder)
create (thumbnail_image)-[:Bug]->(keywords)
create (missing_Duplicating_issue)-[:Improvement]->(keywords)
create (talking_about_failed_case)-[:Improvement]->(keywords)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(keywords)
create (thumbnail_image)-[:Bug]->(storyReporter)
create (missing_Duplicating_issue)-[:Improvement]->(storyReporter)
create (talking_about_failed_case)-[:Improvement]->(storyReporter)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(storyReporter)
create (thumbnail_image)-[:Bug]->(storyReporterBuilder)
create (missing_Duplicating_issue)-[:Improvement]->(storyReporterBuilder)
create (talking_about_failed_case)-[:Improvement]->(storyReporterBuilder)
create (see_corresponding_commit_in_resourcessrcmainresourcesimages_Futhermore)-[:Improvement]->(storyReporterBuilder)
create (story_durations:issue {name:'story durations'}) create (story_durations)-[:Bug]->(duration)
create (calculate_story_durations:issue {name:'calculate story durations'}) create (calculate_story_durations)-[:Bug]->(duration)
create (calculate_story_calculate_story_durations_story_durations_story_durations__threading_executions_threading_executions_callable_task_:issue {name:'calculate story - calculate story durations - story durations - story durations - -threading executions - threading executions - callable task - '}) create (calculate_story_calculate_story_durations_story_durations_story_durations__threading_executions_threading_executions_callable_task_)-[:Improvement]->(duration)
create (Add_JiraMetaMatcher:issue {name:'Add JiraMetaMatcher'}) create (Add_JiraMetaMatcher)-[:Bug]->(meta)
create (issue_via_REST_allows_the_meta_allows_the_meta_:issue {name:'issue via REST - allows the meta - allows the meta - '}) create (issue_via_REST_allows_the_meta_allows_the_meta_)-[:Bug]->(meta)
create (Add_JiraMetaMatcher)-[:Bug]->(meta)
create (issue_via_REST_allows_the_meta_allows_the_meta_)-[:Bug]->(meta)
create (Lifecycle_object:issue {name:'Lifecycle object'}) create (Lifecycle_object)-[:Bug]->(lifecycle)
create (method_for_log:issue {name:'method for log'}) create (method_for_log)-[:Bug]->(lifecycle)
create (containing_beforeafter_steps:issue {name:'containing beforeafter steps'}) create (containing_beforeafter_steps)-[:Improvement]->(lifecycle)
create (runs_as_separate_thing:issue {name:'runs as separate thing'}) create (runs_as_separate_thing)-[:Improvement]->(lifecycle)
create (needs_data_from_examples_table:issue {name:'needs data from examples table'}) create (needs_data_from_examples_table)-[:Improvement]->(lifecycle)
create (examples_table_examples_table_data_table_data_beforeafter_steps_separate_thing_needs_data_examples_table_find_a_matching_find_a_matching_matching_step_expecting_data_examples_table_:issue {name:'examples table - examples table data - table data - beforeafter steps - separate thing - needs data - examples table - find a matching - find a matching - matching step - expecting data - examples table - '}) create (examples_table_examples_table_data_table_data_beforeafter_steps_separate_thing_needs_data_examples_table_find_a_matching_find_a_matching_matching_step_expecting_data_examples_table_)-[:Bug]->(lifecycle)
create (Lifecycle_object)-[:Bug]->(after)
create (method_for_log)-[:Bug]->(after)
create (containing_beforeafter_steps)-[:Improvement]->(after)
create (runs_as_separate_thing)-[:Improvement]->(after)
create (needs_data_from_examples_table)-[:Improvement]->(after)
create (examples_table_examples_table_data_table_data_beforeafter_steps_separate_thing_needs_data_examples_table_find_a_matching_find_a_matching_matching_step_expecting_data_examples_table_)-[:Bug]->(after)
create (Lifecycle_object)-[:Bug]->(lifecycle)
create (method_for_log)-[:Bug]->(lifecycle)
create (containing_beforeafter_steps)-[:Improvement]->(lifecycle)
create (runs_as_separate_thing)-[:Improvement]->(lifecycle)
create (needs_data_from_examples_table)-[:Improvement]->(lifecycle)
create (examples_table_examples_table_data_table_data_beforeafter_steps_separate_thing_needs_data_examples_table_find_a_matching_find_a_matching_matching_step_expecting_data_examples_table_)-[:Bug]->(lifecycle)
create (Lifecycle_object)-[:Bug]->(scenario)
create (method_for_log)-[:Bug]->(scenario)
create (containing_beforeafter_steps)-[:Improvement]->(scenario)
create (runs_as_separate_thing)-[:Improvement]->(scenario)
create (needs_data_from_examples_table)-[:Improvement]->(scenario)
create (examples_table_examples_table_data_table_data_beforeafter_steps_separate_thing_needs_data_examples_table_find_a_matching_find_a_matching_matching_step_expecting_data_examples_table_)-[:Bug]->(scenario)
create (Lifecycle_object)-[:Bug]->(scenario)
create (method_for_log)-[:Bug]->(scenario)
create (containing_beforeafter_steps)-[:Improvement]->(scenario)
create (runs_as_separate_thing)-[:Improvement]->(scenario)
create (needs_data_from_examples_table)-[:Improvement]->(scenario)
create (examples_table_examples_table_data_table_data_beforeafter_steps_separate_thing_needs_data_examples_table_find_a_matching_find_a_matching_matching_step_expecting_data_examples_table_)-[:Bug]->(scenario)
create (Lifecycle_object)-[:Bug]->(Lifecycle)
create (method_for_log)-[:Bug]->(Lifecycle)
create (containing_beforeafter_steps)-[:Improvement]->(Lifecycle)
create (runs_as_separate_thing)-[:Improvement]->(Lifecycle)
create (needs_data_from_examples_table)-[:Improvement]->(Lifecycle)
create (examples_table_examples_table_data_table_data_beforeafter_steps_separate_thing_needs_data_examples_table_find_a_matching_find_a_matching_matching_step_expecting_data_examples_table_)-[:Bug]->(Lifecycle)
create (Saucelab_implementation:issue {name:'Saucelab implementation'}) create (Saucelab_implementation)-[:Bug]->(groovy)
create (work_in_SauceLabs:issue {name:'work in SauceLabs'}) create (work_in_SauceLabs)-[:Bug]->(groovy)
create (see_saucelabs_implementation:issue {name:'see saucelabs implementation'}) create (see_saucelabs_implementation)-[:Improvement]->(groovy)
create (be_for_spring_project:issue {name:'be for spring project'}) create (be_for_spring_project)-[:Improvement]->(groovy)
create (see_saucelabs_implementation_in_pico_project:issue {name:'see saucelabs implementation in pico project'}) create (see_saucelabs_implementation_in_pico_project)-[:Improvement]->(groovy)
create (Saucelab_implementation_implementation_for_etsy_spring_project_see_the_saucelabs_see_the_saucelabs_saucelabs_implementation_pico_project_spring_project_spring_project_parallel_runs_:issue {name:'Saucelab implementation - implementation for etsy - spring project - see the saucelabs - see the saucelabs - saucelabs implementation - pico project - spring project - spring project - parallel runs - '}) create (Saucelab_implementation_implementation_for_etsy_spring_project_see_the_saucelabs_see_the_saucelabs_saucelabs_implementation_pico_project_spring_project_spring_project_parallel_runs_)-[:Bug]->(groovy)
create (pico :class {name:'pico ', favoritecolor: 'green'}) create (Saucelab_implementation)-[:Bug]->(pico)
create (work_in_SauceLabs)-[:Bug]->(pico)
create (see_saucelabs_implementation)-[:Improvement]->(pico)
create (be_for_spring_project)-[:Improvement]->(pico)
create (see_saucelabs_implementation_in_pico_project)-[:Improvement]->(pico)
create (Saucelab_implementation_implementation_for_etsy_spring_project_see_the_saucelabs_see_the_saucelabs_saucelabs_implementation_pico_project_spring_project_spring_project_parallel_runs_)-[:Bug]->(pico)
create (Saucelab_implementation)-[:Bug]->(spring)
create (work_in_SauceLabs)-[:Bug]->(spring)
create (see_saucelabs_implementation)-[:Improvement]->(spring)
create (be_for_spring_project)-[:Improvement]->(spring)
create (see_saucelabs_implementation_in_pico_project)-[:Improvement]->(spring)
create (Saucelab_implementation_implementation_for_etsy_spring_project_see_the_saucelabs_see_the_saucelabs_saucelabs_implementation_pico_project_spring_project_spring_project_parallel_runs_)-[:Bug]->(spring)
create (multiple_steps:issue {name:'multiple steps'}) create (multiple_steps)-[:Bug]->(scenario)
create (run_scenario:issue {name:'run scenario'}) create (run_scenario)-[:Bug]->(scenario)
create (runs_for_steps_file:issue {name:'runs for steps file'}) create (runs_for_steps_file)-[:Improvement]->(scenario)
create (steps_file_run_my_scenario_using_multiple_steps_multiple_steps_multiple_steps_files_steps_files_:issue {name:'steps file - run my scenario - using multiple steps - multiple steps - multiple steps files - steps files - '}) create (steps_file_run_my_scenario_using_multiple_steps_multiple_steps_multiple_steps_files_steps_files_)-[:Improvement]->(scenario)
create (multiple_steps)-[:Bug]->(scenario)
create (run_scenario)-[:Bug]->(scenario)
create (runs_for_steps_file)-[:Improvement]->(scenario)
create (steps_file_run_my_scenario_using_multiple_steps_multiple_steps_multiple_steps_files_steps_files_)-[:Improvement]->(scenario)
create (has_afterStep_method:issue {name:'has afterStep method'}) create (has_afterStep_method)-[:Bug]->(org_jbehave_core)
create (has_no_method_has_no_method_:issue {name:'has no method - has no method - '}) create (has_no_method_has_no_method_)-[:Bug]->(org_jbehave_core)
create (has_afterStep_method)-[:Bug]->(org_jbehave_core_reporters)
create (has_no_method_has_no_method_)-[:Bug]->(org_jbehave_core_reporters)
create (has_afterStep_method)-[:Bug]->(core)
create (has_no_method_has_no_method_)-[:Bug]->(core)
create (has_afterStep_method)-[:Bug]->(after)
create (has_no_method_has_no_method_)-[:Bug]->(after)
create (example_documentation:issue {name:'example documentation'}) create (example_documentation)-[:Bug]->(core)
create (example_documentation_for_Gherkin_stories:issue {name:'example documentation for Gherkin stories'}) create (example_documentation_for_Gherkin_stories)-[:Bug]->(core)
create (Add_support)-[:Improvement]->(core)
create (uses_RegexStoryParserKeywords_in_example:issue {name:'uses RegexStoryParserKeywords in example'}) create (uses_RegexStoryParserKeywords_in_example)-[:Improvement]->(core)
create (gherkin_support_uses_the_RegexStoryParserKeywords_uses_the_RegexStoryParserKeywords_keywords_constructor_keywords_constructor_Natural_language_core_feature_standad_for_story_story_styntax_:issue {name:'gherkin support - uses the RegexStoryParserKeywords - uses the RegexStoryParserKeywords - keywords constructor - keywords constructor - Natural language - core feature - standad for story - story styntax - '}) create (gherkin_support_uses_the_RegexStoryParserKeywords_uses_the_RegexStoryParserKeywords_keywords_constructor_keywords_constructor_Natural_language_core_feature_standad_for_story_story_styntax_)-[:Improvement]->(core)
create (example_documentation)-[:Bug]->(keywords)
create (example_documentation_for_Gherkin_stories)-[:Bug]->(keywords)
create (Add_support)-[:Improvement]->(keywords)
create (uses_RegexStoryParserKeywords_in_example)-[:Improvement]->(keywords)
create (gherkin_support_uses_the_RegexStoryParserKeywords_uses_the_RegexStoryParserKeywords_keywords_constructor_keywords_constructor_Natural_language_core_feature_standad_for_story_story_styntax_)-[:Improvement]->(keywords)
create (example_documentation)-[:Bug]->(keywords)
create (example_documentation_for_Gherkin_stories)-[:Bug]->(keywords)
create (Add_support)-[:Improvement]->(keywords)
create (uses_RegexStoryParserKeywords_in_example)-[:Improvement]->(keywords)
create (gherkin_support_uses_the_RegexStoryParserKeywords_uses_the_RegexStoryParserKeywords_keywords_constructor_keywords_constructor_Natural_language_core_feature_standad_for_story_story_styntax_)-[:Improvement]->(keywords)
create (abstract_class:issue {name:'abstract class'}) create (abstract_class)-[:Bug]->(configuration)
create (creating_JUnitStories_class:issue {name:'creating JUnitStories class'}) create (creating_JUnitStories_class)-[:Bug]->(configuration)
create (starting_in_JBehave:issue {name:'starting in JBehave'}) create (starting_in_JBehave)-[:Improvement]->(configuration)
create (changing_dependency_version_in_POM:issue {name:'changing dependency version in POM'}) create (changing_dependency_version_in_POM)-[:Improvement]->(configuration)
create (abstract_class)-[:Bug]->(print)
create (creating_JUnitStories_class)-[:Bug]->(print)
create (starting_in_JBehave)-[:Improvement]->(print)
create (changing_dependency_version_in_POM)-[:Improvement]->(print)
create (abstract_class)-[:Bug]->(JUnitStories)
create (creating_JUnitStories_class)-[:Bug]->(JUnitStories)
create (starting_in_JBehave)-[:Improvement]->(JUnitStories)
create (changing_dependency_version_in_POM)-[:Improvement]->(JUnitStories)
create (normal_scenario:issue {name:'normal scenario'}) create (normal_scenario)-[:Bug]->(given)
create (story_in_file:issue {name:'story in file'}) create (story_in_file)-[:Bug]->(given)
create (using_GivenStories:issue {name:'using GivenStories'}) create (using_GivenStories)-[:Improvement]->(given)
create (running_scenario_with_GivenStories:issue {name:'running scenario with GivenStories'}) create (running_scenario_with_GivenStories)-[:Improvement]->(given)
create (normal_scenario_running_a_scenario_running_a_scenario_main_story_:issue {name:'normal scenario - running a scenario - running a scenario - main story - '}) create (normal_scenario_running_a_scenario_running_a_scenario_main_story_)-[:Improvement]->(given)
create (normal_scenario)-[:Bug]->(scenario)
create (story_in_file)-[:Bug]->(scenario)
create (using_GivenStories)-[:Improvement]->(scenario)
create (running_scenario_with_GivenStories)-[:Improvement]->(scenario)
create (normal_scenario_running_a_scenario_running_a_scenario_main_story_)-[:Improvement]->(scenario)
create (normal_scenario)-[:Bug]->(scenario)
create (story_in_file)-[:Bug]->(scenario)
create (using_GivenStories)-[:Improvement]->(scenario)
create (running_scenario_with_GivenStories)-[:Improvement]->(scenario)
create (normal_scenario_running_a_scenario_running_a_scenario_main_story_)-[:Improvement]->(scenario)
create (normal_scenario)-[:Bug]->(GivenStories)
create (story_in_file)-[:Bug]->(GivenStories)
create (using_GivenStories)-[:Improvement]->(GivenStories)
create (running_scenario_with_GivenStories)-[:Improvement]->(GivenStories)
create (normal_scenario_running_a_scenario_running_a_scenario_main_story_)-[:Improvement]->(GivenStories)
create (unsupported_Underscores:issue {name:'unsupported Underscores'}) create (unsupported_Underscores)-[:Bug]->(core)
create (results_in_pending_step:issue {name:'results in pending step'}) create (results_in_pending_step)-[:Bug]->(core)
create (containing_underscore:issue {name:'containing underscore'}) create (containing_underscore)-[:Improvement]->(core)
create (Starting_with_JBehave:issue {name:'Starting with JBehave'}) create (Starting_with_JBehave)-[:Improvement]->(core)
create (containing_underscore_in_parameter:issue {name:'containing underscore in parameter'}) create (containing_underscore_in_parameter)-[:Improvement]->(core)
create (unsupported_Underscores)-[:Bug]->(pending)
create (results_in_pending_step)-[:Bug]->(pending)
create (containing_underscore)-[:Improvement]->(pending)
create (Starting_with_JBehave)-[:Improvement]->(pending)
create (containing_underscore_in_parameter)-[:Improvement]->(pending)
create (unsupported_Underscores)-[:Bug]->(pending)
create (results_in_pending_step)-[:Bug]->(pending)
create (containing_underscore)-[:Improvement]->(pending)
create (Starting_with_JBehave)-[:Improvement]->(pending)
create (containing_underscore_in_parameter)-[:Improvement]->(pending)
create (convertible_words:issue {name:'convertible words'}) create (convertible_words)-[:Bug]->(ant)
create (Quoting_from_javadoc:issue {name:'Quoting from javadoc'}) create (Quoting_from_javadoc)-[:Bug]->(ant)
create (Writing_stories:issue {name:'Writing stories'}) create (Writing_stories)-[:Improvement]->(ant)
create (depends_on_JBEHAVE_:issue {name:'depends on JBEHAVE-'}) create (depends_on_JBEHAVE_)-[:Improvement]->(ant)
create (Writing_stories_in_plain_English:issue {name:'Writing stories in plain English'}) create (Writing_stories_in_plain_English)-[:Improvement]->(ant)
create (convertible_words)-[:Bug]->(scenario)
create (Quoting_from_javadoc)-[:Bug]->(scenario)
create (Writing_stories)-[:Improvement]->(scenario)
create (depends_on_JBEHAVE_)-[:Improvement]->(scenario)
create (Writing_stories_in_plain_English)-[:Improvement]->(scenario)
create (convertible_words)-[:Bug]->(scenario)
create (Quoting_from_javadoc)-[:Bug]->(scenario)
create (Writing_stories)-[:Improvement]->(scenario)
create (depends_on_JBEHAVE_)-[:Improvement]->(scenario)
create (Writing_stories_in_plain_English)-[:Improvement]->(scenario)
create (able_FluentEnumConverter:issue {name:'able FluentEnumConverter'}) create (able_FluentEnumConverter)-[:Bug]->(core)
create (convert_cased_separated_values:issue {name:'convert cased separated values'}) create (convert_cased_separated_values)-[:Bug]->(core)
create (follow_standard_conventions_for_constant_names:issue {name:'follow standard conventions for constant names'}) create (follow_standard_conventions_for_constant_names)-[:Improvement]->(core)
create (Add_FluentEnumConverter_separated_values_separated_values_to_Enums_values_to_Enums_allowing_stories_performing_the_actual_conversion_actual_conversion_transforms_values__alphanumeric_character_alphanumeric_character_defined_the_step_defined_the_step_method_iAmOnPagePageEnum_method_iAmOnPagePageEnum_page_iAmOnPagePageEnum_page_login_page_requires_enum_requires_enum_constants_enum_constants_follow_the_standard_conventions_standard_conventions_constant_names_uppercase_letters_:issue {name:'Add FluentEnumConverter - separated values - separated values to Enums - values to Enums - allowing stories - performing the actual conversion - actual conversion - transforms values - -alphanumeric character - alphanumeric character - defined the step - defined the step - method iAmOnPagePageEnum - method iAmOnPagePageEnum page - iAmOnPagePageEnum page - login page - requires enum - requires enum constants - enum constants - follow the standard conventions - standard conventions - constant names - uppercase letters - '}) create (Add_FluentEnumConverter_separated_values_separated_values_to_Enums_values_to_Enums_allowing_stories_performing_the_actual_conversion_actual_conversion_transforms_values__alphanumeric_character_alphanumeric_character_defined_the_step_defined_the_step_method_iAmOnPagePageEnum_method_iAmOnPagePageEnum_page_iAmOnPagePageEnum_page_login_page_requires_enum_requires_enum_constants_enum_constants_follow_the_standard_conventions_standard_conventions_constant_names_uppercase_letters_)-[:Improvement]->(core)
create (able_FluentEnumConverter)-[:Bug]->(ant)
create (convert_cased_separated_values)-[:Bug]->(ant)
create (follow_standard_conventions_for_constant_names)-[:Improvement]->(ant)
create (Add_FluentEnumConverter_separated_values_separated_values_to_Enums_values_to_Enums_allowing_stories_performing_the_actual_conversion_actual_conversion_transforms_values__alphanumeric_character_alphanumeric_character_defined_the_step_defined_the_step_method_iAmOnPagePageEnum_method_iAmOnPagePageEnum_page_iAmOnPagePageEnum_page_login_page_requires_enum_requires_enum_constants_enum_constants_follow_the_standard_conventions_standard_conventions_constant_names_uppercase_letters_)-[:Improvement]->(ant)
create (able_FluentEnumConverter)-[:Bug]->(scenario)
create (convert_cased_separated_values)-[:Bug]->(scenario)
create (follow_standard_conventions_for_constant_names)-[:Improvement]->(scenario)
create (Add_FluentEnumConverter_separated_values_separated_values_to_Enums_values_to_Enums_allowing_stories_performing_the_actual_conversion_actual_conversion_transforms_values__alphanumeric_character_alphanumeric_character_defined_the_step_defined_the_step_method_iAmOnPagePageEnum_method_iAmOnPagePageEnum_page_iAmOnPagePageEnum_page_login_page_requires_enum_requires_enum_constants_enum_constants_follow_the_standard_conventions_standard_conventions_constant_names_uppercase_letters_)-[:Improvement]->(scenario)
create (able_FluentEnumConverter)-[:Bug]->(scenario)
create (convert_cased_separated_values)-[:Bug]->(scenario)
create (follow_standard_conventions_for_constant_names)-[:Improvement]->(scenario)
create (Add_FluentEnumConverter_separated_values_separated_values_to_Enums_values_to_Enums_allowing_stories_performing_the_actual_conversion_actual_conversion_transforms_values__alphanumeric_character_alphanumeric_character_defined_the_step_defined_the_step_method_iAmOnPagePageEnum_method_iAmOnPagePageEnum_page_iAmOnPagePageEnum_page_login_page_requires_enum_requires_enum_constants_enum_constants_follow_the_standard_conventions_standard_conventions_constant_names_uppercase_letters_)-[:Improvement]->(scenario)
create (method_generics:issue {name:'method generics'}) create (method_generics)-[:Bug]->(org_jbehave_core)
create (instance_of_ParameterizedType:issue {name:'instance of ParameterizedType'}) create (instance_of_ParameterizedType)-[:Bug]->(org_jbehave_core)
create (support_generics_parameters:issue {name:'support generics parameters'}) create (support_generics_parameters)-[:Improvement]->(org_jbehave_core)
create (passes_through_StringListConverter:issue {name:'passes through StringListConverter'}) create (passes_through_StringListConverter)-[:Improvement]->(org_jbehave_core)
create (method_generics)-[:Bug]->(org_jbehave_core_steps)
create (instance_of_ParameterizedType)-[:Bug]->(org_jbehave_core_steps)
create (support_generics_parameters)-[:Improvement]->(org_jbehave_core_steps)
create (passes_through_StringListConverter)-[:Improvement]->(org_jbehave_core_steps)
create (method_generics)-[:Bug]->(core)
create (instance_of_ParameterizedType)-[:Bug]->(core)
create (support_generics_parameters)-[:Improvement]->(core)
create (passes_through_StringListConverter)-[:Improvement]->(core)
create (method_generics)-[:Bug]->(scenario)
create (instance_of_ParameterizedType)-[:Bug]->(scenario)
create (support_generics_parameters)-[:Improvement]->(scenario)
create (passes_through_StringListConverter)-[:Improvement]->(scenario)
create (method_generics)-[:Bug]->(scenario)
create (instance_of_ParameterizedType)-[:Bug]->(scenario)
create (support_generics_parameters)-[:Improvement]->(scenario)
create (passes_through_StringListConverter)-[:Improvement]->(scenario)
create (Allow_matching:issue {name:'Allow matching'}) create (Allow_matching)-[:Bug]->(lifecycle)
create (Allow_matching_of_lifecycle:issue {name:'Allow matching of lifecycle'}) create (Allow_matching_of_lifecycle)-[:Bug]->(lifecycle)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_:issue {name:'Allow matching - Allow matching of lifecycle - matching of lifecycle - lifecycle after steps - meta filter - Add new lifecycle - new lifecycle - new lifecycle element - lifecycle element - specify the meta filter - meta filter - steps by outcome - scenario level - '}) create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(lifecycle)
create (Allow_matching)-[:Bug]->(meta)
create (Allow_matching_of_lifecycle)-[:Bug]->(meta)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(meta)
create (Allow_matching)-[:Bug]->(outcome)
create (Allow_matching_of_lifecycle)-[:Bug]->(outcome)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(outcome)
create (Allow_matching)-[:Bug]->(after)
create (Allow_matching_of_lifecycle)-[:Bug]->(after)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(after)
create (Allow_matching)-[:Bug]->(lifecycle)
create (Allow_matching_of_lifecycle)-[:Bug]->(lifecycle)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(lifecycle)
create (Allow_matching)-[:Bug]->(meta)
create (Allow_matching_of_lifecycle)-[:Bug]->(meta)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(meta)
create (Allow_matching)-[:Bug]->(outcome)
create (Allow_matching_of_lifecycle)-[:Bug]->(outcome)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(outcome)
create (Allow_matching)-[:Bug]->(scenario)
create (Allow_matching_of_lifecycle)-[:Bug]->(scenario)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(scenario)
create (Allow_matching)-[:Bug]->(scenario)
create (Allow_matching_of_lifecycle)-[:Bug]->(scenario)
create (Allow_matching_Allow_matching_of_lifecycle_matching_of_lifecycle_lifecycle_after_steps_meta_filter_Add_new_lifecycle_new_lifecycle_new_lifecycle_element_lifecycle_element_specify_the_meta_filter_meta_filter_steps_by_outcome_scenario_level_)-[:Improvement]->(scenario)
create (Context_View:issue {name:'Context View'}) create (Context_View)-[:Bug]->(org_jbehave_core)
create (use_same_code:issue {name:'use same code'}) create (use_same_code)-[:Bug]->(org_jbehave_core)
create (using_composite_step_as_first_executed_step:issue {name:'using composite step as first executed step'}) create (using_composite_step_as_first_executed_step)-[:Improvement]->(org_jbehave_core)
create (Context_View)-[:Bug]->(org_jbehave_core_reporters)
create (use_same_code)-[:Bug]->(org_jbehave_core_reporters)
create (using_composite_step_as_first_executed_step)-[:Improvement]->(org_jbehave_core_reporters)
create (Context_View)-[:Bug]->(core)
create (use_same_code)-[:Bug]->(core)
create (using_composite_step_as_first_executed_step)-[:Improvement]->(core)
create (Context_View)-[:Bug]->(composite)
create (use_same_code)-[:Bug]->(composite)
create (using_composite_step_as_first_executed_step)-[:Improvement]->(composite)
create (Context_View)-[:Bug]->(composite)
create (use_same_code)-[:Bug]->(composite)
create (using_composite_step_as_first_executed_step)-[:Improvement]->(composite)
create (Context_View)-[:Bug]->(Context)
create (use_same_code)-[:Bug]->(Context)
create (using_composite_step_as_first_executed_step)-[:Improvement]->(Context)
create (write_report_file:issue {name:'write report file'}) create (write_report_file)-[:Improvement]->(org_jbehave_core)
create (write_report_file)-[:Improvement]->(org_jbehave_core_embedder)
create (write_report_file)-[:Improvement]->(org_jbehave_core_reporters)
create (write_report_file)-[:Improvement]->(core)
create (write_report_file)-[:Improvement]->(embedder)
create (write_report_file)-[:Improvement]->(after)
create (step_priority:issue {name:'step priority'}) create (step_priority)-[:Bug]->(rest)
create (parsing_priority_attribute:issue {name:'parsing priority attribute'}) create (parsing_priority_attribute)-[:Bug]->(rest)
create (parsing_priority_attribute_of_JBehave_annotations:issue {name:'parsing priority attribute of JBehave annotations'}) create (parsing_priority_attribute_of_JBehave_annotations)-[:Improvement]->(rest)
create (step_priority)-[:Bug]->(ant)
create (parsing_priority_attribute)-[:Bug]->(ant)
create (parsing_priority_attribute_of_JBehave_annotations)-[:Improvement]->(ant)
create (step_priority)-[:Bug]->(after)
create (parsing_priority_attribute)-[:Bug]->(after)
create (parsing_priority_attribute_of_JBehave_annotations)-[:Improvement]->(after)
create (step_priority)-[:Bug]->(priority)
create (parsing_priority_attribute)-[:Bug]->(priority)
create (parsing_priority_attribute_of_JBehave_annotations)-[:Improvement]->(priority)
create (step_priority)-[:Bug]->(priority)
create (parsing_priority_attribute)-[:Bug]->(priority)
create (parsing_priority_attribute_of_JBehave_annotations)-[:Improvement]->(priority)
create (ijbehave_coretreearchetypes:issue {name:'ijbehave coretreearchetypes'}) create (ijbehave_coretreearchetypes)-[:Bug]->(core)
create (ijbehave_coretreearchetypes_with_step:issue {name:'ijbehave coretreearchetypes with step'}) create (ijbehave_coretreearchetypes_with_step)-[:Bug]->(core)
create (featuring_StepMonitor:issue {name:'featuring StepMonitor'}) create (featuring_StepMonitor)-[:Improvement]->(core)
create (featuring_StepMonitor_with_JFrameContextView:issue {name:'featuring StepMonitor with JFrameContextView'}) create (featuring_StepMonitor_with_JFrameContextView)-[:Improvement]->(core)
create (adding_the_nice_JFrameContextView_nice_JFrameContextView_archetype_simple_like_the_idea_like_the_idea_:issue {name:'adding the nice JFrameContextView - nice JFrameContextView - archetype simple - like the idea - like the idea - '}) create (adding_the_nice_JFrameContextView_nice_JFrameContextView_archetype_simple_like_the_idea_like_the_idea_)-[:Improvement]->(core)
create (ijbehave_coretreearchetypes)-[:Bug]->(Context)
create (ijbehave_coretreearchetypes_with_step)-[:Bug]->(Context)
create (featuring_StepMonitor)-[:Improvement]->(Context)
create (featuring_StepMonitor_with_JFrameContextView)-[:Improvement]->(Context)
create (adding_the_nice_JFrameContextView_nice_JFrameContextView_archetype_simple_like_the_idea_like_the_idea_)-[:Improvement]->(Context)
create (JFrameContextView:class {name:'JFrameContextView', favoritecolor: 'green'}) create (ijbehave_coretreearchetypes)-[:Bug]->(JFrameContextView)
create (ijbehave_coretreearchetypes_with_step)-[:Bug]->(JFrameContextView)
create (featuring_StepMonitor)-[:Improvement]->(JFrameContextView)
create (featuring_StepMonitor_with_JFrameContextView)-[:Improvement]->(JFrameContextView)
create (adding_the_nice_JFrameContextView_nice_JFrameContextView_archetype_simple_like_the_idea_like_the_idea_)-[:Improvement]->(JFrameContextView)
create (FailingUponPendingSteps_strategy:issue {name:'FailingUponPendingSteps strategy'}) create (FailingUponPendingSteps_strategy)-[:Bug]->(FailingUponPendingStep)
create (run_story)-[:Bug]->(FailingUponPendingStep)
create (waiting_for_story_results:issue {name:'waiting for story results'}) create (waiting_for_story_results)-[:Improvement]->(FailingUponPendingStep)
create (run_a_story_run_a_story_story_results_same_stories_:issue {name:'run a story - run a story - story results - same stories - '}) create (run_a_story_run_a_story_story_results_same_stories_)-[:Improvement]->(FailingUponPendingStep)
create (example_tables:issue {name:'example tables'}) create (example_tables)-[:Bug]->(scenario)
create (threading_in_scenarios:issue {name:'threading in scenarios'}) create (threading_in_scenarios)-[:Bug]->(scenario)
create (have_many_stories:issue {name:'have many stories'}) create (have_many_stories)-[:Improvement]->(scenario)
create (threading_in_scenarios_scenarios___example_scenarios___example_tables_example_tables_have_many_stories_many_stories_cost_much_time_much_time_threaded_story_threaded_story_execution_story_execution_story_execution_capability_execution_capability_scenario_level_different_data_data_in_example_example_table_:issue {name:'threading in scenarios - scenarios _ example - scenarios _ example tables - example tables - have many stories - many stories - cost much time - much time - threaded story - threaded story execution - story execution - story execution capability - execution capability - scenario level - different data - data in example - example table - '}) create (threading_in_scenarios_scenarios___example_scenarios___example_tables_example_tables_have_many_stories_many_stories_cost_much_time_much_time_threaded_story_threaded_story_execution_story_execution_story_execution_capability_execution_capability_scenario_level_different_data_data_in_example_example_table_)-[:Improvement]->(scenario)
create (example_tables)-[:Bug]->(scenario)
create (threading_in_scenarios)-[:Bug]->(scenario)
create (have_many_stories)-[:Improvement]->(scenario)
create (threading_in_scenarios_scenarios___example_scenarios___example_tables_example_tables_have_many_stories_many_stories_cost_much_time_much_time_threaded_story_threaded_story_execution_story_execution_story_execution_capability_execution_capability_scenario_level_different_data_data_in_example_example_table_)-[:Improvement]->(scenario)
create (other_methods:issue {name:'other methods'}) create (other_methods)-[:Bug]->(StoryReporterBuilder)
create (breaks_tests:issue {name:'breaks tests'}) create (breaks_tests)-[:Bug]->(StoryReporterBuilder)
create (run_For_instance:issue {name:'run For instance'}) create (run_For_instance)-[:Improvement]->(StoryReporterBuilder)
create (other_methods)-[:Bug]->(storyReporter)
create (breaks_tests)-[:Bug]->(storyReporter)
create (run_For_instance)-[:Improvement]->(storyReporter)
create (other_methods)-[:Bug]->(storyReporterBuilder)
create (breaks_tests)-[:Bug]->(storyReporterBuilder)
create (run_For_instance)-[:Improvement]->(storyReporterBuilder)
create (other_methods)-[:Bug]->(given)
create (breaks_tests)-[:Bug]->(given)
create (run_For_instance)-[:Improvement]->(given)
create (other_methods)-[:Bug]->(after)
create (breaks_tests)-[:Bug]->(after)
create (run_For_instance)-[:Improvement]->(after)
create (other_methods)-[:Bug]->(StoryReporterBuilder)
create (breaks_tests)-[:Bug]->(StoryReporterBuilder)
create (run_For_instance)-[:Improvement]->(StoryReporterBuilder)
create (other_methods)-[:Bug]->(StoryReporterBuilder)
create (breaks_tests)-[:Bug]->(StoryReporterBuilder)
create (run_For_instance)-[:Improvement]->(StoryReporterBuilder)
create (other_methods)-[:Bug]->(storyReporter)
create (breaks_tests)-[:Bug]->(storyReporter)
create (run_For_instance)-[:Improvement]->(storyReporter)
create (other_methods)-[:Bug]->(storyReporterBuilder)
create (breaks_tests)-[:Bug]->(storyReporterBuilder)
create (run_For_instance)-[:Improvement]->(storyReporterBuilder)
create (other_methods)-[:Bug]->(show)
create (breaks_tests)-[:Bug]->(show)
create (run_For_instance)-[:Improvement]->(show)
create (right_place:issue {name:'right place'}) create (right_place)-[:Bug]->(core)
create (setup_automation_framework:issue {name:'setup automation framework'}) create (setup_automation_framework)-[:Bug]->(core)
create (trying_for_couple_days:issue {name:'trying for couple days'}) create (trying_for_couple_days)-[:Improvement]->(core)
create (supports_new_version_of_selenium:issue {name:'supports new version of selenium'}) create (supports_new_version_of_selenium)-[:Improvement]->(core)
create (right_place)-[:Bug]->(distribution)
create (setup_automation_framework)-[:Bug]->(distribution)
create (trying_for_couple_days)-[:Improvement]->(distribution)
create (supports_new_version_of_selenium)-[:Improvement]->(distribution)
create (right_place)-[:Bug]->(scenario)
create (setup_automation_framework)-[:Bug]->(scenario)
create (trying_for_couple_days)-[:Improvement]->(scenario)
create (supports_new_version_of_selenium)-[:Improvement]->(scenario)
create (right_place)-[:Bug]->(scenario)
create (setup_automation_framework)-[:Bug]->(scenario)
create (trying_for_couple_days)-[:Improvement]->(scenario)
create (supports_new_version_of_selenium)-[:Improvement]->(scenario)
create (right_place)-[:Bug]->(close)
create (setup_automation_framework)-[:Bug]->(close)
create (trying_for_couple_days)-[:Improvement]->(close)
create (supports_new_version_of_selenium)-[:Improvement]->(close)
create (right_place)-[:Bug]->(JUnitStories)
create (setup_automation_framework)-[:Bug]->(JUnitStories)
create (trying_for_couple_days)-[:Improvement]->(JUnitStories)
create (supports_new_version_of_selenium)-[:Improvement]->(JUnitStories)
create (right_place)-[:Bug]->(GivenStories)
create (setup_automation_framework)-[:Bug]->(GivenStories)
create (trying_for_couple_days)-[:Improvement]->(GivenStories)
create (supports_new_version_of_selenium)-[:Improvement]->(GivenStories)
create (extensibility_of_meta_matching:issue {name:'extensibility of meta matching'}) create (extensibility_of_meta_matching)-[:Bug]->(core)
create (support_custom_implementations:issue {name:'support custom implementations'}) create (support_custom_implementations)-[:Bug]->(core)
create (support_custom_support_custom_implementations_custom_implementations_implementations_and_extensibility_meta_matching_:issue {name:'support custom - support custom implementations - custom implementations - implementations and extensibility - meta matching - '}) create (support_custom_support_custom_implementations_custom_implementations_implementations_and_extensibility_meta_matching_)-[:Improvement]->(core)
create (extensibility_of_meta_matching)-[:Bug]->(meta)
create (support_custom_implementations)-[:Bug]->(meta)
create (support_custom_support_custom_implementations_custom_implementations_implementations_and_extensibility_meta_matching_)-[:Improvement]->(meta)
create (extensibility_of_meta_matching)-[:Bug]->(meta)
create (support_custom_implementations)-[:Bug]->(meta)
create (support_custom_support_custom_implementations_custom_implementations_implementations_and_extensibility_meta_matching_)-[:Improvement]->(meta)
create (Lifecycle_steps:issue {name:'Lifecycle steps'}) create (Lifecycle_steps)-[:Bug]->(outcome)
create (step_of_scenario:issue {name:'step of scenario'}) create (step_of_scenario)-[:Bug]->(outcome)
create (use_lifecyle_steps:issue {name:'use lifecyle steps'}) create (use_lifecyle_steps)-[:Improvement]->(outcome)
create (be_in_situations:issue {name:'be in situations'}) create (be_in_situations)-[:Improvement]->(outcome)
create (do_cleanups_For_example:issue {name:'do cleanups For example'}) create (do_cleanups_For_example)-[:Improvement]->(outcome)
create (Lifecycle_steps_use_lifecyle_use_lifecyle_steps_lifecyle_steps_add_steps_have_a_bank_have_a_bank_bank_account_do_some_cleanups_do_some_cleanups_outcome_type_:issue {name:'Lifecycle steps - use lifecyle - use lifecyle steps - lifecyle steps - add steps - have a bank - have a bank - bank account - do some cleanups - do some cleanups - outcome type - '}) create (Lifecycle_steps_use_lifecyle_use_lifecyle_steps_lifecyle_steps_add_steps_have_a_bank_have_a_bank_bank_account_do_some_cleanups_do_some_cleanups_outcome_type_)-[:Bug]->(outcome)
create (Lifecycle_steps)-[:Bug]->(after)
create (step_of_scenario)-[:Bug]->(after)
create (use_lifecyle_steps)-[:Improvement]->(after)
create (be_in_situations)-[:Improvement]->(after)
create (do_cleanups_For_example)-[:Improvement]->(after)
create (Lifecycle_steps_use_lifecyle_use_lifecyle_steps_lifecyle_steps_add_steps_have_a_bank_have_a_bank_bank_account_do_some_cleanups_do_some_cleanups_outcome_type_)-[:Bug]->(after)
create (Lifecycle_steps)-[:Bug]->(outcome)
create (step_of_scenario)-[:Bug]->(outcome)
create (use_lifecyle_steps)-[:Improvement]->(outcome)
create (be_in_situations)-[:Improvement]->(outcome)
create (do_cleanups_For_example)-[:Improvement]->(outcome)
create (Lifecycle_steps_use_lifecyle_use_lifecyle_steps_lifecyle_steps_add_steps_have_a_bank_have_a_bank_bank_account_do_some_cleanups_do_some_cleanups_outcome_type_)-[:Bug]->(outcome)
create (Lifecycle_steps)-[:Bug]->(scenario)
create (step_of_scenario)-[:Bug]->(scenario)
create (use_lifecyle_steps)-[:Improvement]->(scenario)
create (be_in_situations)-[:Improvement]->(scenario)
create (do_cleanups_For_example)-[:Improvement]->(scenario)
create (Lifecycle_steps_use_lifecyle_use_lifecyle_steps_lifecyle_steps_add_steps_have_a_bank_have_a_bank_bank_account_do_some_cleanups_do_some_cleanups_outcome_type_)-[:Bug]->(scenario)
create (Lifecycle_steps)-[:Bug]->(scenario)
create (step_of_scenario)-[:Bug]->(scenario)
create (use_lifecyle_steps)-[:Improvement]->(scenario)
create (be_in_situations)-[:Improvement]->(scenario)
create (do_cleanups_For_example)-[:Improvement]->(scenario)
create (Lifecycle_steps_use_lifecyle_use_lifecyle_steps_lifecyle_steps_add_steps_have_a_bank_have_a_bank_bank_account_do_some_cleanups_do_some_cleanups_outcome_type_)-[:Bug]->(scenario)
create (Lifecycle_steps)-[:Bug]->(Lifecycle)
create (step_of_scenario)-[:Bug]->(Lifecycle)
create (use_lifecyle_steps)-[:Improvement]->(Lifecycle)
create (be_in_situations)-[:Improvement]->(Lifecycle)
create (do_cleanups_For_example)-[:Improvement]->(Lifecycle)
create (Lifecycle_steps_use_lifecyle_use_lifecyle_steps_lifecyle_steps_add_steps_have_a_bank_have_a_bank_bank_account_do_some_cleanups_do_some_cleanups_outcome_type_)-[:Bug]->(Lifecycle)
create (Localized_Story:issue {name:'Localized Story'}) create (Localized_Story)-[:Bug]->(ant)
create (annotation_in_jBehave:issue {name:'annotation in jBehave'}) create (annotation_in_jBehave)-[:Bug]->(ant)
create (use_jBehave_stories:issue {name:'use jBehave stories'}) create (use_jBehave_stories)-[:Improvement]->(ant)
create (working_With_one_Und_step:issue {name:'working With one Und-step'}) create (working_With_one_Und_step)-[:Improvement]->(ant)
create (use_jBehave_stories_with_German_locales:issue {name:'use jBehave stories with German locales'}) create (use_jBehave_stories_with_German_locales)-[:Improvement]->(ant)
create (Localized_Story)-[:Bug]->(given)
create (annotation_in_jBehave)-[:Bug]->(given)
create (use_jBehave_stories)-[:Improvement]->(given)
create (working_With_one_Und_step)-[:Improvement]->(given)
create (use_jBehave_stories_with_German_locales)-[:Improvement]->(given)
create (Localized_Story)-[:Bug]->(print)
create (annotation_in_jBehave)-[:Bug]->(print)
create (use_jBehave_stories)-[:Improvement]->(print)
create (working_With_one_Und_step)-[:Improvement]->(print)
create (use_jBehave_stories_with_German_locales)-[:Improvement]->(print)
create (Localized_Story)-[:Bug]->(show)
create (annotation_in_jBehave)-[:Bug]->(show)
create (use_jBehave_stories)-[:Improvement]->(show)
create (working_With_one_Und_step)-[:Improvement]->(show)
create (use_jBehave_stories_with_German_locales)-[:Improvement]->(show)
create (Mock_Dependency:issue {name:'Mock Dependency'}) create (Mock_Dependency)-[:Bug]->(maven)
create (support_version:issue {name:'support version'}) create (support_version)-[:Bug]->(maven)
create (support_version_of_NeedleJ:issue {name:'support version of NeedleJ'}) create (support_version_of_NeedleJ)-[:Improvement]->(maven)
create (Polish_language:issue {name:'Polish language'}) create (Polish_language)-[:Bug]->(core)
create (Polish_language)-[:Bug]->(keywords)
create (Polish_language_Polish_language_support_language_support_Polish_leywords_)-[:Bug]->(keywords)
create (Polish_language)-[:Bug]->(keywords)
create (Polish_language_Polish_language_support_language_support_Polish_leywords_)-[:Bug]->(keywords)
create (constructor_code:issue {name:'constructor code'}) create (constructor_code)-[:Bug]->(duration)
create (using_StoryReporter_mechanic:issue {name:'using StoryReporter mechanic'}) create (using_StoryReporter_mechanic)-[:Bug]->(duration)
create (report_on_duration_stats:issue {name:'report on duration stats'}) create (report_on_duration_stats)-[:Improvement]->(duration)
create (support_time_view_of_ContextView_ContextStoryReporter:issue {name:'support time view of ContextView ContextStoryReporter'}) create (support_time_view_of_ContextView_ContextStoryReporter)-[:Improvement]->(duration)
create (constructor_code)-[:Bug]->(Context)
create (using_StoryReporter_mechanic)-[:Bug]->(Context)
create (report_on_duration_stats)-[:Improvement]->(Context)
create (support_time_view_of_ContextView_ContextStoryReporter)-[:Improvement]->(Context)
create (following_error)-[:Bug]->(maven)
create (pom_from_reposit_ory_atlassian:issue {name:'pom from reposit ory atlassian'}) create (pom_from_reposit_ory_atlassian)-[:Bug]->(maven)
create (resolve_dependencies:issue {name:'resolve dependencies'}) create (resolve_dependencies)-[:Improvement]->(maven)
create (refers_to_outdated_URL:issue {name:'refers to outdated URL'}) create (refers_to_outdated_URL)-[:Improvement]->(maven)
create (following_error)-[:Bug]->(distribution)
create (pom_from_reposit_ory_atlassian)-[:Bug]->(distribution)
create (resolve_dependencies)-[:Improvement]->(distribution)
create (refers_to_outdated_URL)-[:Improvement]->(distribution)
create (following_error)-[:Bug]->(failed)
create (pom_from_reposit_ory_atlassian)-[:Bug]->(failed)
create (resolve_dependencies)-[:Improvement]->(failed)
create (refers_to_outdated_URL)-[:Improvement]->(failed)
create (following_error)-[:Bug]->(initialize)
create (pom_from_reposit_ory_atlassian)-[:Bug]->(initialize)
create (resolve_dependencies)-[:Improvement]->(initialize)
create (refers_to_outdated_URL)-[:Improvement]->(initialize)
create (Parametrised_step:issue {name:'Parametrised step'}) create (Parametrised_step)-[:Bug]->(given)
create (_for_step:issue {name:'| for step'}) create (_for_step)-[:Bug]->(given)
create (Parametrised_step_having_exemples_having_exemples_tables_exemples_tables_exemples_tables_parameter_tables_parameter_other_parameter_other_parameter_table_parameter_table_generated_reports_is_a_table_is_a_table_Given_table_AMOUNT____table_with_data_public_void_public_void_givenTableWithDataString_void_givenTableWithDataString_public_void_givenTableWithDataString_table_void_givenTableWithDataString_table_givenTableWithDataString_table_ExamplesTable_examples_:issue {name:'Parametrised step - having exemples - having exemples tables - exemples tables - exemples tables parameter - tables parameter - other parameter - other parameter table - parameter table - generated reports - is a table - is a table - Given table - |AMOUNT | - | | - table with data - public void - public void givenTableWithDataString - void givenTableWithDataString - public void givenTableWithDataString table - void givenTableWithDataString table - givenTableWithDataString table - ExamplesTable examples - '}) create (Parametrised_step_having_exemples_having_exemples_tables_exemples_tables_exemples_tables_parameter_tables_parameter_other_parameter_other_parameter_table_parameter_table_generated_reports_is_a_table_is_a_table_Given_table_AMOUNT____table_with_data_public_void_public_void_givenTableWithDataString_void_givenTableWithDataString_public_void_givenTableWithDataString_table_void_givenTableWithDataString_table_givenTableWithDataString_table_ExamplesTable_examples_)-[:Improvement]->(given)
create (Parametrised_step)-[:Bug]->(ExamplesTable)
create (_for_step)-[:Bug]->(ExamplesTable)
create (Parametrised_step_having_exemples_having_exemples_tables_exemples_tables_exemples_tables_parameter_tables_parameter_other_parameter_other_parameter_table_parameter_table_generated_reports_is_a_table_is_a_table_Given_table_AMOUNT____table_with_data_public_void_public_void_givenTableWithDataString_void_givenTableWithDataString_public_void_givenTableWithDataString_table_void_givenTableWithDataString_table_givenTableWithDataString_table_ExamplesTable_examples_)-[:Improvement]->(ExamplesTable)
create (ResolveToPackagedName_resolver:issue {name:'ResolveToPackagedName resolver'}) create (ResolveToPackagedName_resolver)-[:Bug]->(org_jbehave_core)
create (extension_In_case:issue {name:'extension In case'}) create (extension_In_case)-[:Bug]->(org_jbehave_core)
create (extends_AbstractPathResolver:issue {name:'extends AbstractPathResolver'}) create (extends_AbstractPathResolver)-[:Improvement]->(org_jbehave_core)
create (start_from_next_character:issue {name:'start from next character'}) create (start_from_next_character)-[:Improvement]->(org_jbehave_core)
create (get_name_with_unescaped_characters:issue {name:'get name with unescaped characters'}) create (get_name_with_unescaped_characters)-[:Improvement]->(org_jbehave_core)
create (ResolveToPackagedName_resolver)-[:Bug]->(org_jbehave_core_configuration)
create (extension_In_case)-[:Bug]->(org_jbehave_core_configuration)
create (extends_AbstractPathResolver)-[:Improvement]->(org_jbehave_core_configuration)
create (start_from_next_character)-[:Improvement]->(org_jbehave_core_configuration)
create (get_name_with_unescaped_characters)-[:Improvement]->(org_jbehave_core_configuration)
create (ResolveToPackagedName_resolver)-[:Bug]->(org_jbehave_core_embedder)
create (extension_In_case)-[:Bug]->(org_jbehave_core_embedder)
create (extends_AbstractPathResolver)-[:Improvement]->(org_jbehave_core_embedder)
create (start_from_next_character)-[:Improvement]->(org_jbehave_core_embedder)
create (get_name_with_unescaped_characters)-[:Improvement]->(org_jbehave_core_embedder)
create (ResolveToPackagedName_resolver)-[:Bug]->(org_jbehave_core_reporters)
create (extension_In_case)-[:Bug]->(org_jbehave_core_reporters)
create (extends_AbstractPathResolver)-[:Improvement]->(org_jbehave_core_reporters)
create (start_from_next_character)-[:Improvement]->(org_jbehave_core_reporters)
create (get_name_with_unescaped_characters)-[:Improvement]->(org_jbehave_core_reporters)
create (ResolveToPackagedName_resolver)-[:Bug]->(core)
create (extension_In_case)-[:Bug]->(core)
create (extends_AbstractPathResolver)-[:Improvement]->(core)
create (start_from_next_character)-[:Improvement]->(core)
create (get_name_with_unescaped_characters)-[:Improvement]->(core)
create (ResolveToPackagedName_resolver)-[:Bug]->(configuration)
create (extension_In_case)-[:Bug]->(configuration)
create (extends_AbstractPathResolver)-[:Improvement]->(configuration)
create (start_from_next_character)-[:Improvement]->(configuration)
create (get_name_with_unescaped_characters)-[:Improvement]->(configuration)
create (ResolveToPackagedName_resolver)-[:Bug]->(embedder)
create (extension_In_case)-[:Bug]->(embedder)
create (extends_AbstractPathResolver)-[:Improvement]->(embedder)
create (start_from_next_character)-[:Improvement]->(embedder)
create (get_name_with_unescaped_characters)-[:Improvement]->(embedder)
create (ResolveToPackagedName_resolver)-[:Bug]->(StoryReporterBuilder)
create (extension_In_case)-[:Bug]->(StoryReporterBuilder)
create (extends_AbstractPathResolver)-[:Improvement]->(StoryReporterBuilder)
create (start_from_next_character)-[:Improvement]->(StoryReporterBuilder)
create (get_name_with_unescaped_characters)-[:Improvement]->(StoryReporterBuilder)
create (ResolveToPackagedName_resolver)-[:Bug]->(storyReporter)
create (extension_In_case)-[:Bug]->(storyReporter)
create (extends_AbstractPathResolver)-[:Improvement]->(storyReporter)
create (start_from_next_character)-[:Improvement]->(storyReporter)
create (get_name_with_unescaped_characters)-[:Improvement]->(storyReporter)
create (ResolveToPackagedName_resolver)-[:Bug]->(after)
create (extension_In_case)-[:Bug]->(after)
create (extends_AbstractPathResolver)-[:Improvement]->(after)
create (start_from_next_character)-[:Improvement]->(after)
create (get_name_with_unescaped_characters)-[:Improvement]->(after)
create (ResolveToPackagedName_resolver)-[:Bug]->(StoryReporterBuilder)
create (extension_In_case)-[:Bug]->(StoryReporterBuilder)
create (extends_AbstractPathResolver)-[:Improvement]->(StoryReporterBuilder)
create (start_from_next_character)-[:Improvement]->(StoryReporterBuilder)
create (get_name_with_unescaped_characters)-[:Improvement]->(StoryReporterBuilder)
create (ResolveToPackagedName_resolver)-[:Bug]->(StoryReporterBuilder)
create (extension_In_case)-[:Bug]->(StoryReporterBuilder)
create (extends_AbstractPathResolver)-[:Improvement]->(StoryReporterBuilder)
create (start_from_next_character)-[:Improvement]->(StoryReporterBuilder)
create (get_name_with_unescaped_characters)-[:Improvement]->(StoryReporterBuilder)
create (ResolveToPackagedName_resolver)-[:Bug]->(storyReporter)
create (extension_In_case)-[:Bug]->(storyReporter)
create (extends_AbstractPathResolver)-[:Improvement]->(storyReporter)
create (start_from_next_character)-[:Improvement]->(storyReporter)
create (get_name_with_unescaped_characters)-[:Improvement]->(storyReporter)
create (ResolveToPackagedName_resolver)-[:Bug]->(StoryLocation)
create (extension_In_case)-[:Bug]->(StoryLocation)
create (extends_AbstractPathResolver)-[:Improvement]->(StoryLocation)
create (start_from_next_character)-[:Improvement]->(StoryLocation)
create (get_name_with_unescaped_characters)-[:Improvement]->(StoryLocation)
create (bundled_steps:issue {name:'bundled steps'}) create (bundled_steps)-[:Bug]->(createInstanceOfType)
create (Support_for_based_AOP:issue {name:'Support for based AOP'}) create (Support_for_based_AOP)-[:Bug]->(createInstanceOfType)
create (assumes_use:issue {name:'assumes use'}) create (assumes_use)-[:Improvement]->(createInstanceOfType)
create (add_in_spring_setup:issue {name:'add in spring setup'}) create (add_in_spring_setup)-[:Improvement]->(createInstanceOfType)
create (assumes_use_of_specific_type_annotation:issue {name:'assumes use of specific type annotation'}) create (assumes_use_of_specific_type_annotation)-[:Improvement]->(createInstanceOfType)
create (stepsTypes:class {name:'stepsTypes', favoritecolor: 'green'}) create (bundled_steps)-[:Bug]->(stepsTypes)
create (Support_for_based_AOP)-[:Bug]->(stepsTypes)
create (assumes_use)-[:Improvement]->(stepsTypes)
create (add_in_spring_setup)-[:Improvement]->(stepsTypes)
create (assumes_use_of_specific_type_annotation)-[:Improvement]->(stepsTypes)
create (bundled_steps)-[:Bug]->(spring)
create (Support_for_based_AOP)-[:Bug]->(spring)
create (assumes_use)-[:Improvement]->(spring)
create (add_in_spring_setup)-[:Improvement]->(spring)
create (assumes_use_of_specific_type_annotation)-[:Improvement]->(spring)
create (bundled_steps)-[:Bug]->(asA)
create (Support_for_based_AOP)-[:Bug]->(asA)
create (assumes_use)-[:Improvement]->(asA)
create (add_in_spring_setup)-[:Improvement]->(asA)
create (assumes_use_of_specific_type_annotation)-[:Improvement]->(asA)
create (bundled_steps)-[:Bug]->(asA)
create (Support_for_based_AOP)-[:Bug]->(asA)
create (assumes_use)-[:Improvement]->(asA)
create (add_in_spring_setup)-[:Improvement]->(asA)
create (assumes_use_of_specific_type_annotation)-[:Improvement]->(asA)
create (bundled_steps)-[:Bug]->(scope)
create (Support_for_based_AOP)-[:Bug]->(scope)
create (assumes_use)-[:Improvement]->(scope)
create (add_in_spring_setup)-[:Improvement]->(scope)
create (assumes_use_of_specific_type_annotation)-[:Improvement]->(scope)
create (bundled_steps)-[:Bug]->(scope)
create (Support_for_based_AOP)-[:Bug]->(scope)
create (assumes_use)-[:Improvement]->(scope)
create (add_in_spring_setup)-[:Improvement]->(scope)
create (assumes_use_of_specific_type_annotation)-[:Improvement]->(scope)
create (bundled_steps)-[:Bug]->(Context)
create (Support_for_based_AOP)-[:Bug]->(Context)
create (assumes_use)-[:Improvement]->(Context)
create (add_in_spring_setup)-[:Improvement]->(Context)
create (assumes_use_of_specific_type_annotation)-[:Improvement]->(Context)
create (server_log:issue {name:'server log'}) create (server_log)-[:Bug]->(org_jbehave_core)
create (ERROR_in_DEPLOYMENT_mode:issue {name:'ERROR in DEPLOYMENT mode'}) create (ERROR_in_DEPLOYMENT_mode)-[:Bug]->(org_jbehave_core)
create (serializing_object_class:issue {name:'serializing object class'}) create (serializing_object_class)-[:Improvement]->(org_jbehave_core)
create (click_on_Run_story:issue {name:'click on Run story'}) create (click_on_Run_story)-[:Improvement]->(org_jbehave_core)
create (server_log)-[:Bug]->(org_jbehave_core_embedder)
create (ERROR_in_DEPLOYMENT_mode)-[:Bug]->(org_jbehave_core_embedder)
create (serializing_object_class)-[:Improvement]->(org_jbehave_core_embedder)
create (click_on_Run_story)-[:Improvement]->(org_jbehave_core_embedder)
create (server_log)-[:Bug]->(core)
create (ERROR_in_DEPLOYMENT_mode)-[:Bug]->(core)
create (serializing_object_class)-[:Improvement]->(core)
create (click_on_Run_story)-[:Improvement]->(core)
create (server_log)-[:Bug]->(embedder)
create (ERROR_in_DEPLOYMENT_mode)-[:Bug]->(embedder)
create (serializing_object_class)-[:Improvement]->(embedder)
create (click_on_Run_story)-[:Improvement]->(embedder)
create (server_log)-[:Bug]->(Context)
create (ERROR_in_DEPLOYMENT_mode)-[:Bug]->(Context)
create (serializing_object_class)-[:Improvement]->(Context)
create (click_on_Run_story)-[:Improvement]->(Context)
create (postcondition_per_scenario:issue {name:'postcondition per scenario'}) create (postcondition_per_scenario)-[:Bug]->(scenario)
create (define_single_scenario:issue {name:'define single scenario'}) create (define_single_scenario)-[:Improvement]->(scenario)
create (containing_logic_for_data_preparation:issue {name:'containing logic for data preparation'}) create (containing_logic_for_data_preparation)-[:Improvement]->(scenario)
create (postcondition_per_scenario)-[:Bug]->(scenario)
create (define_single_scenario)-[:Improvement]->(scenario)
create (containing_logic_for_data_preparation)-[:Improvement]->(scenario)
create (jbehave_site:issue {name:'jbehave site'}) create (jbehave_site)-[:Bug]->(outcome)
create (declares_in_html:issue {name:'declares in html'}) create (declares_in_html)-[:Bug]->(outcome)
create (jbehave_site__ascii_text_ascii_text_accented_chars_french_text_:issue {name:'jbehave site - -ascii text - ascii text - accented chars - french text - '}) create (jbehave_site__ascii_text_ascii_text_accented_chars_french_text_)-[:Improvement]->(outcome)
create (jbehave_site)-[:Bug]->(outcome)
create (declares_in_html)-[:Bug]->(outcome)
create (jbehave_site__ascii_text_ascii_text_accented_chars_french_text_)-[:Improvement]->(outcome)
create (running_time:issue {name:'running time'}) create (running_time)-[:Bug]->(show)
create (running_time_of_stories:issue {name:'running time of stories'}) create (running_time_of_stories)-[:Bug]->(show)
create (Provide_shutdown_hook:issue {name:'Provide shutdown hook'}) create (Provide_shutdown_hook)-[:Improvement]->(show)
create (accumulate_over_time:issue {name:'accumulate over time'}) create (accumulate_over_time)-[:Improvement]->(show)
create (Provide_shutdown_hook_for_story_cancellation:issue {name:'Provide shutdown hook for story cancellation'}) create (Provide_shutdown_hook_for_story_cancellation)-[:Improvement]->(show)
create (text_changes:issue {name:'text changes'}) create (text_changes)-[:Bug]->(hudson)
create (text_changes_to_jenkinshudson:issue {name:'text changes to jenkinshudson'}) create (text_changes_to_jenkinshudson)-[:Bug]->(hudson)
create (plugin_for_next_version:issue {name:'plugin for next version'}) create (plugin_for_next_version)-[:Improvement]->(hudson)
create (text_changes_next_version_did_a_few_text_few_text_few_text_changes_text_changes_:issue {name:'text changes - next version - did a few text - few text - few text changes - text changes - '}) create (text_changes_next_version_did_a_few_text_few_text_few_text_changes_text_changes_)-[:Improvement]->(hudson)
create (text_changes)-[:Bug]->(jenkins)
create (text_changes_to_jenkinshudson)-[:Bug]->(jenkins)
create (plugin_for_next_version)-[:Improvement]->(jenkins)
create (text_changes_next_version_did_a_few_text_few_text_few_text_changes_text_changes_)-[:Improvement]->(jenkins)
create (windows_line:issue {name:'windows line'}) create (windows_line)-[:Bug]->(ExamplesTable)
create (parses_files:issue {name:'parses files'}) create (parses_files)-[:Bug]->(ExamplesTable)
create (parses_files_with_line_endings:issue {name:'parses files with line endings'}) create (parses_files_with_line_endings)-[:Improvement]->(ExamplesTable)
create (First_page:issue {name:'First page'}) create (First_page)-[:Bug]->(ant)
create (First_page_with_missing_step_selection:issue {name:'First page with missing step selection'}) create (First_page_with_missing_step_selection)-[:Bug]->(ant)
create (Create_wizard:issue {name:'Create wizard'}) create (Create_wizard)-[:Improvement]->(ant)
create (add_new_methods_to_existing_class:issue {name:'add new methods to existing class'}) create (add_new_methods_to_existing_class)-[:Improvement]->(ant)
create (Create_a_wizard_Create_a_wizard_generate_step_generate_step_code_step_code_creating_a_wizard_creating_a_wizard_wizard_pages_First_page_missing_step_missing_step_selection_step_selection_missing_steps_generates_a_new_class_new_class_add_the_new_methods_new_methods_existing_class_Second_page_configure_the_method_configure_the_method_method_name_method_parameters_:issue {name:'Create a wizard - Create a wizard - generate step - generate step code - step code - creating a wizard - creating a wizard - wizard pages - First page - missing step - missing step selection - step selection - missing steps - generates a new class - new class - add the new methods - new methods - existing class - Second page - configure the method - configure the method - method name - method parameters - '}) create (Create_a_wizard_Create_a_wizard_generate_step_generate_step_code_step_code_creating_a_wizard_creating_a_wizard_wizard_pages_First_page_missing_step_missing_step_selection_step_selection_missing_steps_generates_a_new_class_new_class_add_the_new_methods_new_methods_existing_class_Second_page_configure_the_method_configure_the_method_method_name_method_parameters_)-[:Improvement]->(ant)
create (first_approach:issue {name:'first approach'}) create (first_approach)-[:Bug]->(core)
create (build_catalogue:issue {name:'build catalogue'}) create (build_catalogue)-[:Improvement]->(core)
create (build_catalogue_of_available_steps:issue {name:'build catalogue of available steps'}) create (build_catalogue_of_available_steps)-[:Improvement]->(core)
create (build_a_catalogue_build_a_catalogue_available_steps_steps_for_people_people_testers_write_scenarios_first_approach_:issue {name:'build a catalogue - build a catalogue - available steps - steps for people - people testers - write scenarios - first approach - '}) create (build_a_catalogue_build_a_catalogue_available_steps_steps_for_people_people_testers_write_scenarios_first_approach_)-[:Improvement]->(core)
create (first_approach)-[:Bug]->(scenario)
create (build_catalogue)-[:Improvement]->(scenario)
create (build_catalogue_of_available_steps)-[:Improvement]->(scenario)
create (build_a_catalogue_build_a_catalogue_available_steps_steps_for_people_people_testers_write_scenarios_first_approach_)-[:Improvement]->(scenario)
create (first_approach)-[:Bug]->(scenario)
create (build_catalogue)-[:Improvement]->(scenario)
create (build_catalogue_of_available_steps)-[:Improvement]->(scenario)
create (build_a_catalogue_build_a_catalogue_available_steps_steps_for_people_people_testers_write_scenarios_first_approach_)-[:Improvement]->(scenario)
create (Finnish_language:issue {name:'Finnish language'}) create (Finnish_language)-[:Bug]->(core)
create (Finnish_language_Finnish_language_support_language_support_Finnish_language_Finnish_language_translations_language_translations_translations_for_keywords_Pull_request_:issue {name:'Finnish language - Finnish language support - language support - Finnish language - Finnish language translations - language translations - translations for keywords - Pull request - '}) create (Finnish_language_Finnish_language_support_language_support_Finnish_language_Finnish_language_translations_language_translations_translations_for_keywords_Pull_request_)-[:Bug]->(core)
create (Finnish_language)-[:Bug]->(keywords)
create (Finnish_language_Finnish_language_support_language_support_Finnish_language_Finnish_language_translations_language_translations_translations_for_keywords_Pull_request_)-[:Bug]->(keywords)
create (Finnish_language)-[:Bug]->(keywords)
create (Finnish_language_Finnish_language_support_language_support_Finnish_language_Finnish_language_translations_language_translations_translations_for_keywords_Pull_request_)-[:Bug]->(keywords)
create (Composite_steps)-[:Bug]->(ant)
create (alternative_for_GivenStories:issue {name:'alternative for GivenStories'}) create (alternative_for_GivenStories)-[:Bug]->(ant)
create (compose_steps)-[:Improvement]->(ant)
create (have_At_moment:issue {name:'have At moment'}) create (have_At_moment)-[:Improvement]->(ant)
create (using_existing_steps_in_text_format:issue {name:'using existing steps in text format'}) create (using_existing_steps_in_text_format)-[:Improvement]->(ant)
create (Composite_steps)-[:Bug]->(composite)
create (alternative_for_GivenStories)-[:Bug]->(composite)
create (compose_steps)-[:Improvement]->(composite)
create (have_At_moment)-[:Improvement]->(composite)
create (using_existing_steps_in_text_format)-[:Improvement]->(composite)
create (Composite_steps)-[:Bug]->(composite)
create (alternative_for_GivenStories)-[:Bug]->(composite)
create (compose_steps)-[:Improvement]->(composite)
create (have_At_moment)-[:Improvement]->(composite)
create (using_existing_steps_in_text_format)-[:Improvement]->(composite)
create (Composite_steps)-[:Bug]->(scenario)
create (alternative_for_GivenStories)-[:Bug]->(scenario)
create (compose_steps)-[:Improvement]->(scenario)
create (have_At_moment)-[:Improvement]->(scenario)
create (using_existing_steps_in_text_format)-[:Improvement]->(scenario)
create (Composite_steps)-[:Bug]->(scenario)
create (alternative_for_GivenStories)-[:Bug]->(scenario)
create (compose_steps)-[:Improvement]->(scenario)
create (have_At_moment)-[:Improvement]->(scenario)
create (using_existing_steps_in_text_format)-[:Improvement]->(scenario)
create (Composite_steps)-[:Bug]->(Composite)
create (alternative_for_GivenStories)-[:Bug]->(Composite)
create (compose_steps)-[:Improvement]->(Composite)
create (have_At_moment)-[:Improvement]->(Composite)
create (using_existing_steps_in_text_format)-[:Improvement]->(Composite)
create (Composite_steps)-[:Bug]->(GivenStories)
create (alternative_for_GivenStories)-[:Bug]->(GivenStories)
create (compose_steps)-[:Improvement]->(GivenStories)
create (have_At_moment)-[:Improvement]->(GivenStories)
create (using_existing_steps_in_text_format)-[:Improvement]->(GivenStories)
create (date_values:issue {name:'date values'}) create (date_values)-[:Bug]->(org_jbehave_core)
create (problem_with_freemarker_plugin:issue {name:'problem with freemarker plugin'}) create (problem_with_freemarker_plugin)-[:Bug]->(org_jbehave_core)
create (makes_error:issue {name:'makes error'}) create (makes_error)-[:Improvement]->(org_jbehave_core)
create (are_in_use:issue {name:'are in use'}) create (are_in_use)-[:Improvement]->(org_jbehave_core)
create (makes_error_in_freemarker:issue {name:'makes error in freemarker'}) create (makes_error_in_freemarker)-[:Improvement]->(org_jbehave_core)
create (date_values)-[:Bug]->(org_jbehave_core_embedder)
create (problem_with_freemarker_plugin)-[:Bug]->(org_jbehave_core_embedder)
create (makes_error)-[:Improvement]->(org_jbehave_core_embedder)
create (are_in_use)-[:Improvement]->(org_jbehave_core_embedder)
create (makes_error_in_freemarker)-[:Improvement]->(org_jbehave_core_embedder)
create (date_values)-[:Bug]->(org_jbehave_core_reporters)
create (problem_with_freemarker_plugin)-[:Bug]->(org_jbehave_core_reporters)
create (makes_error)-[:Improvement]->(org_jbehave_core_reporters)
create (are_in_use)-[:Improvement]->(org_jbehave_core_reporters)
create (makes_error_in_freemarker)-[:Improvement]->(org_jbehave_core_reporters)
create (date_values)-[:Bug]->(core)
create (problem_with_freemarker_plugin)-[:Bug]->(core)
create (makes_error)-[:Improvement]->(core)
create (are_in_use)-[:Improvement]->(core)
create (makes_error_in_freemarker)-[:Improvement]->(core)
create (date_values)-[:Bug]->(configuration)
create (problem_with_freemarker_plugin)-[:Bug]->(configuration)
create (makes_error)-[:Improvement]->(configuration)
create (are_in_use)-[:Improvement]->(configuration)
create (makes_error_in_freemarker)-[:Improvement]->(configuration)
create (date_values)-[:Bug]->(embedder)
create (problem_with_freemarker_plugin)-[:Bug]->(embedder)
create (makes_error)-[:Improvement]->(embedder)
create (are_in_use)-[:Improvement]->(embedder)
create (makes_error_in_freemarker)-[:Improvement]->(embedder)
create (date_values)-[:Bug]->(keywords)
create (problem_with_freemarker_plugin)-[:Bug]->(keywords)
create (makes_error)-[:Improvement]->(keywords)
create (are_in_use)-[:Improvement]->(keywords)
create (makes_error_in_freemarker)-[:Improvement]->(keywords)
create (date_values)-[:Bug]->(failed)
create (problem_with_freemarker_plugin)-[:Bug]->(failed)
create (makes_error)-[:Improvement]->(failed)
create (are_in_use)-[:Improvement]->(failed)
create (makes_error_in_freemarker)-[:Improvement]->(failed)
create (date_values)-[:Bug]->(after)
create (problem_with_freemarker_plugin)-[:Bug]->(after)
create (makes_error)-[:Improvement]->(after)
create (are_in_use)-[:Improvement]->(after)
create (makes_error_in_freemarker)-[:Improvement]->(after)
create (date_values)-[:Bug]->(keywords)
create (problem_with_freemarker_plugin)-[:Bug]->(keywords)
create (makes_error)-[:Improvement]->(keywords)
create (are_in_use)-[:Improvement]->(keywords)
create (makes_error_in_freemarker)-[:Improvement]->(keywords)
create (date_values)-[:Bug]->(Context)
create (problem_with_freemarker_plugin)-[:Bug]->(Context)
create (makes_error)-[:Improvement]->(Context)
create (are_in_use)-[:Improvement]->(Context)
create (makes_error_in_freemarker)-[:Improvement]->(Context)
create (navigator_report:issue {name:'navigator report'}) create (navigator_report)-[:Bug]->(rest)
create (change_to_title_storyName:issue {name:'change to title storyName'}) create (change_to_title_storyName)-[:Bug]->(rest)
create (support_special_char:issue {name:'support special char'}) create (support_special_char)-[:Improvement]->(rest)
create (have_problem_with__char:issue {name:'have problem with  char'}) create (have_problem_with__char)-[:Improvement]->(rest)
create (navigator_report)-[:Bug]->(scope)
create (change_to_title_storyName)-[:Bug]->(scope)
create (support_special_char)-[:Improvement]->(scope)
create (have_problem_with__char)-[:Improvement]->(scope)
create (navigator_report)-[:Bug]->(scope)
create (change_to_title_storyName)-[:Bug]->(scope)
create (support_special_char)-[:Improvement]->(scope)
create (have_problem_with__char)-[:Improvement]->(scope)
create (navigator_report)-[:Bug]->(show)
create (change_to_title_storyName)-[:Bug]->(show)
create (support_special_char)-[:Improvement]->(show)
create (have_problem_with__char)-[:Improvement]->(show)
create (odf_unit:issue {name:'odf unit'}) create (odf :class {name:'odf ', favoritecolor: 'green'}) create (odf_unit)-[:Bug]->(odf)
create (fails_story_tests:issue {name:'fails story tests'}) create (fails_story_tests)-[:Bug]->(odf)
create (fails_story_tests_for_odf_fail:issue {name:'fails story tests for odf fail'}) create (fails_story_tests_for_odf_fail)-[:Improvement]->(odf)
create (odf_unit_odf_unit_test_unit_test_crlf_issue_story_tests_tests_for_odf_odf_fail_crlf_differences_added_a_comparison_added_a_comparison_other_tests_:issue {name:'odf unit - odf unit test - unit test - crlf issue - story tests - tests for odf - odf fail - crlf differences - added a comparison - added a comparison - other tests - '}) create (odf_unit_odf_unit_test_unit_test_crlf_issue_story_tests_tests_for_odf_odf_fail_crlf_differences_added_a_comparison_added_a_comparison_other_tests_)-[:Improvement]->(odf)
create (StepCandidate_class:issue {name:'StepCandidate class'}) create (StepCandidate_class)-[:Bug]->(show)
create (Expose_stepsType:issue {name:'Expose stepsType'}) create (Expose_stepsType)-[:Bug]->(show)
create (integrating_with_junit_runner:issue {name:'integrating with junit runner'}) create (integrating_with_junit_runner)-[:Improvement]->(show)
create (expose_actual_Class_type_for_implementing_class_type:issue {name:'expose actual Class type for implementing class type'}) create (expose_actual_Class_type_for_implementing_class_type)-[:Improvement]->(show)
create (Expose_the_stepsType_Expose_the_stepsType_expose_the_actual_Class_actual_Class_actual_Class_type_Class_type_implementing_class_implementing_class_type_class_type_instantiate_the_step_instantiate_the_step_creates_a_problem_creates_a_problem_class_type_showing_an_example_showing_an_example_:issue {name:'Expose the stepsType - Expose the stepsType - expose the actual Class - actual Class - actual Class type - Class type - implementing class - implementing class type - class type - instantiate the step - instantiate the step - creates a problem - creates a problem - class type - showing an example - showing an example - '}) create (Expose_the_stepsType_Expose_the_stepsType_expose_the_actual_Class_actual_Class_actual_Class_type_Class_type_implementing_class_implementing_class_type_class_type_instantiate_the_step_instantiate_the_step_creates_a_problem_creates_a_problem_class_type_showing_an_example_showing_an_example_)-[:Improvement]->(show)
create (new_wizard:issue {name:'new wizard'}) create (new_wizard)-[:Bug]->(show)
create (Create_eclipse_category:issue {name:'Create eclipse category'}) create (Create_eclipse_category)-[:Bug]->(show)
create (Create_new_category_in_eclipse:issue {name:'Create new category in eclipse'}) create (Create_new_category_in_eclipse)-[:Improvement]->(show)
create (Create_a_eclipse_Create_a_eclipse_eclipse_category_new_wizard_create_stories_Create_a_new_category_new_category_category_in_eclipse_Create_a_new_file_new_file_new_file_wizar_file_wizar_create_stories_:issue {name:'Create a eclipse - Create a eclipse - eclipse category - new wizard - create stories - Create a new category - new category - category in eclipse - Create a new file - new file - new file wizar - file wizar - create stories - '}) create (Create_a_eclipse_Create_a_eclipse_eclipse_category_new_wizard_create_stories_Create_a_new_category_new_category_category_in_eclipse_Create_a_new_file_new_file_new_file_wizar_file_wizar_create_stories_)-[:Improvement]->(show)
create (tests_with_tag:issue {name:'tests with tag'}) create (tests_with_tag)-[:Bug]->(meta)
create (Allow_puncuation_characters:issue {name:'Allow puncuation characters'}) create (Allow_puncuation_characters)-[:Bug]->(meta)
create (Allow_puncuation_characters_in_default_meta_filters:issue {name:'Allow puncuation characters in default meta filters'}) create (Allow_puncuation_characters_in_default_meta_filters)-[:Improvement]->(meta)
create (Allow_puncuation_Allow_puncuation_characters_puncuation_characters_characters_in_default_meta_filters_running_tests_following_command_remove_the_colon_remove_the_colon_same_results_:issue {name:'Allow puncuation - Allow puncuation characters - puncuation characters - characters in default - meta filters - running tests - following command - remove the colon - remove the colon - same results - '}) create (Allow_puncuation_Allow_puncuation_characters_puncuation_characters_characters_in_default_meta_filters_running_tests_following_command_remove_the_colon_remove_the_colon_same_results_)-[:Improvement]->(meta)
create (tests_with_tag)-[:Bug]->(meta)
create (Allow_puncuation_characters)-[:Bug]->(meta)
create (Allow_puncuation_characters_in_default_meta_filters)-[:Improvement]->(meta)
create (Allow_puncuation_Allow_puncuation_characters_puncuation_characters_characters_in_default_meta_filters_running_tests_following_command_remove_the_colon_remove_the_colon_same_results_)-[:Improvement]->(meta)
create (JBehave_report:issue {name:'JBehave report'}) create (JBehave_report)-[:Bug]->(keywords)
create (uses_code_variable_keyword_table:issue {name:'uses code variable keyword table'}) create (uses_code_variable_keyword_table)-[:Bug]->(keywords)
create (is_in_IS_VALIDN:issue {name:'is in |IS_VALID|N|'}) create (is_in_IS_VALIDN)-[:Improvement]->(keywords)
create (string_and_table_string_and_table_parameters_table_parameters_table_parameters_fixture_parameters_fixture_parameters_fixture_code_fixture_code_variable_keyword_public_void_checkSomethingString_variable_ExamplesTable_table_keywords_variable_:issue {name:'string and table - string and table parameters - table parameters - table parameters fixture - parameters fixture - parameters fixture code - fixture code - variable keyword - public void - checkSomethingString variable - ExamplesTable table - keywords variable - '}) create (string_and_table_string_and_table_parameters_table_parameters_table_parameters_fixture_parameters_fixture_parameters_fixture_code_fixture_code_variable_keyword_public_void_checkSomethingString_variable_ExamplesTable_table_keywords_variable_)-[:Improvement]->(keywords)
create (JBehave_report)-[:Bug]->(keywords)
create (uses_code_variable_keyword_table)-[:Bug]->(keywords)
create (is_in_IS_VALIDN)-[:Improvement]->(keywords)
create (string_and_table_string_and_table_parameters_table_parameters_table_parameters_fixture_parameters_fixture_parameters_fixture_code_fixture_code_variable_keyword_public_void_checkSomethingString_variable_ExamplesTable_table_keywords_variable_)-[:Improvement]->(keywords)
create (JBehave_report)-[:Bug]->(ExamplesTable)
create (uses_code_variable_keyword_table)-[:Bug]->(ExamplesTable)
create (is_in_IS_VALIDN)-[:Improvement]->(ExamplesTable)
create (string_and_table_string_and_table_parameters_table_parameters_table_parameters_fixture_parameters_fixture_parameters_fixture_code_fixture_code_variable_keyword_public_void_checkSomethingString_variable_ExamplesTable_table_keywords_variable_)-[:Improvement]->(ExamplesTable)
create (List_findPaths:issue {name:'List findPaths'}) create (findPaths:class {name:'findPaths', favoritecolor: 'green'}) create (List_findPaths)-[:Bug]->(findPaths)
create (other_urls_than_file:issue {name:'other urls than file'}) create (other_urls_than_file)-[:Bug]->(findPaths)
create (missing_parameter_URL:issue {name:'missing parameter URL'}) create (missing_parameter_URL)-[:Improvement]->(findPaths)
create (uses_String_for_searchIn:issue {name:'uses String for searchIn'}) create (uses_String_for_searchIn)-[:Improvement]->(findPaths)
create (missing_the_parameter_missing_the_parameter_parameter_variants_missing_URL_actual_implementation_uses_a_String_uses_a_String_String_for_searchIn_converts_the_URL_converts_the_URL_other_urls_urls_than_file_:issue {name:'missing the parameter - missing the parameter - parameter variants - missing URL - actual implementation - uses a String - uses a String - String for searchIn - converts the URL - converts the URL - other urls - urls than file - '}) create (missing_the_parameter_missing_the_parameter_parameter_variants_missing_URL_actual_implementation_uses_a_String_uses_a_String_String_for_searchIn_converts_the_URL_converts_the_URL_other_urls_urls_than_file_)-[:Improvement]->(findPaths)
create (List_findPaths)-[:Bug]->(StoryFinder)
create (other_urls_than_file)-[:Bug]->(StoryFinder)
create (missing_parameter_URL)-[:Improvement]->(StoryFinder)
create (uses_String_for_searchIn)-[:Improvement]->(StoryFinder)
create (missing_the_parameter_missing_the_parameter_parameter_variants_missing_URL_actual_implementation_uses_a_String_uses_a_String_String_for_searchIn_converts_the_URL_converts_the_URL_other_urls_urls_than_file_)-[:Improvement]->(StoryFinder)
create (set_from_first_step:issue {name:'set from first step'}) create (set_from_first_step)-[:Bug]->(scenario)
create (aliasing_step_method:issue {name:'aliasing step method'}) create (aliasing_step_method)-[:Improvement]->(scenario)
create (aliasing_step_method_with_table_parameter:issue {name:'aliasing step method with table parameter'}) create (aliasing_step_method_with_table_parameter)-[:Improvement]->(scenario)
create (set_from_first_step)-[:Bug]->(scenario)
create (aliasing_step_method)-[:Improvement]->(scenario)
create (aliasing_step_method_with_table_parameter)-[:Improvement]->(scenario)
create (platform_line:issue {name:'platform line'}) create (platform_line)-[:Bug]->(toString)
create (formatting_stack_traces:issue {name:'formatting stack traces'}) create (formatting_stack_traces)-[:Bug]->(toString)
create (according_to_line_endings:issue {name:'according to line endings'}) create (according_to_line_endings)-[:Improvement]->(toString)
create (get_text_for_stack_trace:issue {name:'get text for stack trace'}) create (get_text_for_stack_trace)-[:Improvement]->(toString)
create (formatting_stack_formatting_stack_traces_stack_traces_get_the_text_get_the_text_stack_trace_platform_line_platform_line_endings_line_endings_line_endings_cause_the_patterns_cause_the_patterns_added_a_unit_added_a_unit_unit_test_:issue {name:'formatting stack - formatting stack traces - stack traces - get the text - get the text - stack trace - platform line - platform line endings - line endings - line endings - cause the patterns - cause the patterns - added a unit - added a unit - unit test - '}) create (formatting_stack_formatting_stack_traces_stack_traces_get_the_text_get_the_text_stack_trace_platform_line_platform_line_endings_line_endings_line_endings_cause_the_patterns_cause_the_patterns_added_a_unit_added_a_unit_unit_test_)-[:Improvement]->(toString)
create (platform_line)-[:Bug]->(toString)
create (formatting_stack_traces)-[:Bug]->(toString)
create (according_to_line_endings)-[:Improvement]->(toString)
create (get_text_for_stack_trace)-[:Improvement]->(toString)
create (formatting_stack_formatting_stack_traces_stack_traces_get_the_text_get_the_text_stack_trace_platform_line_platform_line_endings_line_endings_line_endings_cause_the_patterns_cause_the_patterns_added_a_unit_added_a_unit_unit_test_)-[:Improvement]->(toString)
create (Allow_meta_filtering:issue {name:'Allow meta filtering'}) create (Allow_meta_filtering)-[:Bug]->(meta)
create (Allow_meta_filtering_on_example_scenarios:issue {name:'Allow meta filtering on example scenarios'}) create (Allow_meta_filtering_on_example_scenarios)-[:Improvement]->(meta)
create (Allow_meta_filtering)-[:Bug]->(meta)
create (Allow_meta_filtering_on_example_scenarios)-[:Improvement]->(meta)
create (Allow_meta_filtering)-[:Bug]->(scenario)
create (Allow_meta_filtering_on_example_scenarios)-[:Improvement]->(scenario)
create (Allow_meta_filtering)-[:Bug]->(scenario)
create (Allow_meta_filtering_on_example_scenarios)-[:Improvement]->(scenario)
create (Support_synonyms:issue {name:'Support synonyms'}) create (Support_synonyms)-[:Bug]->(keywords)
create (currency_as_GBP:issue {name:'currency as GBP'}) create (currency_as_GBP)-[:Bug]->(keywords)
create (describe_business_case:issue {name:'describe business case'}) create (describe_business_case)-[:Improvement]->(keywords)
create (synonyms_with_same_functionality:issue {name:'synonyms with same functionality'}) create (synonyms_with_same_functionality)-[:Improvement]->(keywords)
create (sounding_bit_to_fade:issue {name:'sounding bit to fade'}) create (sounding_bit_to_fade)-[:Improvement]->(keywords)
create (Support_synonyms_synonyms_of_step_starting_keywords_describe_a_business_describe_a_business_business_case_long_one_more_steps_sounding_a_bit_sounding_a_bit_bit_to_fade_same_functionality_Given_our_Payments_Payments_system_transaction_message_exchange_rate_transaction_date_next_business_next_business_day_business_day_transaction_amount_rewrite_the_story_rewrite_the_story_Given_our_Payments_Payments_system_transaction_message_currency_as_USD_exchange_rate_:issue {name:'Support synonyms - synonyms of step - starting keywords - describe a business - describe a business - business case - long one - more steps - sounding a bit - sounding a bit - bit to fade - same functionality - Given our Payments - Payments system - transaction message - exchange rate - transaction date - next business - next business day - business day - transaction amount - rewrite the story - rewrite the story - Given our Payments - Payments system - transaction message - currency as USD - exchange rate - '}) create (Support_synonyms_synonyms_of_step_starting_keywords_describe_a_business_describe_a_business_business_case_long_one_more_steps_sounding_a_bit_sounding_a_bit_bit_to_fade_same_functionality_Given_our_Payments_Payments_system_transaction_message_exchange_rate_transaction_date_next_business_next_business_day_business_day_transaction_amount_rewrite_the_story_rewrite_the_story_Given_our_Payments_Payments_system_transaction_message_currency_as_USD_exchange_rate_)-[:Bug]->(keywords)
create (Support_synonyms)-[:Bug]->(scenario)
create (currency_as_GBP)-[:Bug]->(scenario)
create (describe_business_case)-[:Improvement]->(scenario)
create (synonyms_with_same_functionality)-[:Improvement]->(scenario)
create (sounding_bit_to_fade)-[:Improvement]->(scenario)
create (Support_synonyms_synonyms_of_step_starting_keywords_describe_a_business_describe_a_business_business_case_long_one_more_steps_sounding_a_bit_sounding_a_bit_bit_to_fade_same_functionality_Given_our_Payments_Payments_system_transaction_message_exchange_rate_transaction_date_next_business_next_business_day_business_day_transaction_amount_rewrite_the_story_rewrite_the_story_Given_our_Payments_Payments_system_transaction_message_currency_as_USD_exchange_rate_)-[:Bug]->(scenario)
create (Support_synonyms)-[:Bug]->(scenario)
create (currency_as_GBP)-[:Bug]->(scenario)
create (describe_business_case)-[:Improvement]->(scenario)
create (synonyms_with_same_functionality)-[:Improvement]->(scenario)
create (sounding_bit_to_fade)-[:Improvement]->(scenario)
create (Support_synonyms_synonyms_of_step_starting_keywords_describe_a_business_describe_a_business_business_case_long_one_more_steps_sounding_a_bit_sounding_a_bit_bit_to_fade_same_functionality_Given_our_Payments_Payments_system_transaction_message_exchange_rate_transaction_date_next_business_next_business_day_business_day_transaction_amount_rewrite_the_story_rewrite_the_story_Given_our_Payments_Payments_system_transaction_message_currency_as_USD_exchange_rate_)-[:Bug]->(scenario)
create (Support_synonyms)-[:Bug]->(keywords)
create (currency_as_GBP)-[:Bug]->(keywords)
create (describe_business_case)-[:Improvement]->(keywords)
create (synonyms_with_same_functionality)-[:Improvement]->(keywords)
create (sounding_bit_to_fade)-[:Improvement]->(keywords)
create (Support_synonyms_synonyms_of_step_starting_keywords_describe_a_business_describe_a_business_business_case_long_one_more_steps_sounding_a_bit_sounding_a_bit_bit_to_fade_same_functionality_Given_our_Payments_Payments_system_transaction_message_exchange_rate_transaction_date_next_business_next_business_day_business_day_transaction_amount_rewrite_the_story_rewrite_the_story_Given_our_Payments_Payments_system_transaction_message_currency_as_USD_exchange_rate_)-[:Bug]->(keywords)
create (localised_story:issue {name:'localised story'}) create (localised_story)-[:Bug]->(given)
create (locale_of_given_story:issue {name:'locale of given story'}) create (locale_of_given_story)-[:Bug]->(given)
create (Allow_specification:issue {name:'Allow specification'}) create (Allow_specification)-[:Improvement]->(given)
create (Allow_specification_of_locale:issue {name:'Allow specification of locale'}) create (Allow_specification_of_locale)-[:Improvement]->(given)
create (Allow_specification_textual_story_given_story_localised_story_:issue {name:'Allow specification - textual story - given story - localised story - '}) create (Allow_specification_textual_story_given_story_localised_story_)-[:Improvement]->(given)
create (test_resolution:issue {name:'test resolution'}) create (test_resolution)-[:Bug]->(scope)
create (allows_use_of_mojo:issue {name:'allows use of mojo'}) create (allows_use_of_mojo)-[:Improvement]->(scope)
create (test_resolution)-[:Bug]->(scope)
create (allows_use_of_mojo)-[:Improvement]->(scope)
create (Report_files:issue {name:'Report files'}) create (Report_files)-[:Bug]->(embedder)
create (execution_of_embedder_completes:issue {name:'execution of embedder completes'}) create (execution_of_embedder_completes)-[:Bug]->(embedder)
create (running_embedder:issue {name:'running embedder'}) create (running_embedder)-[:Improvement]->(embedder)
create (running_embedder_as_part:issue {name:'running embedder as part'}) create (running_embedder_as_part)-[:Improvement]->(embedder)
create (Report_files_running_an_embedder_running_an_embedder_embedder_as_part_java_application_embedder_completes_see_files_see_files_on_disk_files_on_disk_small_size_exit_the_java_process_java_process_:issue {name:'Report files - running an embedder - running an embedder - embedder as part - java application - embedder completes - see files - see files on disk - files on disk - small size - exit the java process - java process - '}) create (Report_files_running_an_embedder_running_an_embedder_embedder_as_part_java_application_embedder_completes_see_files_see_files_on_disk_files_on_disk_small_size_exit_the_java_process_java_process_)-[:Improvement]->(embedder)
create (Report_files)-[:Bug]->(close)
create (execution_of_embedder_completes)-[:Bug]->(close)
create (running_embedder)-[:Improvement]->(close)
create (running_embedder_as_part)-[:Improvement]->(close)
create (Report_files_running_an_embedder_running_an_embedder_embedder_as_part_java_application_embedder_completes_see_files_see_files_on_disk_files_on_disk_small_size_exit_the_java_process_java_process_)-[:Improvement]->(close)
create (defined_ones:issue {name:'defined ones'}) create (defined_ones)-[:Bug]->(meta)
create (Allow_grouping:issue {name:'Allow grouping'}) create (Allow_grouping)-[:Bug]->(meta)
create (Allow_grouping_of_stories:issue {name:'Allow grouping of stories'}) create (Allow_grouping_of_stories)-[:Improvement]->(meta)
create (Allow_grouping_Allow_grouping_of_stories_grouping_of_stories_stories_and_scenarios_Introduce_the_concept_Introduce_the_concept_concept_of_group_group_of_stories_stories_or_scenarios_new_keyword_reference_stories_stories_and_scenarios_run_context_same_textual_input_textual_input_use_story_story_and_scenario_meta_data_defined_tags_tags_or_user_defined_ones_determine_its_content_execution_context_allow_repetition_allow_repetition_of_stories_repetition_of_stories_stories_or_scenarios_overall_directives_directives_and_failsuccess_directives_and_failsuccess_criteria_failsuccess_criteria_:issue {name:'Allow grouping - Allow grouping of stories - grouping of stories - stories and scenarios - Introduce the concept - Introduce the concept - concept of group - group of stories - stories or scenarios - new keyword - reference stories - stories and scenarios - run context - same textual input - textual input - use story - story and scenario - meta data - defined tags - tags or user - defined ones - determine its content - execution context - allow repetition - allow repetition of stories - repetition of stories - stories or scenarios - overall directives - directives and failsuccess - directives and failsuccess criteria - failsuccess criteria - '}) create (Allow_grouping_Allow_grouping_of_stories_grouping_of_stories_stories_and_scenarios_Introduce_the_concept_Introduce_the_concept_concept_of_group_group_of_stories_stories_or_scenarios_new_keyword_reference_stories_stories_and_scenarios_run_context_same_textual_input_textual_input_use_story_story_and_scenario_meta_data_defined_tags_tags_or_user_defined_ones_determine_its_content_execution_context_allow_repetition_allow_repetition_of_stories_repetition_of_stories_stories_or_scenarios_overall_directives_directives_and_failsuccess_directives_and_failsuccess_criteria_failsuccess_criteria_)-[:Improvement]->(meta)
create (defined_ones)-[:Bug]->(meta)
create (Allow_grouping)-[:Bug]->(meta)
create (Allow_grouping_of_stories)-[:Improvement]->(meta)
create (Allow_grouping_Allow_grouping_of_stories_grouping_of_stories_stories_and_scenarios_Introduce_the_concept_Introduce_the_concept_concept_of_group_group_of_stories_stories_or_scenarios_new_keyword_reference_stories_stories_and_scenarios_run_context_same_textual_input_textual_input_use_story_story_and_scenario_meta_data_defined_tags_tags_or_user_defined_ones_determine_its_content_execution_context_allow_repetition_allow_repetition_of_stories_repetition_of_stories_stories_or_scenarios_overall_directives_directives_and_failsuccess_directives_and_failsuccess_criteria_failsuccess_criteria_)-[:Improvement]->(meta)
create (defined_ones)-[:Bug]->(scenario)
create (Allow_grouping)-[:Bug]->(scenario)
create (Allow_grouping_of_stories)-[:Improvement]->(scenario)
create (Allow_grouping_Allow_grouping_of_stories_grouping_of_stories_stories_and_scenarios_Introduce_the_concept_Introduce_the_concept_concept_of_group_group_of_stories_stories_or_scenarios_new_keyword_reference_stories_stories_and_scenarios_run_context_same_textual_input_textual_input_use_story_story_and_scenario_meta_data_defined_tags_tags_or_user_defined_ones_determine_its_content_execution_context_allow_repetition_allow_repetition_of_stories_repetition_of_stories_stories_or_scenarios_overall_directives_directives_and_failsuccess_directives_and_failsuccess_criteria_failsuccess_criteria_)-[:Improvement]->(scenario)
create (defined_ones)-[:Bug]->(scenario)
create (Allow_grouping)-[:Bug]->(scenario)
create (Allow_grouping_of_stories)-[:Improvement]->(scenario)
create (Allow_grouping_Allow_grouping_of_stories_grouping_of_stories_stories_and_scenarios_Introduce_the_concept_Introduce_the_concept_concept_of_group_group_of_stories_stories_or_scenarios_new_keyword_reference_stories_stories_and_scenarios_run_context_same_textual_input_textual_input_use_story_story_and_scenario_meta_data_defined_tags_tags_or_user_defined_ones_determine_its_content_execution_context_allow_repetition_allow_repetition_of_stories_repetition_of_stories_stories_or_scenarios_overall_directives_directives_and_failsuccess_directives_and_failsuccess_criteria_failsuccess_criteria_)-[:Improvement]->(scenario)
create (supported_syntax:issue {name:'supported syntax'}) create (supported_syntax)-[:Bug]->(ant)
create (Support_for_alternative_narratives:issue {name:'Support for alternative narratives'}) create (Support_for_alternative_narratives)-[:Bug]->(ant)
create (change_syntax:issue {name:'change syntax'}) create (change_syntax)-[:Improvement]->(ant)
create (is_in_order:issue {name:'is In order'}) create (is_in_order)-[:Improvement]->(ant)
create (change_syntax_for_scenarios:issue {name:'change syntax for scenarios'}) create (change_syntax_for_scenarios)-[:Improvement]->(ant)
create (alternative_narratives_narratives_in_stories_change_the_syntax_change_the_syntax_supported_syntax_like_the_ability_like_the_ability_have_a_place_have_a_place_change_the_Key_words_Key_words_:issue {name:'alternative narratives - narratives in stories - change the syntax - change the syntax - supported syntax - like the ability - like the ability - have a place - have a place - change the Key words - Key words - '}) create (alternative_narratives_narratives_in_stories_change_the_syntax_change_the_syntax_supported_syntax_like_the_ability_like_the_ability_have_a_place_have_a_place_change_the_Key_words_Key_words_)-[:Bug]->(ant)
create (supported_syntax)-[:Bug]->(narrative)
create (Support_for_alternative_narratives)-[:Bug]->(narrative)
create (change_syntax)-[:Improvement]->(narrative)
create (is_in_order)-[:Improvement]->(narrative)
create (change_syntax_for_scenarios)-[:Improvement]->(narrative)
create (alternative_narratives_narratives_in_stories_change_the_syntax_change_the_syntax_supported_syntax_like_the_ability_like_the_ability_have_a_place_have_a_place_change_the_Key_words_Key_words_)-[:Bug]->(narrative)
create (supported_syntax)-[:Bug]->(narrative)
create (Support_for_alternative_narratives)-[:Bug]->(narrative)
create (change_syntax)-[:Improvement]->(narrative)
create (is_in_order)-[:Improvement]->(narrative)
create (change_syntax_for_scenarios)-[:Improvement]->(narrative)
create (alternative_narratives_narratives_in_stories_change_the_syntax_change_the_syntax_supported_syntax_like_the_ability_like_the_ability_have_a_place_have_a_place_change_the_Key_words_Key_words_)-[:Bug]->(narrative)
create (supported_syntax)-[:Bug]->(scenario)
create (Support_for_alternative_narratives)-[:Bug]->(scenario)
create (change_syntax)-[:Improvement]->(scenario)
create (is_in_order)-[:Improvement]->(scenario)
create (change_syntax_for_scenarios)-[:Improvement]->(scenario)
create (alternative_narratives_narratives_in_stories_change_the_syntax_change_the_syntax_supported_syntax_like_the_ability_like_the_ability_have_a_place_have_a_place_change_the_Key_words_Key_words_)-[:Bug]->(scenario)
create (supported_syntax)-[:Bug]->(scenario)
create (Support_for_alternative_narratives)-[:Bug]->(scenario)
create (change_syntax)-[:Improvement]->(scenario)
create (is_in_order)-[:Improvement]->(scenario)
create (change_syntax_for_scenarios)-[:Improvement]->(scenario)
create (alternative_narratives_narratives_in_stories_change_the_syntax_change_the_syntax_supported_syntax_like_the_ability_like_the_ability_have_a_place_have_a_place_change_the_Key_words_Key_words_)-[:Bug]->(scenario)
create (incompatible_version_:issue {name:'incompatible version - '}) create (incompatible_version_)-[:Bug]->(maven)
create (null_displays:issue {name:'null displays'}) create (null_displays)-[:Bug]->(spring)
create (null_displays_for_Scenario_name:issue {name:'null displays for Scenario name'}) create (null_displays_for_Scenario_name)-[:Bug]->(spring)
create (reproduce_Start:issue {name:'reproduce Start'}) create (reproduce_Start)-[:Improvement]->(spring)
create (reproduce_Start_from_archetype_Configure:issue {name:'reproduce Start from archetype Configure'}) create (reproduce_Start_from_archetype_Configure)-[:Improvement]->(spring)
create (null_displays__null__null__null__run_the_same_stories_same_stories_using_embedderControls_name_displays_:issue {name:'null displays - _null - _null_ - null_ - run the same stories - same stories - using embedderControls - name displays - '}) create (null_displays__null__null__null__run_the_same_stories_same_stories_using_embedderControls_name_displays_)-[:Improvement]->(spring)
create (null_displays)-[:Bug]->(configuredEmbedder)
create (null_displays_for_Scenario_name)-[:Bug]->(configuredEmbedder)
create (reproduce_Start)-[:Improvement]->(configuredEmbedder)
create (reproduce_Start_from_archetype_Configure)-[:Improvement]->(configuredEmbedder)
create (null_displays__null__null__null__run_the_same_stories_same_stories_using_embedderControls_name_displays_)-[:Improvement]->(configuredEmbedder)
create (null_displays)-[:Bug]->(embedder)
create (null_displays_for_Scenario_name)-[:Bug]->(embedder)
create (reproduce_Start)-[:Improvement]->(embedder)
create (reproduce_Start_from_archetype_Configure)-[:Improvement]->(embedder)
create (null_displays__null__null__null__run_the_same_stories_same_stories_using_embedderControls_name_displays_)-[:Improvement]->(embedder)
create (null_displays)-[:Bug]->(Context)
create (null_displays_for_Scenario_name)-[:Bug]->(Context)
create (reproduce_Start)-[:Improvement]->(Context)
create (reproduce_Start_from_archetype_Configure)-[:Improvement]->(Context)
create (null_displays__null__null__null__run_the_same_stories_same_stories_using_embedderControls_name_displays_)-[:Improvement]->(Context)
create (null_displays)-[:Bug]->(show)
create (null_displays_for_Scenario_name)-[:Bug]->(show)
create (reproduce_Start)-[:Improvement]->(show)
create (reproduce_Start_from_archetype_Configure)-[:Improvement]->(show)
create (null_displays__null__null__null__run_the_same_stories_same_stories_using_embedderControls_name_displays_)-[:Improvement]->(show)
create (Story_meta:issue {name:'Story meta'}) create (Story_meta)-[:Bug]->(meta)
create (value_of_meta_property:issue {name:'value of meta property'}) create (value_of_meta_property)-[:Bug]->(meta)
create (appears_with_next_line:issue {name:'appears with next line'}) create (appears_with_next_line)-[:Improvement]->(meta)
create (Story_meta_story_level_meta_info_story_level_meta_property_story_file_Given_Step_next_line_line_without_quotes_:issue {name:'Story meta - story level - meta info - story level - meta property - story file - Given Step - next line - line without quotes - '}) create (Story_meta_story_level_meta_info_story_level_meta_property_story_file_Given_Step_next_line_line_without_quotes_)-[:Improvement]->(meta)
create (Story_meta)-[:Bug]->(meta)
create (value_of_meta_property)-[:Bug]->(meta)
create (appears_with_next_line)-[:Improvement]->(meta)
create (Story_meta_story_level_meta_info_story_level_meta_property_story_file_Given_Step_next_line_line_without_quotes_)-[:Improvement]->(meta)
create (Story_meta)-[:Bug]->(GivenStories)
create (value_of_meta_property)-[:Bug]->(GivenStories)
create (appears_with_next_line)-[:Improvement]->(GivenStories)
create (Story_meta_story_level_meta_info_story_level_meta_property_story_file_Given_Step_next_line_line_without_quotes_)-[:Improvement]->(GivenStories)
create (UUIDExceptionWrapper_uuidWrappedFailure:issue {name:'UUIDExceptionWrapper uuidWrappedFailure'}) create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(org_jbehave_core)
create (misconfiguration_from_part:issue {name:'misconfiguration from part'}) create (misconfiguration_from_part)-[:Bug]->(org_jbehave_core)
create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(org_jbehave_core_embedder)
create (misconfiguration_from_part)-[:Bug]->(org_jbehave_core_embedder)
create (org_jbehave_core_failures:package {name:'org_jbehave_core_failures', favoritecolor: 'orange'}) create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(org_jbehave_core_failures)
create (misconfiguration_from_part)-[:Bug]->(org_jbehave_core_failures)
create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(org_jbehave_core_steps)
create (misconfiguration_from_part)-[:Bug]->(org_jbehave_core_steps)
create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(core)
create (misconfiguration_from_part)-[:Bug]->(core)
create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(configuration)
create (misconfiguration_from_part)-[:Bug]->(configuration)
create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(embedder)
create (misconfiguration_from_part)-[:Bug]->(embedder)
create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(failed)
create (misconfiguration_from_part)-[:Bug]->(failed)
create (UUIDExceptionWrapper_uuidWrappedFailure)-[:Bug]->(after)
create (misconfiguration_from_part)-[:Bug]->(after)
create (generated_value:issue {name:'generated value'}) create (generated_value)-[:Bug]->(rest)
create (generated_value_from_matcher:issue {name:'generated value from matcher'}) create (generated_value_from_matcher)-[:Bug]->(rest)
create (using_Hamcrest_matchers:issue {name:'using Hamcrest matchers'}) create (using_Hamcrest_matchers)-[:Improvement]->(rest)
create (looks_like_valueLvalue:issue {name:'looks like valueLvalue'}) create (looks_like_valueLvalue)-[:Improvement]->(rest)
create (using_OutcomesTable_with_Hamcrest_matchers:issue {name:'using OutcomesTable with Hamcrest matchers'}) create (using_OutcomesTable_with_Hamcrest_matchers)-[:Improvement]->(rest)
create (xml_tags_have_an_outcome_have_an_outcome_outcome_error_generated_value_gives_an_xml_gives_an_xml_xml_tag_invalid_xml_produce_a_report_produce_a_report_think_the_reporter_think_the_reporter_escape_these_characters_escape_these_characters_:issue {name:'xml tags - have an outcome - have an outcome - outcome error - generated value - gives an xml - gives an xml - xml tag - invalid xml - produce a report - produce a report - think the reporter - think the reporter - escape these characters - escape these characters - '}) create (xml_tags_have_an_outcome_have_an_outcome_outcome_error_generated_value_gives_an_xml_gives_an_xml_xml_tag_invalid_xml_produce_a_report_produce_a_report_think_the_reporter_think_the_reporter_escape_these_characters_escape_these_characters_)-[:Bug]->(rest)
create (generated_value)-[:Bug]->(outcome)
create (generated_value_from_matcher)-[:Bug]->(outcome)
create (using_Hamcrest_matchers)-[:Improvement]->(outcome)
create (looks_like_valueLvalue)-[:Improvement]->(outcome)
create (using_OutcomesTable_with_Hamcrest_matchers)-[:Improvement]->(outcome)
create (xml_tags_have_an_outcome_have_an_outcome_outcome_error_generated_value_gives_an_xml_gives_an_xml_xml_tag_invalid_xml_produce_a_report_produce_a_report_think_the_reporter_think_the_reporter_escape_these_characters_escape_these_characters_)-[:Bug]->(outcome)
create (generated_value)-[:Bug]->(outcome)
create (generated_value_from_matcher)-[:Bug]->(outcome)
create (using_Hamcrest_matchers)-[:Improvement]->(outcome)
create (looks_like_valueLvalue)-[:Improvement]->(outcome)
create (using_OutcomesTable_with_Hamcrest_matchers)-[:Improvement]->(outcome)
create (xml_tags_have_an_outcome_have_an_outcome_outcome_error_generated_value_gives_an_xml_gives_an_xml_xml_tag_invalid_xml_produce_a_report_produce_a_report_think_the_reporter_think_the_reporter_escape_these_characters_escape_these_characters_)-[:Bug]->(outcome)
create (Tables_in_ODT_files:issue {name:'Tables in ODT files'}) create (Tables_in_ODT_files)-[:Bug]->(odf)
create (using_ODT_files:issue {name:'using ODT files'}) create (using_ODT_files)-[:Bug]->(odf)
create (using_ODT_using_ODT_files_ODT_files_write_our_stories_using_tables_made_a_patch_made_a_patch_test_the_code_test_the_code_:issue {name:'using ODT - using ODT files - ODT files - write our stories - using tables - made a patch - made a patch - test the code - test the code - '}) create (using_ODT_using_ODT_files_ODT_files_write_our_stories_using_tables_made_a_patch_made_a_patch_test_the_code_test_the_code_)-[:Improvement]->(odf)
create (JBehave_Selenium:issue {name:'JBehave Selenium'}) create (JBehave_Selenium)-[:Bug]->(findPaths)
create (Find_stories:issue {name:'Find stories'}) create (Find_stories)-[:Improvement]->(findPaths)
create (running_from_jar:issue {name:'running from jar'}) create (running_from_jar)-[:Improvement]->(findPaths)
create (find_story_files_within_built_JAR:issue {name:'find story files within built JAR'}) create (find_story_files_within_built_JAR)-[:Improvement]->(findPaths)
create (JBehave_Selenium)-[:Bug]->(StoryFinder)
create (Find_stories)-[:Improvement]->(StoryFinder)
create (running_from_jar)-[:Improvement]->(StoryFinder)
create (find_story_files_within_built_JAR)-[:Improvement]->(StoryFinder)
create (Step_parameters:issue {name:'Step parameters'}) create (Step_parameters)-[:Bug]->(ant)
create (substring_of_parameter_value:issue {name:'substring of parameter value'}) create (substring_of_parameter_value)-[:Bug]->(ant)
create (has_one_parameter:issue {name:'has one parameter'}) create (has_one_parameter)-[:Improvement]->(ant)
create (take_kind_of_special_cases:issue {name:'take kind of special cases'}) create (take_kind_of_special_cases)-[:Improvement]->(ant)
create (Step_parameters_parameter_value_parameter_value_Given_a_stock_Given_a_stock_stock_of_symbol_Step_usage_Given_a_stock_Given_a_stock_stock_of_symbol_Given_a_stock_Given_a_stock_stock_of_symbol_flawed_implementation_elaborated_replace_special_cases_bearing_the_startend_bearing_the_startend_startend_placeholders_want_the_next_parameter_next_parameter_next_parameter_value_parameter_value_next_parameter_value_replacement_parameter_value_replacement_value_replacement_replace_values_previous_ones_replacement_of_parameters_parameters_values_values_in_step_parameters_values_parameters_values_length_values_length_avoid_partial_replacements_partial_replacements_see_parametrisedStep_see_parametrisedStep_method_parametrisedStep_method_:issue {name:'Step parameters - parameter value - parameter value - Given a stock - Given a stock - stock of symbol - Step usage - Given a stock - Given a stock - stock of symbol - Given a stock - Given a stock - stock of symbol - flawed implementation - elaborated replace - special cases - bearing the startend - bearing the startend - startend placeholders - want the next parameter - next parameter - next parameter value - parameter value - next parameter value replacement - parameter value replacement - value replacement - replace values - previous ones - replacement of parameters - parameters values - values in step - parameters values - parameters values length - values length - avoid partial replacements - partial replacements - see parametrisedStep - see parametrisedStep method - parametrisedStep method - '}) create (Step_parameters_parameter_value_parameter_value_Given_a_stock_Given_a_stock_stock_of_symbol_Step_usage_Given_a_stock_Given_a_stock_stock_of_symbol_Given_a_stock_Given_a_stock_stock_of_symbol_flawed_implementation_elaborated_replace_special_cases_bearing_the_startend_bearing_the_startend_startend_placeholders_want_the_next_parameter_next_parameter_next_parameter_value_parameter_value_next_parameter_value_replacement_parameter_value_replacement_value_replacement_replace_values_previous_ones_replacement_of_parameters_parameters_values_values_in_step_parameters_values_parameters_values_length_values_length_avoid_partial_replacements_partial_replacements_see_parametrisedStep_see_parametrisedStep_method_parametrisedStep_method_)-[:Improvement]->(ant)
create (cutting_stack_trace:issue {name:'cutting stack trace'}) create (cutting_stack_trace)-[:Bug]->(after)
create (cutting_off_stack_trace:issue {name:'cutting off stack trace'}) create (cutting_off_stack_trace)-[:Bug]->(after)
create (stack_trace_:issue {name:'stack trace - '}) create (stack_trace_)-[:Improvement]->(after)
create (Parameterised_scenarios:issue {name:'Parameterised scenarios'}) create (Parameterised_scenarios)-[:Bug]->(configuration)
create (code_in_method:issue {name:'code in method'}) create (code_in_method)-[:Bug]->(configuration)
create (has_item:issue {name:'has item'}) create (has_item)-[:Improvement]->(configuration)
create (is_at_scenario_level:issue {name:'is at scenario level'}) create (is_at_scenario_level)-[:Improvement]->(configuration)
create (has_item_in_basket_Partner_Team:issue {name:'has item in basket Partner Team'}) create (has_item_in_basket_Partner_Team)-[:Improvement]->(configuration)
create (Parameterised_scenarios)-[:Bug]->(keywords)
create (code_in_method)-[:Bug]->(keywords)
create (has_item)-[:Improvement]->(keywords)
create (is_at_scenario_level)-[:Improvement]->(keywords)
create (has_item_in_basket_Partner_Team)-[:Improvement]->(keywords)
create (Parameterised_scenarios)-[:Bug]->(storyControls)
create (code_in_method)-[:Bug]->(storyControls)